/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import V2 = require('../V2');
import deserialize = require('../../../base/deserialize');
import serialize = require('../../../base/serialize');
import values = require('../../../base/values');
import { BindingList } from './service/binding';
import { ChannelList } from './service/channel';
import { RoleList } from './service/role';
import { UserList } from './service/user';

/**
 * @constructor Twilio.IpMessaging.V2.ServiceList
 * @description Initialize the ServiceList
 *
 * @param version - Version of the resource
 */
declare function ServiceList(version: V2): ServiceListInstance;

/**
 * Options to pass to update
 *
 * @property friendlyName - Human-readable name for this service instance
 * @property defaultServiceRoleSid - The default_service_role_sid
 * @property defaultChannelRoleSid - Channel role assigned on channel join
 * @property defaultChannelCreatorRoleSid - Channel role assigned to creator of channel when joining for first time
 * @property readStatusEnabled - true if the member read status feature is enabled, false if not.
 * @property reachabilityEnabled - true if the reachability feature should be enabled.
 * @property typingIndicatorTimeout - The duration in seconds indicating the timeout after "started typing" event when client should assume that user is not typing anymore even if no "ended typing" message received
 * @property consumptionReportInterval - The consumption_report_interval
 * @property "notifications.newMessage.enabled" - The notifications.new_message.enabled
 * @property "notifications.newMessage.template" - The notifications.new_message.template
 * @property "notifications.newMessage.sound" - The notifications.new_message.sound
 * @property "notifications.newMessage.badgeCountEnabled" - The notifications.new_message.badge_count_enabled
 * @property "notifications.addedToChannel.enabled" - The notifications.added_to_channel.enabled
 * @property "notifications.addedToChannel.template" - The notifications.added_to_channel.template
 * @property "notifications.addedToChannel.sound" - The notifications.added_to_channel.sound
 * @property "notifications.removedFromChannel.enabled" - The notifications.removed_from_channel.enabled
 * @property "notifications.removedFromChannel.template" - The notifications.removed_from_channel.template
 * @property "notifications.removedFromChannel.sound" - The notifications.removed_from_channel.sound
 * @property "notifications.invitedToChannel.enabled" - The notifications.invited_to_channel.enabled
 * @property "notifications.invitedToChannel.template" - The notifications.invited_to_channel.template
 * @property "notifications.invitedToChannel.sound" - The notifications.invited_to_channel.sound
 * @property preWebhookUrl - The webhook URL for PRE-Event webhooks.
 * @property postWebhookUrl - The webhook URL for POST-Event webhooks.
 * @property webhookMethod - The webhook request format to use.
 * @property webhookFilters - The list of WebHook events that are enabled for this Service instance.
 * @property "limits.channelMembers" - The maximum number of Members that can be added to Channels within this Service.
 * @property "limits.userChannels" - The maximum number of Channels Users can be a Member of within this Service.
 * @property "media.compatibilityMessage" - The media.compatibility_message
 * @property preWebhookRetryCount - Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses.
 * @property postWebhookRetryCount - Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses.
 * @property "notifications.logEnabled" - The notifications.log_enabled
 */
export interface UpdateOptions {
  "limits.channelMembers"?: number;
  "limits.userChannels"?: number;
  "media.compatibilityMessage"?: string;
  "notifications.addedToChannel.enabled"?: boolean;
  "notifications.addedToChannel.sound"?: string;
  "notifications.addedToChannel.template"?: string;
  "notifications.invitedToChannel.enabled"?: boolean;
  "notifications.invitedToChannel.sound"?: string;
  "notifications.invitedToChannel.template"?: string;
  "notifications.logEnabled"?: boolean;
  "notifications.newMessage.badgeCountEnabled"?: boolean;
  "notifications.newMessage.enabled"?: boolean;
  "notifications.newMessage.sound"?: string;
  "notifications.newMessage.template"?: string;
  "notifications.removedFromChannel.enabled"?: boolean;
  "notifications.removedFromChannel.sound"?: string;
  "notifications.removedFromChannel.template"?: string;
  consumptionReportInterval?: number;
  defaultChannelCreatorRoleSid?: string;
  defaultChannelRoleSid?: string;
  defaultServiceRoleSid?: string;
  friendlyName?: string;
  postWebhookRetryCount?: number;
  postWebhookUrl?: string;
  preWebhookRetryCount?: number;
  preWebhookUrl?: string;
  reachabilityEnabled?: boolean;
  readStatusEnabled?: boolean;
  typingIndicatorTimeout?: number;
  webhookFilters?: string|list;
  webhookMethod?: string;
}

/**
 * Options to pass to update
 *
 * @property friendlyName - Human-readable name for this service instance
 * @property defaultServiceRoleSid - The default_service_role_sid
 * @property defaultChannelRoleSid - Channel role assigned on channel join
 * @property defaultChannelCreatorRoleSid - Channel role assigned to creator of channel when joining for first time
 * @property readStatusEnabled - true if the member read status feature is enabled, false if not.
 * @property reachabilityEnabled - true if the reachability feature should be enabled.
 * @property typingIndicatorTimeout - The duration in seconds indicating the timeout after "started typing" event when client should assume that user is not typing anymore even if no "ended typing" message received
 * @property consumptionReportInterval - The consumption_report_interval
 * @property "notifications.newMessage.enabled" - The notifications.new_message.enabled
 * @property "notifications.newMessage.template" - The notifications.new_message.template
 * @property "notifications.newMessage.sound" - The notifications.new_message.sound
 * @property "notifications.newMessage.badgeCountEnabled" - The notifications.new_message.badge_count_enabled
 * @property "notifications.addedToChannel.enabled" - The notifications.added_to_channel.enabled
 * @property "notifications.addedToChannel.template" - The notifications.added_to_channel.template
 * @property "notifications.addedToChannel.sound" - The notifications.added_to_channel.sound
 * @property "notifications.removedFromChannel.enabled" - The notifications.removed_from_channel.enabled
 * @property "notifications.removedFromChannel.template" - The notifications.removed_from_channel.template
 * @property "notifications.removedFromChannel.sound" - The notifications.removed_from_channel.sound
 * @property "notifications.invitedToChannel.enabled" - The notifications.invited_to_channel.enabled
 * @property "notifications.invitedToChannel.template" - The notifications.invited_to_channel.template
 * @property "notifications.invitedToChannel.sound" - The notifications.invited_to_channel.sound
 * @property preWebhookUrl - The webhook URL for PRE-Event webhooks.
 * @property postWebhookUrl - The webhook URL for POST-Event webhooks.
 * @property webhookMethod - The webhook request format to use.
 * @property webhookFilters - The list of WebHook events that are enabled for this Service instance.
 * @property "limits.channelMembers" - The maximum number of Members that can be added to Channels within this Service.
 * @property "limits.userChannels" - The maximum number of Channels Users can be a Member of within this Service.
 * @property "media.compatibilityMessage" - The media.compatibility_message
 * @property preWebhookRetryCount - Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses.
 * @property postWebhookRetryCount - Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses.
 * @property "notifications.logEnabled" - The notifications.log_enabled
 */
export interface UpdateOptions {
  "limits.channelMembers"?: number;
  "limits.userChannels"?: number;
  "media.compatibilityMessage"?: string;
  "notifications.addedToChannel.enabled"?: boolean;
  "notifications.addedToChannel.sound"?: string;
  "notifications.addedToChannel.template"?: string;
  "notifications.invitedToChannel.enabled"?: boolean;
  "notifications.invitedToChannel.sound"?: string;
  "notifications.invitedToChannel.template"?: string;
  "notifications.logEnabled"?: boolean;
  "notifications.newMessage.badgeCountEnabled"?: boolean;
  "notifications.newMessage.enabled"?: boolean;
  "notifications.newMessage.sound"?: string;
  "notifications.newMessage.template"?: string;
  "notifications.removedFromChannel.enabled"?: boolean;
  "notifications.removedFromChannel.sound"?: string;
  "notifications.removedFromChannel.template"?: string;
  consumptionReportInterval?: number;
  defaultChannelCreatorRoleSid?: string;
  defaultChannelRoleSid?: string;
  defaultServiceRoleSid?: string;
  friendlyName?: string;
  postWebhookRetryCount?: number;
  postWebhookUrl?: string;
  preWebhookRetryCount?: number;
  preWebhookUrl?: string;
  reachabilityEnabled?: boolean;
  readStatusEnabled?: boolean;
  typingIndicatorTimeout?: number;
  webhookFilters?: string|list;
  webhookMethod?: string;
}


declare class ServicePage extends Page {
  /**
   * @constructor Twilio.IpMessaging.V2.ServicePage
   * @augments Page
   * @description Initialize the ServicePage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.IpMessaging.V2, response: object, solution: object);

  /**
   * Build an instance of ServiceInstance
   *
   * @function getInstance
   * @memberof Twilio.IpMessaging.V2.ServicePage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class ServiceInstance {
  /**
   * @constructor Twilio.IpMessaging.V2.ServiceInstance
   * @description Initialize the ServiceContext
   *
   * @property sid - A 34 character string that uniquely identifies this resource.
   * @property accountSid - The unique id of the Account responsible for this service.
   * @property friendlyName - The human-readable name of this service.
   * @property dateCreated - The date that this resource was created
   * @property dateUpdated - The date that this resource was last updated
   * @property defaultServiceRoleSid - The service role assigned to users when they are added to the service.
   * @property defaultChannelRoleSid - The channel role assigned to users when they are added to a channel.
   * @property defaultChannelCreatorRoleSid - The channel role assigned to a channel creator when joining a new channel.
   * @property readStatusEnabled - Enable the Message Constumption Horizon feature.
   * @property reachabilityEnabled - Indicates whether the  the Reachability feature is enabled for this Service instance.
   * @property typingIndicatorTimeout - The amount of time in seconds after a "started typing" event when clients should assume that user is no longer typing, even if no "ended typing" message was received.
   * @property consumptionReportInterval - DEPRECATED.
   * @property limits - Configuration for service instance level limits.
   * @property preWebhookUrl - The webhook URL for PRE-Event webhooks.
   * @property postWebhookUrl - The webhook URL for POST-Event webhooks.
   * @property webhookMethod - The webhook request format to use for both PRE and POST webhooks.
   * @property webhookFilters - The list of WebHook events that are enabled for this Service instance.
   * @property preWebhookRetryCount - Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses.
   * @property postWebhookRetryCount - Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses.
   * @property notifications - Notification configuration for the Service instance.
   * @property media - The media
   * @property url - An absolute URL for this service.
   * @property links - URLs to access the Channels, Roles, and Users for this service.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: Twilio.IpMessaging.V2, payload: object, sid: sid);

  _proxy?: ServiceContext;
  /**
   * Access the bindings
   *
   * @function bindings
   * @memberof Twilio.IpMessaging.V2.ServiceInstance
   * @instance
   */
  bindings();
  /**
   * Access the channels
   *
   * @function channels
   * @memberof Twilio.IpMessaging.V2.ServiceInstance
   * @instance
   */
  channels();
  /**
   * fetch a ServiceInstance
   *
   * @function fetch
   * @memberof Twilio.IpMessaging.V2.ServiceInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a ServiceInstance
   *
   * @function remove
   * @memberof Twilio.IpMessaging.V2.ServiceInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Access the roles
   *
   * @function roles
   * @memberof Twilio.IpMessaging.V2.ServiceInstance
   * @instance
   */
  roles();
  /**
   * Produce a plain JSON object version of the ServiceInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.IpMessaging.V2.ServiceInstance
   * @instance
   */
  toJSON();
  /**
   * update a ServiceInstance
   *
   * @function update
   * @memberof Twilio.IpMessaging.V2.ServiceInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
  /**
   * Access the users
   *
   * @function users
   * @memberof Twilio.IpMessaging.V2.ServiceInstance
   * @instance
   */
  users();
}


declare class ServiceContext {
  /**
   * @constructor Twilio.IpMessaging.V2.ServiceContext
   * @description Initialize the ServiceContext
   *
   * @property channels - channels resource
   * @property roles - roles resource
   * @property users - users resource
   * @property bindings - bindings resource
   *
   * @param version - Version of the resource
   * @param sid - The sid
   */
  constructor(version: Twilio.IpMessaging.V2, sid: sid);

  bindings?: Twilio.IpMessaging.V2.ServiceContext.BindingList;
  channels?: Twilio.IpMessaging.V2.ServiceContext.ChannelList;
  /**
   * fetch a ServiceInstance
   *
   * @function fetch
   * @memberof Twilio.IpMessaging.V2.ServiceContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a ServiceInstance
   *
   * @function remove
   * @memberof Twilio.IpMessaging.V2.ServiceContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  roles?: Twilio.IpMessaging.V2.ServiceContext.RoleList;
  /**
   * update a ServiceInstance
   *
   * @function update
   * @memberof Twilio.IpMessaging.V2.ServiceContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
  users?: Twilio.IpMessaging.V2.ServiceContext.UserList;
}

export { ServiceContext, ServiceInstance, ServiceList, ServicePage }
