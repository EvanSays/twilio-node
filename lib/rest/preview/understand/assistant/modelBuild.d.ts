/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import Understand = require('../../Understand');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';

declare function ModelBuildList(version: Understand, assistantSid: string): ModelBuildListInstance

type ModelBuildStatus = 'enqueued'|'building'|'completed'|'failed'|'canceled';

interface ModelBuildResource {
  /**
   * The unique ID of the Account that created this Model Build.
   */
  account_sid: string;
  /**
   * The unique ID of the parent Assistant.
   */
  assistant_sid: string;
  /**
   * The time in seconds it took to build the model.
   */
  build_duration: number;
  /**
   * The date that this resource was created
   */
  date_created: Date;
  /**
   * The date that this resource was last updated
   */
  date_updated: Date;
  /**
   * The error_code
   */
  error_code: number;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * A string that described the model build status. The values can be: enqueued, building, completed, failed
   */
  status: ModelBuildStatus;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  unique_name: string;
  /**
   * The url
   */
  url: string;
}

interface ModelBuildPayload extends ModelBuildResource, Page.TwilioResponsePayload {
}

interface ModelBuildSolution {
  assistantSid: string;
}

interface ModelBuildListEachOptions extends ListEachOptions<ModelBuildInstance> {
}

interface ModelBuildListOptions extends ListOptions<ModelBuildInstance> {
}

interface ModelBuildListPageOptions extends PageOptions<ModelBuildPage> {
}

interface ModelBuildListCreateOptions {
  /**
   * The status_callback
   */
  statusCallback?: string;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long. For example: v0.1
   */
  uniqueName?: string;
}

interface ModelBuildListInstance {
  /**
   * Gets context of a single ModelBuild resource
   *
   * @param sid - The sid
   */
  (sid: string): ModelBuildContext;
  /**
   * create a ModelBuildInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ModelBuildInstance
   */
  create(opts?: ModelBuildListCreateOptions): Promise<ModelBuildInstance>;
  /**
   * create a ModelBuildInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: ModelBuildListCreateOptions, callback: (error: Error | null, items: ModelBuildInstance) => any): void;
  /**
   * create a ModelBuildInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: ModelBuildInstance) => any): void;
  /**
   * Streams ModelBuildInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: ModelBuildListEachOptions): void;
  /**
   * Streams ModelBuildInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: ModelBuildInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single ModelBuild resource
   *
   * @param sid - The sid
   */
  get(sid: string): ModelBuildContext;
  /**
   * Retrieve a single target page of ModelBuildInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<ModelBuildPage>;
  /**
   * Retrieve a single target page of ModelBuildInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: ModelBuildPage) => any): void;
  /**
   * Lists ModelBuildInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: ModelBuildListOptions): Promise<ModelBuildInstance[]>;
  /**
   * Lists ModelBuildInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: ModelBuildListOptions, callback: (error: Error | null, items: ModelBuildInstance[]) => any): void;
  /**
   * Lists ModelBuildInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: ModelBuildInstance[]) => any): void;
  /**
   * Retrieve a single page of ModelBuildInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: ModelBuildListPageOptions): Promise<ModelBuildPage>;
  /**
   * Retrieve a single page of ModelBuildInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: ModelBuildListPageOptions, callback: (error: Error | null, items: ModelBuildPage) => any): void;
  /**
   * Retrieve a single page of ModelBuildInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: ModelBuildPage) => any): void;
}

interface ModelBuildListFetchOptions {
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long. For example: v0.1
   */
  uniqueName?: string;
}

interface ModelBuildListFetchOptions {
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long. For example: v0.1
   */
  uniqueName?: string;
}

declare class ModelBuildPage extends Page<Understand, ModelBuildPayload, ModelBuildResource, ModelBuildInstance> {
  constructor(version: Understand, response: Response<string>, solution: ModelBuildSolution);

  /**
   * Build an instance of ModelBuildInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ModelBuildPayload): ModelBuildInstance;
}

declare class ModelBuildInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param assistantSid - The assistant_sid
   * @param sid - The sid
   */
  constructor(version: Understand, payload: ModelBuildPayload, assistantSid: string, sid: string);

  private _proxy: ModelBuildContext;
  /**
   * The unique ID of the Account that created this Model Build.
   */
  accountSid: string;
  /**
   * The unique ID of the parent Assistant.
   */
  assistantSid: string;
  /**
   * The time in seconds it took to build the model.
   */
  buildDuration: number;
  /**
   * The date that this resource was created
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated
   */
  dateUpdated: Date;
  /**
   * The error_code
   */
  errorCode: number;
  /**
   * fetch a ModelBuildInstance
   *
   * @returns Promise that resolves to processed ModelBuildInstance
   */
  fetch(): Promise<ModelBuildInstance>;
  /**
   * fetch a ModelBuildInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ModelBuildInstance) => any): void;
  /**
   * remove a ModelBuildInstance
   *
   * @returns Promise that resolves to processed ModelBuildInstance
   */
  remove(): Promise<ModelBuildInstance>;
  /**
   * remove a ModelBuildInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: ModelBuildInstance) => any): void;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * A string that described the model build status. The values can be: enqueued, building, completed, failed
   */
  status: ModelBuildStatus;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  uniqueName: string;
  /**
   * update a ModelBuildInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ModelBuildInstance
   */
  update(opts?: ModelBuildListFetchOptions): Promise<ModelBuildInstance>;
  /**
   * update a ModelBuildInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ModelBuildListFetchOptions, callback: (error: Error | null, items: ModelBuildInstance) => any): void;
  /**
   * update a ModelBuildInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ModelBuildInstance) => any): void;
  /**
   * The url
   */
  url: string;
}

declare class ModelBuildContext {
  constructor(version: Understand, assistantSid: string, sid: string);

  /**
   * fetch a ModelBuildInstance
   *
   * @returns Promise that resolves to processed ModelBuildInstance
   */
  fetch(): Promise<ModelBuildInstance>;
  /**
   * fetch a ModelBuildInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ModelBuildInstance) => any): void;
  /**
   * remove a ModelBuildInstance
   *
   * @returns Promise that resolves to processed ModelBuildInstance
   */
  remove(): Promise<ModelBuildInstance>;
  /**
   * remove a ModelBuildInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: ModelBuildInstance) => any): void;
  /**
   * update a ModelBuildInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ModelBuildInstance
   */
  update(opts?: ModelBuildListFetchOptions): Promise<ModelBuildInstance>;
  /**
   * update a ModelBuildInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ModelBuildListFetchOptions, callback: (error: Error | null, items: ModelBuildInstance) => any): void;
  /**
   * update a ModelBuildInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ModelBuildInstance) => any): void;
}

export { ModelBuildContext, ModelBuildInstance, ModelBuildList, ModelBuildListCreateOptions, ModelBuildListEachOptions, ModelBuildListFetchOptions, ModelBuildListInstance, ModelBuildListOptions, ModelBuildListPageOptions, ModelBuildPage, ModelBuildPayload, ModelBuildResource, ModelBuildSolution, ModelBuildStatus }
