/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Understand = require('../../Understand');
import deserialize = require('../../../../base/deserialize');
import values = require('../../../../base/values');

/**
 * @constructor Twilio.Preview.Understand.AssistantContext.QueryList
 * @description Initialize the QueryList
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param version - Version of the resource
 * @param assistantSid - The unique ID of the parent Assistant.
 */
declare function QueryList(version: Understand, assistantSid: string): QueryListInstance;

/**
 * Options to pass to update
 *
 * @property sampleSid - The sample_sid
 * @property status - A string that described the query status. The values can be: pending_review, reviewed, discarded
 */
export interface UpdateOptions {
  sampleSid?: string;
  status?: string;
}

/**
 * Options to pass to update
 *
 * @property sampleSid - The sample_sid
 * @property status - A string that described the query status. The values can be: pending_review, reviewed, discarded
 */
export interface UpdateOptions {
  sampleSid?: string;
  status?: string;
}


declare class QueryPage extends Page {
  /**
   * @constructor Twilio.Preview.Understand.AssistantContext.QueryPage
   * @augments Page
   * @description Initialize the QueryPage
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Preview.Understand, response: object, solution: object);

  /**
   * Build an instance of QueryInstance
   *
   * @function getInstance
   * @memberof Twilio.Preview.Understand.AssistantContext.QueryPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class QueryInstance {
  /**
   * @constructor Twilio.Preview.Understand.AssistantContext.QueryInstance
   * @description Initialize the QueryContext
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @property accountSid - The unique ID of the Account that created this Query.
   * @property dateCreated - The date that this resource was created
   * @property dateUpdated - The date that this resource was last updated
   * @property results - The natural language analysis results which include the Intent recognized, the confidence score and a list of identified Fields.
   * @property language - An ISO language-country string of the sample.
   * @property modelBuildSid - The unique ID of the Model Build queried.
   * @property query - The end-user's natural language input.
   * @property sampleSid - An optional reference to the Sample created from this query.
   * @property assistantSid - The unique ID of the parent Assistant.
   * @property sid - A 34 character string that uniquely identifies this resource.
   * @property status - A string that described the query status. The values can be: pending_review, reviewed, discarded
   * @property url - The url
   * @property sourceChannel - The communication channel where this end-user input came from
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param assistantSid - The unique ID of the parent Assistant.
   * @param sid - The sid
   */
  constructor(version: Twilio.Preview.Understand, payload: object, assistantSid: sid, sid: sid_like);

  _proxy?: QueryContext;
  /**
   * fetch a QueryInstance
   *
   * @function fetch
   * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a QueryInstance
   *
   * @function remove
   * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the QueryInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance
   * @instance
   */
  toJSON();
  /**
   * update a QueryInstance
   *
   * @function update
   * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}


declare class QueryContext {
  /**
   * @constructor Twilio.Preview.Understand.AssistantContext.QueryContext
   * @description Initialize the QueryContext
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param assistantSid - The assistant_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Preview.Understand, assistantSid: sid_like, sid: sid_like);

  /**
   * fetch a QueryInstance
   *
   * @function fetch
   * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a QueryInstance
   *
   * @function remove
   * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a QueryInstance
   *
   * @function update
   * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { QueryContext, QueryInstance, QueryList, QueryPage }
