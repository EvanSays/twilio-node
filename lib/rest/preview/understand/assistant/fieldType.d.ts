/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import Understand = require('../../Understand');
import { FieldValueListInstance } from './fieldType/fieldValue';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';

declare function FieldTypeList(version: Understand, assistantSid: string): FieldTypeListInstance

interface FieldTypeResource {
  /**
   * The unique ID of the Account that created this Field Type.
   */
  account_sid: string;
  /**
   * The unique ID of the Assistant.
   */
  assistant_sid: string;
  /**
   * The date that this resource was created
   */
  date_created: Date;
  /**
   * The date that this resource was last updated
   */
  date_updated: Date;
  /**
   * A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
   */
  friendly_name: string;
  /**
   * The links
   */
  links: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  unique_name: string;
  /**
   * The url
   */
  url: string;
}

interface FieldTypePayload extends FieldTypeResource, Page.TwilioResponsePayload {
}

interface FieldTypeSolution {
  assistantSid: string;
}

interface FieldTypeListEachOptions extends ListEachOptions<FieldTypeInstance> {
}

interface FieldTypeListOptions extends ListOptions<FieldTypeInstance> {
}

interface FieldTypeListPageOptions extends PageOptions<FieldTypePage> {
}

interface FieldTypeListCreateOptions {
  /**
   * A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
   */
  friendlyName?: string;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  uniqueName: string;
}

interface FieldTypeListInstance {
  /**
   * Gets context of a single FieldType resource
   *
   * @param sid - The sid
   */
  (sid: string): FieldTypeContext;
  /**
   * create a FieldTypeInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FieldTypeInstance
   */
  create(opts: FieldTypeListCreateOptions): Promise<FieldTypeInstance>;
  /**
   * create a FieldTypeInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: FieldTypeListCreateOptions, callback: (error: Error | null, items: FieldTypeInstance) => any): void;
  /**
   * Streams FieldTypeInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: FieldTypeListEachOptions): void;
  /**
   * Streams FieldTypeInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: FieldTypeInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single FieldType resource
   *
   * @param sid - The sid
   */
  get(sid: string): FieldTypeContext;
  /**
   * Retrieve a single target page of FieldTypeInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<FieldTypePage>;
  /**
   * Retrieve a single target page of FieldTypeInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: FieldTypePage) => any): void;
  /**
   * Lists FieldTypeInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: FieldTypeListOptions): Promise<FieldTypeInstance[]>;
  /**
   * Lists FieldTypeInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: FieldTypeListOptions, callback: (error: Error | null, items: FieldTypeInstance[]) => any): void;
  /**
   * Lists FieldTypeInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: FieldTypeInstance[]) => any): void;
  /**
   * Retrieve a single page of FieldTypeInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: FieldTypeListPageOptions): Promise<FieldTypePage>;
  /**
   * Retrieve a single page of FieldTypeInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: FieldTypeListPageOptions, callback: (error: Error | null, items: FieldTypePage) => any): void;
  /**
   * Retrieve a single page of FieldTypeInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: FieldTypePage) => any): void;
}

interface FieldTypeListFetchOptions {
  /**
   * A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
   */
  friendlyName?: string;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  uniqueName?: string;
}

interface FieldTypeListFetchOptions {
  /**
   * A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
   */
  friendlyName?: string;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  uniqueName?: string;
}

declare class FieldTypePage extends Page<Understand, FieldTypePayload, FieldTypeResource, FieldTypeInstance> {
  constructor(version: Understand, response: Response<string>, solution: FieldTypeSolution);

  /**
   * Build an instance of FieldTypeInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: FieldTypePayload): FieldTypeInstance;
}

declare class FieldTypeInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param assistantSid - The assistant_sid
   * @param sid - The sid
   */
  constructor(version: Understand, payload: FieldTypePayload, assistantSid: string, sid: string);

  private _proxy: FieldTypeContext;
  /**
   * The unique ID of the Account that created this Field Type.
   */
  accountSid: string;
  /**
   * The unique ID of the Assistant.
   */
  assistantSid: string;
  /**
   * The date that this resource was created
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated
   */
  dateUpdated: Date;
  /**
   * fetch a FieldTypeInstance
   *
   * @returns Promise that resolves to processed FieldTypeInstance
   */
  fetch(): Promise<FieldTypeInstance>;
  /**
   * fetch a FieldTypeInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: FieldTypeInstance) => any): void;
  fieldValues(): FieldValueListInstance;
  /**
   * A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
   */
  friendlyName: string;
  /**
   * The links
   */
  links: string;
  /**
   * remove a FieldTypeInstance
   *
   * @returns Promise that resolves to processed FieldTypeInstance
   */
  remove(): Promise<FieldTypeInstance>;
  /**
   * remove a FieldTypeInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: FieldTypeInstance) => any): void;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  uniqueName: string;
  /**
   * update a FieldTypeInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FieldTypeInstance
   */
  update(opts?: FieldTypeListFetchOptions): Promise<FieldTypeInstance>;
  /**
   * update a FieldTypeInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: FieldTypeListFetchOptions, callback: (error: Error | null, items: FieldTypeInstance) => any): void;
  /**
   * update a FieldTypeInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: FieldTypeInstance) => any): void;
  /**
   * The url
   */
  url: string;
}

declare class FieldTypeContext {
  constructor(version: Understand, assistantSid: string, sid: string);

  /**
   * fetch a FieldTypeInstance
   *
   * @returns Promise that resolves to processed FieldTypeInstance
   */
  fetch(): Promise<FieldTypeInstance>;
  /**
   * fetch a FieldTypeInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: FieldTypeInstance) => any): void;
  fieldValues: FieldValueListInstance;
  /**
   * remove a FieldTypeInstance
   *
   * @returns Promise that resolves to processed FieldTypeInstance
   */
  remove(): Promise<FieldTypeInstance>;
  /**
   * remove a FieldTypeInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: FieldTypeInstance) => any): void;
  /**
   * update a FieldTypeInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FieldTypeInstance
   */
  update(opts?: FieldTypeListFetchOptions): Promise<FieldTypeInstance>;
  /**
   * update a FieldTypeInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: FieldTypeListFetchOptions, callback: (error: Error | null, items: FieldTypeInstance) => any): void;
  /**
   * update a FieldTypeInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: FieldTypeInstance) => any): void;
}

export { FieldTypeContext, FieldTypeInstance, FieldTypeList, FieldTypeListCreateOptions, FieldTypeListEachOptions, FieldTypeListFetchOptions, FieldTypeListInstance, FieldTypeListOptions, FieldTypeListPageOptions, FieldTypePage, FieldTypePayload, FieldTypeResource, FieldTypeSolution }
