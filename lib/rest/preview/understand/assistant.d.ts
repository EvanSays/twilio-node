/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import Understand = require('../Understand');
import { FieldTypeListInstance } from './assistant/fieldType';
import { IntentListInstance } from './assistant/intent';
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';
import { ModelBuildListInstance } from './assistant/modelBuild';
import { QueryListInstance } from './assistant/query';
import { SerializableClass } from '../../../interfaces';

declare function AssistantList(version: Understand): AssistantListInstance

interface AssistantResource {
  /**
   * The unique ID of the Account that created this Assistant.
   */
  account_sid: string;
  /**
   * The callback_events
   */
  callback_events: string;
  /**
   * The callback_url
   */
  callback_url: string;
  /**
   * The date that this resource was created
   */
  date_created: Date;
  /**
   * The date that this resource was last updated
   */
  date_updated: Date;
  /**
   * A text description for the Assistant. It is non-unique and can up to 255 characters long.
   */
  friendly_name: string;
  /**
   * The unique ID (Sid) of the latest model build. Null if no model has been built.
   */
  latest_model_build_sid: string;
  /**
   * The links
   */
  links: string;
  /**
   * A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter.
   */
  log_queries: boolean;
  /**
   * The webhook URL called to fetch the response to an incoming communication expressed in Assistant TwiML.
   */
  response_url: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The ttl
   */
  ttl: number;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. You can use the unique name in the URL path. Unique up to 64 characters long.
   */
  unique_name: string;
  /**
   * The url
   */
  url: string;
}

interface AssistantPayload extends AssistantResource, Page.TwilioResponsePayload {
}

interface AssistantSolution {
}

interface AssistantListEachOptions extends ListEachOptions<AssistantInstance> {
}

interface AssistantListOptions extends ListOptions<AssistantInstance> {
}

interface AssistantListPageOptions extends PageOptions<AssistantPage> {
}

interface AssistantListCreateOptions {
  /**
   * The callback_events
   */
  callbackEvents?: string;
  /**
   * The callback_url
   */
  callbackUrl?: string;
  /**
   * A text description for the Assistant. It is non-unique and can up to 255 characters long.
   */
  friendlyName?: string;
  /**
   * A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter. Defaults to true if no value is provided.
   */
  logQueries?: boolean;
  /**
   * The webhook URL called to fetch the response to an incoming communication expressed in Assistant TwiML.
   */
  responseUrl?: string;
  /**
   * The ttl
   */
  ttl?: number;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  uniqueName?: string;
}

interface AssistantListInstance {
  /**
   * Gets context of a single Assistant resource
   *
   * @param sid - The sid
   */
  (sid: string): AssistantContext;
  /**
   * create a AssistantInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AssistantInstance
   */
  create(opts?: AssistantListCreateOptions): Promise<AssistantInstance>;
  /**
   * create a AssistantInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: AssistantListCreateOptions, callback: (error: Error | null, items: AssistantInstance) => any): void;
  /**
   * create a AssistantInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: AssistantInstance) => any): void;
  /**
   * Streams AssistantInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: AssistantListEachOptions): void;
  /**
   * Streams AssistantInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: AssistantInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Assistant resource
   *
   * @param sid - The sid
   */
  get(sid: string): AssistantContext;
  /**
   * Retrieve a single target page of AssistantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<AssistantPage>;
  /**
   * Retrieve a single target page of AssistantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: AssistantPage) => any): void;
  /**
   * Lists AssistantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: AssistantListOptions): Promise<AssistantInstance[]>;
  /**
   * Lists AssistantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: AssistantListOptions, callback: (error: Error | null, items: AssistantInstance[]) => any): void;
  /**
   * Lists AssistantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: AssistantInstance[]) => any): void;
  /**
   * Retrieve a single page of AssistantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: AssistantListPageOptions): Promise<AssistantPage>;
  /**
   * Retrieve a single page of AssistantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: AssistantListPageOptions, callback: (error: Error | null, items: AssistantPage) => any): void;
  /**
   * Retrieve a single page of AssistantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: AssistantPage) => any): void;
}

interface AssistantListFetchOptions {
  /**
   * The callback_events
   */
  callbackEvents?: string;
  /**
   * The callback_url
   */
  callbackUrl?: string;
  /**
   * A text description for the Assistant. It is non-unique and can up to 255 characters long.
   */
  friendlyName?: string;
  /**
   * A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter. Defaults to true if no value is provided.
   */
  logQueries?: boolean;
  /**
   * The webhook URL called to fetch the response to an incoming communication expressed in Assistant TwiML.
   */
  responseUrl?: string;
  /**
   * The ttl
   */
  ttl?: number;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  uniqueName?: string;
}

interface AssistantListFetchOptions {
  /**
   * The callback_events
   */
  callbackEvents?: string;
  /**
   * The callback_url
   */
  callbackUrl?: string;
  /**
   * A text description for the Assistant. It is non-unique and can up to 255 characters long.
   */
  friendlyName?: string;
  /**
   * A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter. Defaults to true if no value is provided.
   */
  logQueries?: boolean;
  /**
   * The webhook URL called to fetch the response to an incoming communication expressed in Assistant TwiML.
   */
  responseUrl?: string;
  /**
   * The ttl
   */
  ttl?: number;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  uniqueName?: string;
}

declare class AssistantPage extends Page<Understand, AssistantPayload, AssistantResource, AssistantInstance> {
  constructor(version: Understand, response: Response<string>, solution: AssistantSolution);

  /**
   * Build an instance of AssistantInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AssistantPayload): AssistantInstance;
}

declare class AssistantInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: Understand, payload: AssistantPayload, sid: string);

  private _proxy: AssistantContext;
  /**
   * The unique ID of the Account that created this Assistant.
   */
  accountSid: string;
  /**
   * The callback_events
   */
  callbackEvents: string;
  /**
   * The callback_url
   */
  callbackUrl: string;
  /**
   * The date that this resource was created
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated
   */
  dateUpdated: Date;
  /**
   * fetch a AssistantInstance
   *
   * @returns Promise that resolves to processed AssistantInstance
   */
  fetch(): Promise<AssistantInstance>;
  /**
   * fetch a AssistantInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AssistantInstance) => any): void;
  fieldTypes(): FieldTypeListInstance;
  /**
   * A text description for the Assistant. It is non-unique and can up to 255 characters long.
   */
  friendlyName: string;
  intents(): IntentListInstance;
  /**
   * The unique ID (Sid) of the latest model build. Null if no model has been built.
   */
  latestModelBuildSid: string;
  /**
   * The links
   */
  links: string;
  /**
   * A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter.
   */
  logQueries: boolean;
  modelBuilds(): ModelBuildListInstance;
  queries(): QueryListInstance;
  /**
   * remove a AssistantInstance
   *
   * @returns Promise that resolves to processed AssistantInstance
   */
  remove(): Promise<AssistantInstance>;
  /**
   * remove a AssistantInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: AssistantInstance) => any): void;
  /**
   * The webhook URL called to fetch the response to an incoming communication expressed in Assistant TwiML.
   */
  responseUrl: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The ttl
   */
  ttl: number;
  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. You can use the unique name in the URL path. Unique up to 64 characters long.
   */
  uniqueName: string;
  /**
   * update a AssistantInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AssistantInstance
   */
  update(opts?: AssistantListFetchOptions): Promise<AssistantInstance>;
  /**
   * update a AssistantInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: AssistantListFetchOptions, callback: (error: Error | null, items: AssistantInstance) => any): void;
  /**
   * update a AssistantInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: AssistantInstance) => any): void;
  /**
   * The url
   */
  url: string;
}

declare class AssistantContext {
  constructor(version: Understand, sid: string);

  /**
   * fetch a AssistantInstance
   *
   * @returns Promise that resolves to processed AssistantInstance
   */
  fetch(): Promise<AssistantInstance>;
  /**
   * fetch a AssistantInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AssistantInstance) => any): void;
  fieldTypes: FieldTypeListInstance;
  intents: IntentListInstance;
  modelBuilds: ModelBuildListInstance;
  queries: QueryListInstance;
  /**
   * remove a AssistantInstance
   *
   * @returns Promise that resolves to processed AssistantInstance
   */
  remove(): Promise<AssistantInstance>;
  /**
   * remove a AssistantInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: AssistantInstance) => any): void;
  /**
   * update a AssistantInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AssistantInstance
   */
  update(opts?: AssistantListFetchOptions): Promise<AssistantInstance>;
  /**
   * update a AssistantInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: AssistantListFetchOptions, callback: (error: Error | null, items: AssistantInstance) => any): void;
  /**
   * update a AssistantInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: AssistantInstance) => any): void;
}

export { AssistantContext, AssistantInstance, AssistantList, AssistantListCreateOptions, AssistantListEachOptions, AssistantListFetchOptions, AssistantListInstance, AssistantListOptions, AssistantListPageOptions, AssistantPage, AssistantPayload, AssistantResource, AssistantSolution }
