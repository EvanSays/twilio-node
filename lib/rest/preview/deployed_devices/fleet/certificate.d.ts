/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import DeployedDevices = require('../../DeployedDevices');
import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the CertificateList
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param version - Version of the resource
 * @param fleetSid - The unique identifier of the Fleet.
 */
declare function CertificateList(version: DeployedDevices, fleetSid: string): CertificateListInstance;

interface CertificateResource {
  account_sid: string;
  date_created: Date;
  date_updated: Date;
  device_sid: string;
  fleet_sid: string;
  friendly_name: string;
  sid: string;
  thumbprint: string;
  url: string;
}

interface CertificatePayload extends CertificateResource, Page.TwilioResponsePayload {
}

interface CertificateSolution {
  fleetSid?: string;
}

interface CertificateListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): CertificateContext;
  /**
   * create a CertificateInstance
   *
   * @function create
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  create(opts: object, callback?: function);
  /**
   * Streams CertificateInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateList
   * @instance
   *
   * @param opts - ...
   * @param callback - Function to process each record
   */
  each(opts?: object, callback?: Function);
  /**
   * Constructs a certificate
   *
   * @function get
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateList
   * @instance
   *
   * @param sid - A string that uniquely identifies the Certificate.
   */
  get(sid: string);
  /**
   * Retrieve a single target page of CertificateInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateList
   * @instance
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists CertificateInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  list(opts?: object, callback?: function);
  /**
   * Retrieve a single page of CertificateInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  page(opts?: object, callback?: function);
}

/**
 * Options to pass to update
 *
 * @property friendlyName - The human readable description for this Certificate.
 * @property deviceSid - The unique identifier of a Device to be authenticated.
 */
export interface UpdateOptions {
  deviceSid?: string;
  friendlyName?: string;
}

/**
 * Options to pass to update
 *
 * @property friendlyName - The human readable description for this Certificate.
 * @property deviceSid - The unique identifier of a Device to be authenticated.
 */
export interface UpdateOptions {
  deviceSid?: string;
  friendlyName?: string;
}


declare class CertificatePage extends Page {
  /**
   * @constructor Twilio.Preview.DeployedDevices.FleetContext.CertificatePage
   * @augments Page
   * @description Initialize the CertificatePage
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Preview.DeployedDevices, response: Response<string>, solution: object);

  /**
   * Build an instance of CertificateInstance
   *
   * @function getInstance
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificatePage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class CertificateInstance {
  /**
   * @constructor Twilio.Preview.DeployedDevices.FleetContext.CertificateInstance
   * @description Initialize the CertificateContext
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @property sid - A string that uniquely identifies this Certificate.
   * @property url - URL of this Certificate.
   * @property friendlyName - A human readable description for this Certificate.
   * @property fleetSid - The unique identifier of the Fleet.
   * @property accountSid - The unique SID that identifies this Account.
   * @property deviceSid - The unique identifier of a mapped Device.
   * @property thumbprint - A Certificate unique payload hash.
   * @property dateCreated - The date this Certificate was created.
   * @property dateUpdated - The date this Certificate was updated.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param fleetSid - The unique identifier of the Fleet.
   * @param sid - A string that uniquely identifies the Certificate.
   */
  constructor(version: Twilio.Preview.DeployedDevices, payload: object, fleetSid: sid_like, sid: sid);

  _proxy?: CertificateContext;
  /**
   * fetch a CertificateInstance
   *
   * @function fetch
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a CertificateInstance
   *
   * @function remove
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the CertificateInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateInstance
   * @instance
   */
  toJSON();
  /**
   * update a CertificateInstance
   *
   * @function update
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}


declare class CertificateContext {
  /**
   * @constructor Twilio.Preview.DeployedDevices.FleetContext.CertificateContext
   * @description Initialize the CertificateContext
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param fleetSid - The fleet_sid
   * @param sid - A string that uniquely identifies the Certificate.
   */
  constructor(version: Twilio.Preview.DeployedDevices, fleetSid: sid_like, sid: sid);

  /**
   * fetch a CertificateInstance
   *
   * @function fetch
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a CertificateInstance
   *
   * @function remove
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a CertificateInstance
   *
   * @function update
   * @memberof Twilio.Preview.DeployedDevices.FleetContext.CertificateContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { CertificateContext, CertificateInstance, CertificateList, CertificateListInstance, CertificatePage, CertificatePayload, CertificateResource, CertificateSolution }
