/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the SigningKeyList
 *
 * @param version - Version of the resource
 * @param accountSid - A 34 character string that uniquely identifies this resource.
 */
declare function SigningKeyList(version: V2010, accountSid: string): SigningKeyListInstance;

interface SigningKeyResource {
  date_created: Date;
  date_updated: Date;
  friendly_name: string;
  sid: string;
}

interface SigningKeyPayload extends SigningKeyResource, Page.TwilioResponsePayload {
}

interface SigningKeySolution {
  accountSid?: string;
}

interface SigningKeyListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): SigningKeyContext;
  /**
   * Streams SigningKeyInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: SigningKeyListInstanceEachOptions, callback?: (item: SigningKeyInstance, done: (err?: Error) => void) => void): void;
  /**
   * Constructs a signing_key
   *
   * @param sid - The sid
   */
  get(sid: string): SigningKeyContext;
  /**
   * Retrieve a single target page of SigningKeyInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: SigningKeyPage) => any): Promise<SigningKeyPage>;
  /**
   * Lists SigningKeyInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: SigningKeyListInstanceOptions, callback?: (error: Error | null, items: SigningKeyInstance[]) => any): Promise<SigningKeyInstance[]>;
  /**
   * Retrieve a single page of SigningKeyInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: SigningKeyListInstancePageOptions, callback?: (error: Error | null, items: SigningKeyPage) => any): Promise<SigningKeyPage>;
}

/**
 * Options to pass to update
 *
 * @property friendlyName - The friendly_name
 */
interface SigningKeyInstanceUpdateOptions {
  friendlyName?: string;
}

/**
 * Options to pass to update
 *
 * @property friendlyName - The friendly_name
 */
interface SigningKeyInstanceUpdateOptions {
  friendlyName?: string;
}


declare class SigningKeyPage extends Page<V2010, SigningKeyPayload, SigningKeyResource, SigningKeyInstance> {
  /**
   * Initialize the SigningKeyPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V2010, response: Response<string>, solution: SigningKeySolution);

  /**
   * Build an instance of SigningKeyInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: SigningKeyPayload): SigningKeyInstance;
}


declare class SigningKeyInstance extends SerializableClass {
  /**
   * Initialize the SigningKeyContext
   *
   * @property sid - The sid
   * @property friendlyName - The friendly_name
   * @property dateCreated - The date_created
   * @property dateUpdated - The date_updated
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - A 34 character string that uniquely identifies this resource.
   * @param sid - The sid
   */
  constructor(version: V2010, payload: SigningKeyPayload, accountSid: string, sid: string);

  private _proxy: SigningKeyContext;
  dateCreated: Date;
  dateUpdated: Date;
  /**
   * fetch a SigningKeyInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: SigningKeyInstance) => any): void;
  friendlyName: string;
  /**
   * remove a SigningKeyInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: SigningKeyInstance) => any): void;
  sid: string;
  /**
   * update a SigningKeyInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: SigningKeyInstanceUpdateOptions, callback?: (error: Error | null, items: SigningKeyInstance) => any): void;
}


declare class SigningKeyContext {
  /**
   * Initialize the SigningKeyContext
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - The sid
   */
  constructor(version: V2010, accountSid: string, sid: string);

  /**
   * fetch a SigningKeyInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: SigningKeyInstance) => any): void;
  /**
   * remove a SigningKeyInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: SigningKeyInstance) => any): void;
  /**
   * update a SigningKeyInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: SigningKeyInstanceUpdateOptions, callback?: (error: Error | null, items: SigningKeyInstance) => any): void;
}

export { SigningKeyContext, SigningKeyInstance, SigningKeyList, SigningKeyListInstance, SigningKeyListInstanceEachOptions, SigningKeyListInstanceOptions, SigningKeyListInstancePageOptions, SigningKeyPage, SigningKeyPayload, SigningKeyResource, SigningKeySolution }
