/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import deserialize = require('../../../../base/deserialize');
import serialize = require('../../../../base/serialize');
import values = require('../../../../base/values');
import { FeedbackList } from './call/feedback';
import { FeedbackSummaryList } from './call/feedbackSummary';
import { NotificationList } from './call/notification';
import { RecordingList } from './call/recording';


/**
 * Options to pass to update
 *
 * @property url - URL that returns TwiML
 * @property method - HTTP method to use to fetch TwiML
 * @property status - Status to update the Call with
 * @property fallbackUrl - Fallback URL in case of error
 * @property fallbackMethod - HTTP Method to use with FallbackUrl
 * @property statusCallback - Status Callback URL
 * @property statusCallbackMethod - HTTP Method to use with StatusCallback
 */
export interface UpdateOptions {
  fallbackMethod?: string;
  fallbackUrl?: string;
  method?: string;
  status?: call.update_status;
  statusCallback?: string;
  statusCallbackMethod?: string;
  url?: string;
}

/**
 * Options to pass to update
 *
 * @property url - URL that returns TwiML
 * @property method - HTTP method to use to fetch TwiML
 * @property status - Status to update the Call with
 * @property fallbackUrl - Fallback URL in case of error
 * @property fallbackMethod - HTTP Method to use with FallbackUrl
 * @property statusCallback - Status Callback URL
 * @property statusCallbackMethod - HTTP Method to use with StatusCallback
 */
export interface UpdateOptions {
  fallbackMethod?: string;
  fallbackUrl?: string;
  method?: string;
  status?: call.update_status;
  statusCallback?: string;
  statusCallbackMethod?: string;
  url?: string;
}


declare class CallPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallPage
   * @augments Page
   * @description Initialize the CallPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of CallInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.CallPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}

declare class CallInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallInstance
   * @description Initialize the CallContext
   *
   * @property accountSid - The unique id of the Account responsible for creating this Call
   * @property annotation - The annotation provided for the Call
   * @property answeredBy - Either `human` or `machine` if this Call was initiated with answering machine detection. Empty otherwise.
   * @property apiVersion - The API Version used to create the Call
   * @property callerName - The caller's name if this Call was an incoming call to a phone number with Caller ID Lookup enabled. Empty otherwise.
   * @property dateCreated - The date that this resource was created
   * @property dateUpdated - The date that this resource was last updated
   * @property direction - A string describing the direction of the Call. `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `Dial` verb.
   * @property duration - The length of the Call in seconds.
   * @property endTime - The end time of the Call. Null if the call did not complete successfully.
   * @property forwardedFrom - The forwarding phone number if this Call was an incoming call forwarded from another number (depends on carrier supporting forwarding). Empty otherwise.
   * @property from - The phone number, SIP address or Client identifier that made this Call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
   * @property fromFormatted - The phone number, SIP address or Client identifier that made this Call. Formatted for display.
   * @property groupSid - A 34-character Group Sid associated with this Call. Empty if no Group is associated with the Call.
   * @property parentCallSid - A 34-character string that uniquely identifies the Call that created this leg.
   * @property phoneNumberSid - If the call was inbound, this is the Sid of the `IncomingPhoneNumber` that received the call. If the call was outbound, it is the Sid of the `OutgoingCallerId` from which the call was placed.
   * @property price - The charge for this Call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.
   * @property priceUnit - The currency in which `Price` is measured.
   * @property sid - A 34-character string that uniquely identifies the Call resource.
   * @property startTime - The start time of the Call. Null if the call has not yet been dialed.
   * @property status - A string representing the status of the Call.
   * @property subresourceUris - Call Instance Subresources
   * @property to - The phone number, SIP address or Client identifier that received this Call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
   * @property toFormatted - The phone number, SIP address or Client identifier that received this Call. Formatted for display.
   * @property uri - The URI for this resource, relative to `https://api.twilio.com`
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique id of the Account responsible for creating this Call
   * @param sid - Call Sid that uniquely identifies the Call to fetch
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: CallContext;
  /**
   * Access the feedback
   *
   * @function feedback
   * @memberof Twilio.Api.V2010.AccountContext.CallInstance
   * @instance
   */
  feedback();
  /**
   * fetch a CallInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.CallInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the notifications
   *
   * @function notifications
   * @memberof Twilio.Api.V2010.AccountContext.CallInstance
   * @instance
   */
  notifications();
  /**
   * Access the recordings
   *
   * @function recordings
   * @memberof Twilio.Api.V2010.AccountContext.CallInstance
   * @instance
   */
  recordings();
  /**
   * remove a CallInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.CallInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the CallInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.CallInstance
   * @instance
   */
  toJSON();
  /**
   * update a CallInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.CallInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

declare class CallContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallContext
   * @description Initialize the CallContext
   *
   * @property recordings - recordings resource
   * @property notifications - notifications resource
   * @property feedback - feedback resource
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - Call Sid that uniquely identifies the Call to fetch
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  feedback?: Twilio.Api.V2010.AccountContext.CallContext.FeedbackList;
  /**
   * fetch a CallInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.CallContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  notifications?: Twilio.Api.V2010.AccountContext.CallContext.NotificationList;
  recordings?: Twilio.Api.V2010.AccountContext.CallContext.RecordingList;
  /**
   * remove a CallInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.CallContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a CallInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.CallContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { CallContext, CallInstance, CallList, CallPage }
