/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import { FeedbackListInstance } from './call/feedback';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { NotificationListInstance } from './call/notification';
import { RecordingListInstance } from './call/recording';
import { SerializableClass } from '../../../../interfaces';

declare function CallList(version: V2010, accountSid: string): CallListInstance

type CallEvent = 'initiated'|'ringing'|'answered'|'completed';

type CallStatus = 'queued'|'ringing'|'in-progress'|'completed'|'busy'|'failed'|'no-answer'|'canceled';

type CallUpdateStatus = 'canceled'|'completed';

interface CallResource {
  /**
   * The unique id of the [Account](https://www.twilio.com/docs/api/rest/account) responsible for creating this Call.
   */
  account_sid: string;
  /**
   * The annotation provided for the Call
   */
  annotation: string;
  /**
   * Either `human` or `machine` if this Call was initiated with answering machine detection. Empty otherwise.
   */
  answered_by: string;
  /**
   * The API Version used to create the Call
   */
  api_version: string;
  /**
   * The caller's name if this Call was an incoming call to a phone number with Caller ID Lookup enabled. Empty otherwise.
   */
  caller_name: string;
  /**
   * The date that this resource was created, given as GMT in [RFC 2822](http://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
   */
  date_created: Date;
  /**
   * The date that this resource was last updated, given as GMT in [RFC 2822](http://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
   */
  date_updated: Date;
  /**
   * A string describing the direction of the Call. Values are `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `<Dial>` verb. Using [Elastic SIP Trunking](https://www.twilio.com/docs/sip-trunking), the values can be [`trunking-terminating`](https://www.twilio.com/docs/sip-trunking#termination) for outgoing calls from your communications infrastructure to the PSTN or [`trunking-originating`](https://www.twilio.com/docs/sip-trunking#origination) for incoming calls to your communications infrastructure from the PSTN.
   */
  direction: string;
  /**
   * The length of the Call in seconds. This value is empty for busy, failed, unanswered or ongoing calls.
   */
  duration: string;
  /**
   * The time the Call ended, given as GMT in [RFC 2822](http://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format. Empty if the call did not complete successfully.
   */
  end_time: Date;
  /**
   * The forwarding phone number if this Call was an incoming call forwarded from another number (depends on carrier supporting forwarding). Empty otherwise.
   */
  forwarded_from: string;
  /**
   * The phone number, SIP address, Client identifier or SIM SID that made this Call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`. SIM SIDs are formatted as `sim:sid`.
   */
  from: string;
  /**
   * The phone number, SIP address or Client identifier that made this Call. Formatted for display.
   */
  from_formatted: string;
  /**
   * A 34-character Group Sid associated with this Call. Empty if no Group is associated with the Call.
   */
  group_sid: string;
  /**
   * A 34-character string that uniquely identifies the Call that created this leg.
   */
  parent_call_sid: string;
  /**
   * If the call was inbound, this is the Sid of the `IncomingPhoneNumber` that received the call. If the call was outbound, it is the Sid of the `OutgoingCallerId` from which the call was placed.
   */
  phone_number_sid: string;
  /**
   * The charge for this Call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.
   */
  price: number;
  /**
   * The currency in which `Price` is measured, in [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format (e.g., `USD`, `EUR`, `JPY`). Always capitalized for calls.
   */
  price_unit: string;
  /**
   * A 34-character string that uniquely identifies the Call resource.
   */
  sid: string;
  /**
   * The start time of the call, given as GMT in [RFC 2822](http://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format. Empty if the call has not yet been dialed.
   */
  start_time: Date;
  /**
   * A string representing the status of the Call. May be `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy` or `no-answer`. See [Call Status Values](https://www.twilio.com/docs/api/voice/call#call-status-values) below for more information.
   */
  status: CallStatus;
  /**
   * A Map of various subresources available for the given Call Instance
   */
  subresource_uris: string;
  /**
   * The phone number, SIP address, Client identifier or SIM SID that received this Call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`. SIM SIDs are formatted as `sim:sid`.
   */
  to: string;
  /**
   * The phone number, SIP address or Client identifier that received this Call. Formatted for display.
   */
  to_formatted: string;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`
   */
  uri: string;
}

interface CallPayload extends CallResource, Page.TwilioResponsePayload {
}

interface CallSolution {
  accountSid: string;
}

interface CallListCreateOptions {
  /**
   * The 34-character SID of the application Twilio should use to handle this phone call. If this parameter is present, Twilio will ignore all of the voice URLs passed and use the URLs set on the application. See the [ApplicationSid Parameter](https://www.twilio.com/docs/voice/make-calls#specify-an-applicationsid-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls) for more details.
   */
  applicationSid?: string;
  /**
   * The phone number, SIP address, or Client identifier that made this Call. Phone numbers are in [E.164 format](https://www.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
   */
  callerId?: string;
  /**
   * The HTTP method that Twilio should use to request the `FallbackUrl`. Must be either `GET` or `POST`. Defaults to `POST`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  fallbackMethod?: string;
  /**
   * A URL that Twilio will request if an error occurs requesting or executing the TwiML at `Url`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  fallbackUrl?: string;
  /**
   * The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `To` parameter is a phone number, `From` must also be a phone number.
   */
  from: string;
  /**
   * The if_machine
   */
  ifMachine?: string;
  /**
   * Detect if a human, answering machine, or fax has picked up the call. Use `Enable` if you would like Twilio to return an `AnsweredBy` value as soon as it identifies the called party. If you would like to leave a message on an answering machine, specify `DetectMessageEnd`. If both `SendDigits` and `MachineDetection` parameters are provided, then MachineDetection will be ignored. [Detailed documentation is here](https://www.twilio.com/docs/voice/answering-machine-detection).
   */
  machineDetection?: string;
  /**
   * The number of seconds that Twilio should attempt to perform answering machine detection before timing out and firing a voice request with `AnsweredBy` of `unknown`. Defaults to 30 seconds.
   */
  machineDetectionTimeout?: number;
  /**
   * The HTTP method Twilio should use when making its request to the `Url` parameter's value. Defaults to `POST`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  method?: string;
  /**
   * Set this parameter to `true` to record the entirety of a phone call. The `RecordingUrl` will be sent to the `StatusCallback` URL. Defaults to false.
   */
  record?: boolean;
  /**
   * `mono` or `dual` – defaults to `mono`. Set this parameter to specify the number of channels in the final recording. In a mono-channel recording, both legs of the call are mixed down into a single channel within a single recording file. With dual-channel recording, both legs use separate channels within a single recording file. In dual-channel recordings, the parent call will always be in the first channel, and the child call will always be in the second channel.
   */
  recordingChannels?: string;
  /**
   * A URL that Twilio will send a webhook request to when the recording is available for access.
   */
  recordingStatusCallback?: string;
  /**
   * The recording status events that will trigger Twilio to send webhooks on to the URL specified in `RecordingStatusCallback`. The available values are `in-progress`, `completed`, and `failed`. Defaults are `completed` and `failed`. To specify multiple values, separate them with a space. If any values are specified, the defaults are no longer applicable.
   */
  recordingStatusCallbackEvent?: string[];
  /**
   * The HTTP method Twilio should use when requesting the `RecordingStatusCallback` URL. Defaults to `POST`.
   */
  recordingStatusCallbackMethod?: string;
  /**
   * A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`' (to insert a half second pause). For example, if you connected to a company phone number and wanted to pause for one second, dial extension 1234, and then the pound key, use `SendDigits=ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
   */
  sendDigits?: string;
  /**
   * The sip_auth_password
   */
  sipAuthPassword?: string;
  /**
   * The sip_auth_username
   */
  sipAuthUsername?: string;
  /**
   * A URL that Twilio will send asynchronous webhook requests to on every call event specified in the `StatusCallbackEvent` parameter. If no event is specified, Twilio will send `completed` by default. If an `ApplicationSid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
   */
  statusCallback?: string;
  /**
   * The call progress events that will trigger a webhook from Twilio. Available values are `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, defaults to `completed`. If you want to receive multiple events, please provide multiple `StatusCallbackEvent` values as individual parameters in the `POST` request. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call?code-sample=code-create-a-call-and-specify-a-statuscallbackevent). If an `ApplicationSid` is present, this parameter is ignored.
   */
  statusCallbackEvent?: string[];
  /**
   * The HTTP method Twilio should use when requesting the `StatusCallback` URL. Defaults to `POST`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  statusCallbackMethod?: string;
  /**
   * The integer number of seconds that Twilio should allow the phone to ring before assuming there is no answer. Default is `60` seconds, the maximum is `600` seconds. For some call flows, Twilio will add a 5-second buffer to the timeout value provided, so if you enter a timeout value of 10 seconds, you could see actual timeout closer to 15 seconds. Note, you could set this to a low value like `15` to hang up before reaching an answering machine or voicemail.
   */
  timeout?: number;
  /**
   * The phone number, SIP address, or client identifier to call.
   */
  to: string;
  /**
   * `trim-silence` or `do-not-trim`. Set this parameter to define whether leading and trailing silence is trimmed from the recording.  Defaults to `trim-silence`.
   */
  trim?: string;
  /**
   * The fully qualified URL that hosts instructions for the call. Twilio will consult this URL when the call connects. See the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) details in [Making Calls](https://www.twilio.com/docs/voice/make-calls) for more details.
   */
  url?: string;
}

interface CallListEachOptions extends ListEachOptions<CallInstance> {
  /**
   * Only show calls that ended on this date
   */
  endTime?: Date;
  /**
   * Only show calls from this phone number, SIP address, Client identifier or SIM SID.
   */
  from?: string;
  /**
   * Only show calls spawned by the Call with this SID.
   */
  parentCallSid?: string;
  /**
   * Only show calls that started on this date, given as `YYYY-MM-DD`. Also supports inequalities, such as `StartTime<=YYYY-MM-DD` for calls that started at or before midnight on a date, and `StartTime>=YYYY-MM-DD` for calls that started at or after midnight on a date.
   */
  startTime?: Date;
  /**
   * Only show calls currently in the specified status. May be `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
   */
  status?: CallStatus;
  /**
   * Only show calls to this phone number, SIP address, Client identifier or SIM SID.
   */
  to?: string;
}

interface CallListOptions extends ListOptions<CallInstance> {
  /**
   * Only show calls that ended on this date
   */
  endTime?: Date;
  /**
   * Only show calls from this phone number, SIP address, Client identifier or SIM SID.
   */
  from?: string;
  /**
   * Only show calls spawned by the Call with this SID.
   */
  parentCallSid?: string;
  /**
   * Only show calls that started on this date, given as `YYYY-MM-DD`. Also supports inequalities, such as `StartTime<=YYYY-MM-DD` for calls that started at or before midnight on a date, and `StartTime>=YYYY-MM-DD` for calls that started at or after midnight on a date.
   */
  startTime?: Date;
  /**
   * Only show calls currently in the specified status. May be `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
   */
  status?: CallStatus;
  /**
   * Only show calls to this phone number, SIP address, Client identifier or SIM SID.
   */
  to?: string;
}

interface CallListPageOptions extends PageOptions<CallPage> {
  /**
   * Only show calls that ended on this date
   */
  endTime?: Date;
  /**
   * Only show calls from this phone number, SIP address, Client identifier or SIM SID.
   */
  from?: string;
  /**
   * Only show calls spawned by the Call with this SID.
   */
  parentCallSid?: string;
  /**
   * Only show calls that started on this date, given as `YYYY-MM-DD`. Also supports inequalities, such as `StartTime<=YYYY-MM-DD` for calls that started at or before midnight on a date, and `StartTime>=YYYY-MM-DD` for calls that started at or after midnight on a date.
   */
  startTime?: Date;
  /**
   * Only show calls currently in the specified status. May be `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
   */
  status?: CallStatus;
  /**
   * Only show calls to this phone number, SIP address, Client identifier or SIM SID.
   */
  to?: string;
}

interface CallListInstance {
  /**
   * Gets context of a single Call resource
   *
   * @param sid - Call Sid that uniquely identifies the Call to fetch
   */
  (sid: string): CallContext;
  /**
   * create a CallInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CallInstance
   */
  create(opts: CallListCreateOptions): Promise<CallInstance>;
  /**
   * create a CallInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: CallListCreateOptions, callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * Streams CallInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: CallListEachOptions): void;
  /**
   * Streams CallInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: CallInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Call resource
   *
   * @param sid - Call Sid that uniquely identifies the Call to fetch
   */
  get(sid: string): CallContext;
  /**
   * Retrieve a single target page of CallInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<CallPage>;
  /**
   * Retrieve a single target page of CallInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: CallPage) => any): void;
  /**
   * Lists CallInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: CallListOptions): Promise<CallInstance[]>;
  /**
   * Lists CallInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: CallListOptions, callback: (error: Error | null, items: CallInstance[]) => any): void;
  /**
   * Lists CallInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: CallInstance[]) => any): void;
  /**
   * Retrieve a single page of CallInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: CallListPageOptions): Promise<CallPage>;
  /**
   * Retrieve a single page of CallInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: CallListPageOptions, callback: (error: Error | null, items: CallPage) => any): void;
  /**
   * Retrieve a single page of CallInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: CallPage) => any): void;
}

interface CallListFetchOptions {
  /**
   * The HTTP method that Twilio should use to request the `FallbackUrl`. Must be either `GET` or `POST`. Defaults to `POST`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  fallbackMethod?: string;
  /**
   * A URL that Twilio will request if an error occurs when requesting or executing the TwiML at `Url`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  fallbackUrl?: string;
  /**
   * The HTTP method Twilio should use when making its request to the `Url` parameter's value. Defaults to `POST`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  method?: string;
  /**
   * Either `canceled` or `completed`. Specifying `canceled` will attempt to hang up calls that are queued or ringing, but will not affect calls already in progress. Specifying `completed` will attempt to hang up a call even if it's already in progress.
   */
  status?: CallUpdateStatus;
  /**
   * A URL that Twilio will send asynchronous webhook requests to on every call event specified in the `StatusCallbackEvent` parameter. If no event is specified, Twilio will send `completed` by default. If an `ApplicationSid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
   */
  statusCallback?: string;
  /**
   * The HTTP method Twilio should use when requesting the `StatusCallback` URL. Defaults to `POST`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  statusCallbackMethod?: string;
  /**
   * that hosts instructions for the call. Twilio will consult this URL when the call connects. See the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls) for more details.
   */
  url?: string;
}

interface CallListFetchOptions {
  /**
   * The HTTP method that Twilio should use to request the `FallbackUrl`. Must be either `GET` or `POST`. Defaults to `POST`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  fallbackMethod?: string;
  /**
   * A URL that Twilio will request if an error occurs when requesting or executing the TwiML at `Url`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  fallbackUrl?: string;
  /**
   * The HTTP method Twilio should use when making its request to the `Url` parameter's value. Defaults to `POST`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  method?: string;
  /**
   * Either `canceled` or `completed`. Specifying `canceled` will attempt to hang up calls that are queued or ringing, but will not affect calls already in progress. Specifying `completed` will attempt to hang up a call even if it's already in progress.
   */
  status?: CallUpdateStatus;
  /**
   * A URL that Twilio will send asynchronous webhook requests to on every call event specified in the `StatusCallbackEvent` parameter. If no event is specified, Twilio will send `completed` by default. If an `ApplicationSid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
   */
  statusCallback?: string;
  /**
   * The HTTP method Twilio should use when requesting the `StatusCallback` URL. Defaults to `POST`. If an `ApplicationSid` parameter is present, this parameter is ignored.
   */
  statusCallbackMethod?: string;
  /**
   * that hosts instructions for the call. Twilio will consult this URL when the call connects. See the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls) for more details.
   */
  url?: string;
}

declare class CallPage extends Page<V2010, CallPayload, CallResource, CallInstance> {
  constructor(version: V2010, response: Response<string>, solution: CallSolution);

  /**
   * Build an instance of CallInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: CallPayload): CallInstance;
}

declare class CallInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param sid - Call Sid that uniquely identifies the Call to fetch
   */
  constructor(version: V2010, payload: CallPayload, accountSid: string, sid: string);

  private _proxy: CallContext;
  /**
   * The unique id of the [Account](https://www.twilio.com/docs/api/rest/account) responsible for creating this Call.
   */
  accountSid: string;
  /**
   * The annotation provided for the Call
   */
  annotation: string;
  /**
   * Either `human` or `machine` if this Call was initiated with answering machine detection. Empty otherwise.
   */
  answeredBy: string;
  /**
   * The API Version used to create the Call
   */
  apiVersion: string;
  /**
   * The caller's name if this Call was an incoming call to a phone number with Caller ID Lookup enabled. Empty otherwise.
   */
  callerName: string;
  /**
   * The date that this resource was created, given as GMT in [RFC 2822](http://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated, given as GMT in [RFC 2822](http://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
   */
  dateUpdated: Date;
  /**
   * A string describing the direction of the Call. Values are `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `<Dial>` verb. Using [Elastic SIP Trunking](https://www.twilio.com/docs/sip-trunking), the values can be [`trunking-terminating`](https://www.twilio.com/docs/sip-trunking#termination) for outgoing calls from your communications infrastructure to the PSTN or [`trunking-originating`](https://www.twilio.com/docs/sip-trunking#origination) for incoming calls to your communications infrastructure from the PSTN.
   */
  direction: string;
  /**
   * The length of the Call in seconds. This value is empty for busy, failed, unanswered or ongoing calls.
   */
  duration: string;
  /**
   * The time the Call ended, given as GMT in [RFC 2822](http://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format. Empty if the call did not complete successfully.
   */
  endTime: Date;
  feedback(): FeedbackListInstance;
  /**
   * fetch a CallInstance
   *
   * @returns Promise that resolves to processed CallInstance
   */
  fetch(): Promise<CallInstance>;
  /**
   * fetch a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * The forwarding phone number if this Call was an incoming call forwarded from another number (depends on carrier supporting forwarding). Empty otherwise.
   */
  forwardedFrom: string;
  /**
   * The phone number, SIP address, Client identifier or SIM SID that made this Call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`. SIM SIDs are formatted as `sim:sid`.
   */
  from: string;
  /**
   * The phone number, SIP address or Client identifier that made this Call. Formatted for display.
   */
  fromFormatted: string;
  /**
   * A 34-character Group Sid associated with this Call. Empty if no Group is associated with the Call.
   */
  groupSid: string;
  notifications(): NotificationListInstance;
  /**
   * A 34-character string that uniquely identifies the Call that created this leg.
   */
  parentCallSid: string;
  /**
   * If the call was inbound, this is the Sid of the `IncomingPhoneNumber` that received the call. If the call was outbound, it is the Sid of the `OutgoingCallerId` from which the call was placed.
   */
  phoneNumberSid: string;
  /**
   * The charge for this Call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.
   */
  price: number;
  /**
   * The currency in which `Price` is measured, in [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format (e.g., `USD`, `EUR`, `JPY`). Always capitalized for calls.
   */
  priceUnit: string;
  recordings(): RecordingListInstance;
  /**
   * remove a CallInstance
   *
   * @returns Promise that resolves to processed CallInstance
   */
  remove(): Promise<CallInstance>;
  /**
   * remove a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * A 34-character string that uniquely identifies the Call resource.
   */
  sid: string;
  /**
   * The start time of the call, given as GMT in [RFC 2822](http://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format. Empty if the call has not yet been dialed.
   */
  startTime: Date;
  /**
   * A string representing the status of the Call. May be `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy` or `no-answer`. See [Call Status Values](https://www.twilio.com/docs/api/voice/call#call-status-values) below for more information.
   */
  status: CallStatus;
  /**
   * A Map of various subresources available for the given Call Instance
   */
  subresourceUris: string;
  /**
   * The phone number, SIP address, Client identifier or SIM SID that received this Call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`. SIM SIDs are formatted as `sim:sid`.
   */
  to: string;
  /**
   * The phone number, SIP address or Client identifier that received this Call. Formatted for display.
   */
  toFormatted: string;
  /**
   * update a CallInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CallInstance
   */
  update(opts?: CallListFetchOptions): Promise<CallInstance>;
  /**
   * update a CallInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: CallListFetchOptions, callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * update a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`
   */
  uri: string;
}

declare class CallContext {
  constructor(version: V2010, accountSid: string, sid: string);

  feedback: FeedbackListInstance;
  /**
   * fetch a CallInstance
   *
   * @returns Promise that resolves to processed CallInstance
   */
  fetch(): Promise<CallInstance>;
  /**
   * fetch a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CallInstance) => any): void;
  notifications: NotificationListInstance;
  recordings: RecordingListInstance;
  /**
   * remove a CallInstance
   *
   * @returns Promise that resolves to processed CallInstance
   */
  remove(): Promise<CallInstance>;
  /**
   * remove a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * update a CallInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CallInstance
   */
  update(opts?: CallListFetchOptions): Promise<CallInstance>;
  /**
   * update a CallInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: CallListFetchOptions, callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * update a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: CallInstance) => any): void;
}

export { CallContext, CallEvent, CallInstance, CallList, CallListCreateOptions, CallListEachOptions, CallListFetchOptions, CallListInstance, CallListOptions, CallListPageOptions, CallPage, CallPayload, CallResource, CallSolution, CallStatus, CallUpdateStatus }
