/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V2010 = require('../../../V2010');
import serialize = require('../../../../../base/serialize');
import { CredentialListMappingList } from './domain/credentialListMapping';
import { IpAccessControlListMappingList } from './domain/ipAccessControlListMapping';
import { SerializableClass } from '../../../../../interfaces';

/**
 * @description Initialize the DomainList
 *
 * @param version - Version of the resource
 * @param accountSid - A 34 character string that uniquely identifies this resource.
 */
declare function DomainList(version: V2010, accountSid: string): DomainListInstance;

interface DomainResource {
  account_sid: string;
  api_version: string;
  auth_type: string;
  date_created: Date;
  date_updated: Date;
  domain_name: string;
  friendly_name: string;
  sid: string;
  sip_registration: boolean;
  subresource_uris: string;
  uri: string;
  voice_fallback_method: string;
  voice_fallback_url: string;
  voice_method: string;
  voice_status_callback_method: string;
  voice_status_callback_url: string;
  voice_url: string;
}

interface DomainPayload extends DomainResource, Page.TwilioResponsePayload {
}

interface DomainSolution {
  accountSid?: string;
}

interface DomainListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): DomainContext;
  /**
   * create a DomainInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: DomainListInstanceCreateOptions, callback?: function);
  /**
   * Streams DomainInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: DomainListInstanceEachOptions, callback?: (item: DomainInstance, done: (err?: Error) => void) => void);
  /**
   * Constructs a domain
   *
   * @param sid - Fetch by unique Domain Sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of DomainInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists DomainInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: DomainListInstanceOptions, callback?: function);
  /**
   * Retrieve a single page of DomainInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: DomainListInstancePageOptions, callback?: function);
}

/**
 * Options to pass to update
 *
 * @property authType - The auth_type
 * @property friendlyName - A user-specified, human-readable name for the trigger.
 * @property voiceFallbackMethod - The voice_fallback_method
 * @property voiceFallbackUrl - The voice_fallback_url
 * @property voiceMethod - HTTP method to use with voice_url
 * @property voiceStatusCallbackMethod - The voice_status_callback_method
 * @property voiceStatusCallbackUrl - The voice_status_callback_url
 * @property voiceUrl - The voice_url
 * @property sipRegistration - The sip_registration
 */
export interface DomainInstanceUpdateOptions {
  authType?: string;
  friendlyName?: string;
  sipRegistration?: boolean;
  voiceFallbackMethod?: string;
  voiceFallbackUrl?: string;
  voiceMethod?: string;
  voiceStatusCallbackMethod?: string;
  voiceStatusCallbackUrl?: string;
  voiceUrl?: string;
}

/**
 * Options to pass to update
 *
 * @property authType - The auth_type
 * @property friendlyName - A user-specified, human-readable name for the trigger.
 * @property voiceFallbackMethod - The voice_fallback_method
 * @property voiceFallbackUrl - The voice_fallback_url
 * @property voiceMethod - HTTP method to use with voice_url
 * @property voiceStatusCallbackMethod - The voice_status_callback_method
 * @property voiceStatusCallbackUrl - The voice_status_callback_url
 * @property voiceUrl - The voice_url
 * @property sipRegistration - The sip_registration
 */
export interface DomainContextUpdateOptions {
  authType?: string;
  friendlyName?: string;
  sipRegistration?: boolean;
  voiceFallbackMethod?: string;
  voiceFallbackUrl?: string;
  voiceMethod?: string;
  voiceStatusCallbackMethod?: string;
  voiceStatusCallbackUrl?: string;
  voiceUrl?: string;
}

/**
 * Options to pass to each
 *
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 */
export interface DomainListInstanceEachOptions {
  callback?: (item: DomainInstance, done: (err?: Error) => void) => void;
  done?: Function;
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to list
 *
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
export interface DomainListInstanceOptions {
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to page
 *
 * @property pageToken - PageToken provided by the API
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 */
export interface DomainListInstancePageOptions {
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
}

/**
 * Options to pass to create
 *
 * @property domainName - The unique address on Twilio to route SIP traffic
 * @property friendlyName - A user-specified, human-readable name for the trigger.
 * @property authType - The types of authentication mapped to the domain
 * @property voiceUrl - URL Twilio will request when receiving a call
 * @property voiceMethod - HTTP method to use with voice_url
 * @property voiceFallbackUrl - URL Twilio will request if an error occurs in executing TwiML
 * @property voiceFallbackMethod - HTTP method used with voice_fallback_url
 * @property voiceStatusCallbackUrl - URL that Twilio will request with status updates
 * @property voiceStatusCallbackMethod - The HTTP method Twilio will use to make requests to the StatusCallback URL.
 * @property sipRegistration - The sip_registration
 */
export interface DomainListInstanceCreateOptions {
  authType?: string;
  domainName: string;
  friendlyName?: string;
  sipRegistration?: boolean;
  voiceFallbackMethod?: string;
  voiceFallbackUrl?: string;
  voiceMethod?: string;
  voiceStatusCallbackMethod?: string;
  voiceStatusCallbackUrl?: string;
  voiceUrl?: string;
}


declare class DomainPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainPage
   * @augments Page
   * @description Initialize the DomainPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: Response<string>, solution: object);

  /**
   * Build an instance of DomainInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class DomainInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainInstance
   * @description Initialize the DomainContext
   *
   * @property accountSid - The unique id of the account that sent the message
   * @property apiVersion - The Twilio API version used to process the message
   * @property authType - The types of authentication mapped to the domain
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property domainName - The unique address on Twilio to route SIP traffic
   * @property friendlyName - A user-specified, human-readable name for the trigger.
   * @property sid - A string that uniquely identifies the SIP Domain
   * @property uri - The URI for this resource
   * @property voiceFallbackMethod - HTTP method used with voice_fallback_url
   * @property voiceFallbackUrl - URL Twilio will request if an error occurs in executing TwiML
   * @property voiceMethod - HTTP method to use with voice_url
   * @property voiceStatusCallbackMethod - The HTTP method Twilio will use to make requests to the StatusCallback URL.
   * @property voiceStatusCallbackUrl - URL that Twilio will request with status updates
   * @property voiceUrl - URL Twilio will request when receiving a call
   * @property subresourceUris - The subresource_uris
   * @property sipRegistration - If SIP registration is allowed
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - A 34 character string that uniquely identifies this resource.
   * @param sid - Fetch by unique Domain Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: DomainContext;
  /**
   * Access the credentialListMappings
   */
  credentialListMappings();
  /**
   * fetch a DomainInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the ipAccessControlListMappings
   */
  ipAccessControlListMappings();
  /**
   * remove a DomainInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the DomainInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON();
  /**
   * update a DomainInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: DomainInstanceUpdateOptions, callback?: function);
}


declare class DomainContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext
   * @description Initialize the DomainContext
   *
   * @property ipAccessControlListMappings - ipAccessControlListMappings resource
   * @property credentialListMappings - credentialListMappings resource
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique Domain Sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  credentialListMappings?: Twilio.Api.V2010.AccountContext.SipContext.DomainContext.CredentialListMappingList;
  /**
   * fetch a DomainInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  ipAccessControlListMappings?: Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList;
  /**
   * remove a DomainInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a DomainInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: DomainContextUpdateOptions, callback?: function);
}

export { DomainContext, DomainInstance, DomainList, DomainListInstance, DomainPage, DomainPayload, DomainResource, DomainSolution }
