/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import V2010 = require('../../../V2010');
import deserialize = require('../../../../../base/deserialize');
import serialize = require('../../../../../base/serialize');
import values = require('../../../../../base/values');
import { CredentialListMappingList } from './domain/credentialListMapping';
import { IpAccessControlListMappingList } from './domain/ipAccessControlListMapping';


/**
 * Options to pass to update
 *
 * @property authType - The auth_type
 * @property friendlyName - A user-specified, human-readable name for the trigger.
 * @property voiceFallbackMethod - The voice_fallback_method
 * @property voiceFallbackUrl - The voice_fallback_url
 * @property voiceMethod - HTTP method to use with voice_url
 * @property voiceStatusCallbackMethod - The voice_status_callback_method
 * @property voiceStatusCallbackUrl - The voice_status_callback_url
 * @property voiceUrl - The voice_url
 * @property sipRegistration - The sip_registration
 */
export interface UpdateOptions {
  authType?: string;
  friendlyName?: string;
  sipRegistration?: boolean;
  voiceFallbackMethod?: string;
  voiceFallbackUrl?: string;
  voiceMethod?: string;
  voiceStatusCallbackMethod?: string;
  voiceStatusCallbackUrl?: string;
  voiceUrl?: string;
}

/**
 * Options to pass to update
 *
 * @property authType - The auth_type
 * @property friendlyName - A user-specified, human-readable name for the trigger.
 * @property voiceFallbackMethod - The voice_fallback_method
 * @property voiceFallbackUrl - The voice_fallback_url
 * @property voiceMethod - HTTP method to use with voice_url
 * @property voiceStatusCallbackMethod - The voice_status_callback_method
 * @property voiceStatusCallbackUrl - The voice_status_callback_url
 * @property voiceUrl - The voice_url
 * @property sipRegistration - The sip_registration
 */
export interface UpdateOptions {
  authType?: string;
  friendlyName?: string;
  sipRegistration?: boolean;
  voiceFallbackMethod?: string;
  voiceFallbackUrl?: string;
  voiceMethod?: string;
  voiceStatusCallbackMethod?: string;
  voiceStatusCallbackUrl?: string;
  voiceUrl?: string;
}


declare class DomainPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainPage
   * @augments Page
   * @description Initialize the DomainPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of DomainInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}

declare class DomainInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainInstance
   * @description Initialize the DomainContext
   *
   * @property accountSid - The unique id of the account that sent the message
   * @property apiVersion - The Twilio API version used to process the message
   * @property authType - The types of authentication mapped to the domain
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property domainName - The unique address on Twilio to route SIP traffic
   * @property friendlyName - A user-specified, human-readable name for the trigger.
   * @property sid - A string that uniquely identifies the SIP Domain
   * @property uri - The URI for this resource
   * @property voiceFallbackMethod - HTTP method used with voice_fallback_url
   * @property voiceFallbackUrl - URL Twilio will request if an error occurs in executing TwiML
   * @property voiceMethod - HTTP method to use with voice_url
   * @property voiceStatusCallbackMethod - The HTTP method Twilio will use to make requests to the StatusCallback URL.
   * @property voiceStatusCallbackUrl - URL that Twilio will request with status updates
   * @property voiceUrl - URL Twilio will request when receiving a call
   * @property subresourceUris - The subresource_uris
   * @property sipRegistration - If SIP registration is allowed
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - A 34 character string that uniquely identifies this resource.
   * @param sid - Fetch by unique Domain Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: DomainContext;
  /**
   * Access the credentialListMappings
   *
   * @function credentialListMappings
   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance
   * @instance
   */
  credentialListMappings();
  /**
   * fetch a DomainInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the ipAccessControlListMappings
   *
   * @function ipAccessControlListMappings
   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance
   * @instance
   */
  ipAccessControlListMappings();
  /**
   * remove a DomainInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the DomainInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance
   * @instance
   */
  toJSON();
  /**
   * update a DomainInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

declare class DomainContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext
   * @description Initialize the DomainContext
   *
   * @property ipAccessControlListMappings - ipAccessControlListMappings resource
   * @property credentialListMappings - credentialListMappings resource
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique Domain Sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  credentialListMappings?: Twilio.Api.V2010.AccountContext.SipContext.DomainContext.CredentialListMappingList;
  /**
   * fetch a DomainInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  ipAccessControlListMappings?: Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList;
  /**
   * remove a DomainInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a DomainInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { DomainContext, DomainInstance, DomainList, DomainPage }
