/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import serialize = require('../../../../base/serialize');
import { AddOnResultList } from './recording/addOnResult';
import { SerializableClass } from '../../../../interfaces';
import { TranscriptionList } from './recording/transcription';

/**
 * @description Initialize the RecordingList
 *
 * @param version - Version of the resource
 * @param accountSid - The unique sid that identifies this account
 */
declare function RecordingList(version: V2010, accountSid: string): RecordingListInstance;

interface RecordingResource {
  account_sid: string;
  api_version: string;
  call_sid: string;
  channels: number;
  conference_sid: string;
  date_created: Date;
  date_updated: Date;
  duration: string;
  encryption_details: string;
  error_code: number;
  price: string;
  price_unit: string;
  sid: string;
  source: RecordingSource;
  start_time: Date;
  status: RecordingStatus;
  subresource_uris: string;
  uri: string;
}

interface RecordingPayload extends RecordingResource, Page.TwilioResponsePayload {
}

interface RecordingSolution {
  accountSid?: string;
}

interface RecordingListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): RecordingContext;
  /**
   * Streams RecordingInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: RecordingListInstanceEachOptions, callback?: (item: RecordingInstance, done: (err?: Error) => void) => void): void;
  /**
   * Constructs a recording
   *
   * @param sid - Fetch by unique recording Sid
   */
  get(sid: string): RecordingContext;
  /**
   * Retrieve a single target page of RecordingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function): Promise<RecordingPage>;
  /**
   * @description Lists RecordingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: RecordingListInstanceOptions, callback?: function): Promise<RecordingInstance[]>;
  /**
   * Retrieve a single page of RecordingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: RecordingListInstancePageOptions, callback?: function): Promise<RecordingPage>;
}

/**
 * Options to pass to each
 *
 * @property dateCreatedBefore - Filter by date created
 * @property dateCreated - Filter by date created
 * @property dateCreatedAfter - Filter by date created
 * @property callSid - Filter by call_sid
 * @property conferenceSid - The conference_sid
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 */
export interface RecordingListInstanceEachOptions {
  callSid?: string;
  callback?: (item: RecordingInstance, done: (err?: Error) => void) => void;
  conferenceSid?: string;
  dateCreated?: Date;
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  done?: Function;
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to list
 *
 * @property dateCreatedBefore - Filter by date created
 * @property dateCreated - Filter by date created
 * @property dateCreatedAfter - Filter by date created
 * @property callSid - Filter by call_sid
 * @property conferenceSid - The conference_sid
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
export interface RecordingListInstanceOptions {
  callSid?: string;
  conferenceSid?: string;
  dateCreated?: Date;
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to page
 *
 * @property dateCreatedBefore - Filter by date created
 * @property dateCreated - Filter by date created
 * @property dateCreatedAfter - Filter by date created
 * @property callSid - Filter by call_sid
 * @property conferenceSid - The conference_sid
 * @property pageToken - PageToken provided by the API
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 */
export interface RecordingListInstancePageOptions {
  callSid?: string;
  conferenceSid?: string;
  dateCreated?: Date;
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
}


declare class RecordingPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.RecordingPage
   * @augments Page
   * @description Initialize the RecordingPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: Response<string>, solution: object);

  /**
   * Build an instance of RecordingInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class RecordingInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.RecordingInstance
   * @description Initialize the RecordingContext
   *
   * @property accountSid - The unique sid that identifies this account
   * @property apiVersion - The version of the API in use during the recording.
   * @property callSid - The unique id for the call leg that corresponds to the recording.
   * @property conferenceSid - The unique id for the conference associated with the recording, if a conference recording.
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property startTime - The start time of the recording, given in RFC 2822 format.
   * @property duration - The length of the recording, in seconds.
   * @property sid - A string that uniquely identifies this recording
   * @property price - The one-time cost of creating this recording.
   * @property priceUnit - The currency used in the Price property.
   * @property status - The status of the recording.
   * @property channels - The number of channels in the final recording file as an integer.
   * @property source - The way in which this recording was created.
   * @property errorCode - More information about the recording failure, if Status is failed.
   * @property uri - The URI for this resource
   * @property encryptionDetails - Details for how to decrypt the recording.
   * @property subresourceUris - The subresource_uris
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique sid that identifies this account
   * @param sid - Fetch by unique recording Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: RecordingContext;
  /**
   * Access the addOnResults
   */
  addOnResults();
  /**
   * fetch a RecordingInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: RecordingInstance) => any);
  /**
   * remove a RecordingInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: RecordingInstance) => any);
  /**
   * Produce a plain JSON object version of the RecordingInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON();
  /**
   * Access the transcriptions
   */
  transcriptions();
}


declare class RecordingContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.RecordingContext
   * @description Initialize the RecordingContext
   *
   * @property transcriptions - transcriptions resource
   * @property addOnResults - addOnResults resource
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique recording Sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  addOnResults?: Twilio.Api.V2010.AccountContext.RecordingContext.AddOnResultList;
  /**
   * fetch a RecordingInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: RecordingContext) => any);
  /**
   * remove a RecordingInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: RecordingContext) => any);
  transcriptions?: Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionList;
}

export { RecordingContext, RecordingInstance, RecordingList, RecordingListInstance, RecordingPage, RecordingPayload, RecordingResource, RecordingSolution }
