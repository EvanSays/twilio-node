/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import serialize = require('../../../../base/serialize');
import { FeedbackList } from './message/feedback';
import { MediaList } from './message/media';
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the MessageList
 *
 * @param version - Version of the resource
 * @param accountSid - The unique sid that identifies this account
 */
declare function MessageList(version: V2010, accountSid: string): MessageListInstance;

interface MessageResource {
  account_sid: string;
  api_version: string;
  body: string;
  date_created: Date;
  date_sent: Date;
  date_updated: Date;
  direction: MessageDirection;
  error_code: number;
  error_message: string;
  from: string;
  messaging_service_sid: string;
  num_media: string;
  num_segments: string;
  price: number;
  price_unit: string;
  sid: string;
  status: MessageStatus;
  subresource_uris: string;
  to: string;
  uri: string;
}

interface MessagePayload extends MessageResource, Page.TwilioResponsePayload {
}

interface MessageSolution {
  accountSid?: string;
}

interface MessageListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): MessageContext;
  /**
   * create a MessageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: MessageListInstanceCreateOptions, callback?: function);
  /**
   * Streams MessageInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: MessageListInstanceEachOptions, callback?: (item: MessageInstance, done: (err?: Error) => void) => void);
  /**
   * Constructs a message
   *
   * @param sid - Fetch by unique message Sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists MessageInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: MessageListInstanceOptions, callback?: function);
  /**
   * Retrieve a single page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: MessageListInstancePageOptions, callback?: function);
}

/**
 * Options to pass to update
 *
 * @property body - The text of the message you want to send, limited to 1600 characters.
 */
export interface MessageInstanceUpdateOptions {
  body: string;
}

/**
 * Options to pass to update
 *
 * @property body - The text of the message you want to send, limited to 1600 characters.
 */
export interface MessageContextUpdateOptions {
  body: string;
}

/**
 * Options to pass to create
 *
 * @property to - The phone number to receive the message
 * @property statusCallback - URL Twilio will request when the status changes
 * @property applicationSid - The application to use for callbacks
 * @property maxPrice - The total maximum price up to the fourth decimal in US dollars acceptable for the message to be delivered.
 * @property provideFeedback - Set this value to true if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the Message Feedback API.
 * @property validityPeriod - The number of seconds that the message can remain in a Twilio queue.
 * @property maxRate - The max_rate
 * @property forceDelivery - The force_delivery
 * @property providerSid - The provider_sid
 * @property contentRetention - The content_retention
 * @property addressRetention - The address_retention
 * @property smartEncoded - The smart_encoded
 * @property from - The phone number that initiated the message
 * @property messagingServiceSid - The 34 character unique id of the Messaging Service you want to associate with this Message.
 * @property body - The text of the message you want to send, limited to 1600 characters.
 * @property mediaUrl - The URL of the media you wish to send out with the message.
 */
export interface MessageListInstanceCreateOptions {
  addressRetention?: message.address_retention;
  applicationSid?: string;
  body?: string;
  contentRetention?: message.content_retention;
  forceDelivery?: boolean;
  from?: string;
  maxPrice?: number;
  maxRate?: string;
  mediaUrl?: string|list;
  messagingServiceSid?: string;
  provideFeedback?: boolean;
  providerSid?: string;
  smartEncoded?: boolean;
  statusCallback?: string;
  to: string;
  validityPeriod?: number;
}

/**
 * Options to pass to each
 *
 * @property to - Filter by messages to this number
 * @property from - Filter by from number
 * @property dateSentBefore - Filter by date sent
 * @property dateSent - Filter by date sent
 * @property dateSentAfter - Filter by date sent
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 */
export interface MessageListInstanceEachOptions {
  callback?: (item: MessageInstance, done: (err?: Error) => void) => void;
  dateSent?: Date;
  dateSentAfter?: Date;
  dateSentBefore?: Date;
  done?: Function;
  from?: string;
  limit?: number;
  pageSize?: number;
  to?: string;
}

/**
 * Options to pass to list
 *
 * @property to - Filter by messages to this number
 * @property from - Filter by from number
 * @property dateSentBefore - Filter by date sent
 * @property dateSent - Filter by date sent
 * @property dateSentAfter - Filter by date sent
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
export interface MessageListInstanceOptions {
  dateSent?: Date;
  dateSentAfter?: Date;
  dateSentBefore?: Date;
  from?: string;
  limit?: number;
  pageSize?: number;
  to?: string;
}

/**
 * Options to pass to page
 *
 * @property to - Filter by messages to this number
 * @property from - Filter by from number
 * @property dateSentBefore - Filter by date sent
 * @property dateSent - Filter by date sent
 * @property dateSentAfter - Filter by date sent
 * @property pageToken - PageToken provided by the API
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 */
export interface MessageListInstancePageOptions {
  dateSent?: Date;
  dateSentAfter?: Date;
  dateSentBefore?: Date;
  from?: string;
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
  to?: string;
}


declare class MessagePage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.MessagePage
   * @augments Page
   * @description Initialize the MessagePage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: Response<string>, solution: object);

  /**
   * Build an instance of MessageInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class MessageInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.MessageInstance
   * @description Initialize the MessageContext
   *
   * @property accountSid - The unique sid that identifies this account
   * @property apiVersion - The version of the Twilio API used to process the message.
   * @property body - The text body of the message. Up to 1600 characters long.
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property dateSent - The date the message was sent
   * @property direction - The direction of the message
   * @property errorCode - The error code associated with the message
   * @property errorMessage - Human readable description of the ErrorCode
   * @property from - The phone number that initiated the message
   * @property messagingServiceSid - The unique id of the Messaging Service used with the message.
   * @property numMedia - Number of media files associated with the message
   * @property numSegments - Indicates number of messages used to delivery the body
   * @property price - The amount billed for the message
   * @property priceUnit - The currency in which Price is measured
   * @property sid - A string that uniquely identifies this message
   * @property status - The status of this message
   * @property subresourceUris - The URI for any subresources
   * @property to - The phone number that received the message
   * @property uri - The URI for this resource
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique sid that identifies this account
   * @param sid - Fetch by unique message Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: MessageContext;
  /**
   * Access the feedback
   */
  feedback();
  /**
   * fetch a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the media
   */
  media();
  /**
   * remove a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the MessageInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON();
  /**
   * update a MessageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: MessageInstanceUpdateOptions, callback?: function);
}


declare class MessageContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.MessageContext
   * @description Initialize the MessageContext
   *
   * @property media - media resource
   * @property feedback - feedback resource
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique message Sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  feedback?: Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList;
  /**
   * fetch a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  media?: Twilio.Api.V2010.AccountContext.MessageContext.MediaList;
  /**
   * remove a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a MessageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: MessageContextUpdateOptions, callback?: function);
}

export { MessageContext, MessageInstance, MessageList, MessageListInstance, MessagePage, MessagePayload, MessageResource, MessageSolution }
