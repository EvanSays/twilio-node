/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import V2010 = require('../../V2010');
import deserialize = require('../../../../base/deserialize');
import serialize = require('../../../../base/serialize');
import values = require('../../../../base/values');
import { ParticipantList } from './conference/participant';
import { RecordingList } from './conference/recording';


/**
 * Options to pass to update
 *
 * @property status - Specifying completed will end the conference and kick all participants
 * @property announceUrl - The 'AnnounceUrl' attribute lets you specify a URL for announcing something into a conference.
 * @property announceMethod - Specify GET or POST, defaults to POST
 */
export interface UpdateOptions {
  announceMethod?: string;
  announceUrl?: string;
  status?: conference.update_status;
}

/**
 * Options to pass to update
 *
 * @property status - Specifying completed will end the conference and kick all participants
 * @property announceUrl - The 'AnnounceUrl' attribute lets you specify a URL for announcing something into a conference.
 * @property announceMethod - Specify GET or POST, defaults to POST
 */
export interface UpdateOptions {
  announceMethod?: string;
  announceUrl?: string;
  status?: conference.update_status;
}


declare class ConferencePage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferencePage
   * @augments Page
   * @description Initialize the ConferencePage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of ConferenceInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.ConferencePage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}

declare class ConferenceInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @description Initialize the ConferenceContext
   *
   * @property accountSid - The unique sid that identifies this account
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property apiVersion - The api_version
   * @property friendlyName - A human readable description of this resource
   * @property region - A string representing the Twilio Region where the conference was mixed.
   * @property sid - A string that uniquely identifies this conference
   * @property status - The status of the conference
   * @property uri - The URI for this resource
   * @property subresourceUris - The subresource_uris
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique sid that identifies this account
   * @param sid - Fetch by unique conference Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: ConferenceContext;
  /**
   * fetch a ConferenceInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the participants
   *
   * @function participants
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @instance
   */
  participants();
  /**
   * Access the recordings
   *
   * @function recordings
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @instance
   */
  recordings();
  /**
   * Produce a plain JSON object version of the ConferenceInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @instance
   */
  toJSON();
  /**
   * update a ConferenceInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

declare class ConferenceContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext
   * @description Initialize the ConferenceContext
   *
   * @property participants - participants resource
   * @property recordings - recordings resource
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique conference Sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  /**
   * fetch a ConferenceInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  participants?: Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList;
  recordings?: Twilio.Api.V2010.AccountContext.ConferenceContext.RecordingList;
  /**
   * update a ConferenceInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { ConferenceContext, ConferenceInstance, ConferenceList, ConferencePage }
