/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import serialize = require('../../../../base/serialize');
import { ParticipantList } from './conference/participant';
import { RecordingList } from './conference/recording';
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the ConferenceList
 *
 * @param version - Version of the resource
 * @param accountSid - The unique sid that identifies this account
 */
declare function ConferenceList(version: V2010, accountSid: string): ConferenceListInstance;

interface ConferenceResource {
  account_sid: string;
  api_version: string;
  date_created: Date;
  date_updated: Date;
  friendly_name: string;
  region: string;
  sid: string;
  status: ConferenceStatus;
  subresource_uris: string;
  uri: string;
}

interface ConferencePayload extends ConferenceResource, Page.TwilioResponsePayload {
}

interface ConferenceSolution {
  accountSid?: string;
}

interface ConferenceListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): ConferenceContext;
  /**
   * Streams ConferenceInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: ConferenceListInstanceEachOptions, callback?: Function);
  /**
   * Constructs a conference
   *
   * @param sid - Fetch by unique conference Sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of ConferenceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists ConferenceInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: ConferenceListInstanceOptions, callback?: function);
  /**
   * Retrieve a single page of ConferenceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: ConferenceListInstancePageOptions, callback?: function);
}

/**
 * Options to pass to update
 *
 * @property status - Specifying completed will end the conference and kick all participants
 * @property announceUrl - The 'AnnounceUrl' attribute lets you specify a URL for announcing something into a conference.
 * @property announceMethod - Specify GET or POST, defaults to POST
 */
export interface ConferenceInstanceUpdateOptions {
  announceMethod?: string;
  announceUrl?: string;
  status?: conference.update_status;
}

/**
 * Options to pass to update
 *
 * @property status - Specifying completed will end the conference and kick all participants
 * @property announceUrl - The 'AnnounceUrl' attribute lets you specify a URL for announcing something into a conference.
 * @property announceMethod - Specify GET or POST, defaults to POST
 */
export interface ConferenceContextUpdateOptions {
  announceMethod?: string;
  announceUrl?: string;
  status?: conference.update_status;
}

/**
 * Options to pass to each
 *
 * @property dateCreatedBefore - Filter by date created
 * @property dateCreated - Filter by date created
 * @property dateCreatedAfter - Filter by date created
 * @property dateUpdatedBefore - Filter by date updated
 * @property dateUpdated - Filter by date updated
 * @property dateUpdatedAfter - Filter by date updated
 * @property friendlyName - Filter by friendly name
 * @property status - The status of the conference
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 */
export interface ConferenceListInstanceEachOptions {
  callback?: Function;
  dateCreated?: Date;
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  dateUpdated?: Date;
  dateUpdatedAfter?: Date;
  dateUpdatedBefore?: Date;
  done?: Function;
  friendlyName?: string;
  limit?: number;
  pageSize?: number;
  status?: conference.status;
}

/**
 * Options to pass to list
 *
 * @property dateCreatedBefore - Filter by date created
 * @property dateCreated - Filter by date created
 * @property dateCreatedAfter - Filter by date created
 * @property dateUpdatedBefore - Filter by date updated
 * @property dateUpdated - Filter by date updated
 * @property dateUpdatedAfter - Filter by date updated
 * @property friendlyName - Filter by friendly name
 * @property status - The status of the conference
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
export interface ConferenceListInstanceOptions {
  dateCreated?: Date;
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  dateUpdated?: Date;
  dateUpdatedAfter?: Date;
  dateUpdatedBefore?: Date;
  friendlyName?: string;
  limit?: number;
  pageSize?: number;
  status?: conference.status;
}

/**
 * Options to pass to page
 *
 * @property dateCreatedBefore - Filter by date created
 * @property dateCreated - Filter by date created
 * @property dateCreatedAfter - Filter by date created
 * @property dateUpdatedBefore - Filter by date updated
 * @property dateUpdated - Filter by date updated
 * @property dateUpdatedAfter - Filter by date updated
 * @property friendlyName - Filter by friendly name
 * @property status - The status of the conference
 * @property pageToken - PageToken provided by the API
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 */
export interface ConferenceListInstancePageOptions {
  dateCreated?: Date;
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  dateUpdated?: Date;
  dateUpdatedAfter?: Date;
  dateUpdatedBefore?: Date;
  friendlyName?: string;
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
  status?: conference.status;
}


declare class ConferencePage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferencePage
   * @augments Page
   * @description Initialize the ConferencePage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: Response<string>, solution: object);

  /**
   * Build an instance of ConferenceInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class ConferenceInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @description Initialize the ConferenceContext
   *
   * @property accountSid - The unique sid that identifies this account
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property apiVersion - The api_version
   * @property friendlyName - A human readable description of this resource
   * @property region - A string representing the Twilio Region where the conference was mixed.
   * @property sid - A string that uniquely identifies this conference
   * @property status - The status of the conference
   * @property uri - The URI for this resource
   * @property subresourceUris - The subresource_uris
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique sid that identifies this account
   * @param sid - Fetch by unique conference Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: ConferenceContext;
  /**
   * fetch a ConferenceInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the participants
   */
  participants();
  /**
   * Access the recordings
   */
  recordings();
  /**
   * Produce a plain JSON object version of the ConferenceInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON();
  /**
   * update a ConferenceInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: ConferenceInstanceUpdateOptions, callback?: function);
}


declare class ConferenceContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext
   * @description Initialize the ConferenceContext
   *
   * @property participants - participants resource
   * @property recordings - recordings resource
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique conference Sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  /**
   * fetch a ConferenceInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  participants?: Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList;
  recordings?: Twilio.Api.V2010.AccountContext.ConferenceContext.RecordingList;
  /**
   * update a ConferenceInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: ConferenceContextUpdateOptions, callback?: function);
}

export { ConferenceContext, ConferenceInstance, ConferenceList, ConferenceListInstance, ConferencePage, ConferencePayload, ConferenceResource, ConferenceSolution }
