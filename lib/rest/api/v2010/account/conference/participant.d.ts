/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import deserialize = require('../../../../../base/deserialize');
import serialize = require('../../../../../base/serialize');
import values = require('../../../../../base/values');


/**
 * Options to pass to update
 *
 * @property muted - Indicates if the participant should be muted
 * @property hold - Specifying true will hold the participant, while false will un-hold.
 * @property holdUrl - The 'HoldUrl' attribute lets you specify a URL for music that plays when a participant is held.
 * @property holdMethod - Specify GET or POST, defaults to GET
 * @property announceUrl - The 'AnnounceUrl' attribute lets you specify a URL for announcing something to the participant.
 * @property announceMethod - Specify GET or POST, defaults to POST
 */
export interface UpdateOptions {
  announceMethod?: string;
  announceUrl?: string;
  hold?: boolean;
  holdMethod?: string;
  holdUrl?: string;
  muted?: boolean;
}

/**
 * Options to pass to update
 *
 * @property muted - Indicates if the participant should be muted
 * @property hold - Specifying true will hold the participant, while false will un-hold.
 * @property holdUrl - The 'HoldUrl' attribute lets you specify a URL for music that plays when a participant is held.
 * @property holdMethod - Specify GET or POST, defaults to GET
 * @property announceUrl - The 'AnnounceUrl' attribute lets you specify a URL for announcing something to the participant.
 * @property announceMethod - Specify GET or POST, defaults to POST
 */
export interface UpdateOptions {
  announceMethod?: string;
  announceUrl?: string;
  hold?: boolean;
  holdMethod?: string;
  holdUrl?: string;
  muted?: boolean;
}


declare class ParticipantPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage
   * @augments Page
   * @description Initialize the ParticipantPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of ParticipantInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}

declare class ParticipantInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance
   * @description Initialize the ParticipantContext
   *
   * @property accountSid - The unique sid that identifies this account
   * @property callSid - A string that uniquely identifies this call
   * @property conferenceSid - A string that uniquely identifies this conference
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property endConferenceOnExit - Indicates if the endConferenceOnExit was set
   * @property muted - Indicates if the participant is muted
   * @property hold - true if this participant is currently held.
   * @property startConferenceOnEnter - Indicates if the startConferenceOnEnter attribute was set
   * @property status - The status
   * @property uri - The URI for this resource
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique sid that identifies this account
   * @param conferenceSid - A string that uniquely identifies this conference
   * @param callSid - Fetch by unique participant Call SID
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, conferenceSid: sid, callSid: sid);

  _proxy?: ParticipantContext;
  /**
   * fetch a ParticipantInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a ParticipantInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the ParticipantInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance
   * @instance
   */
  toJSON();
  /**
   * update a ParticipantInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

declare class ParticipantContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext
   * @description Initialize the ParticipantContext
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param conferenceSid - The string that uniquely identifies this conference
   * @param callSid - Fetch by unique participant Call SID
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, conferenceSid: sid, callSid: sid);

  /**
   * fetch a ParticipantInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a ParticipantInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a ParticipantInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { ParticipantContext, ParticipantInstance, ParticipantList, ParticipantPage }
