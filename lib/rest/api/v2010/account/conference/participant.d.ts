/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V2010 = require('../../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';
import { SerializableClass } from '../../../../../interfaces';

declare function ParticipantList(version: V2010, accountSid: string, conferenceSid: string): ParticipantListInstance

type ParticipantStatus = 'queued'|'connecting'|'ringing'|'connected'|'complete'|'failed';

interface ParticipantResource {
  /**
   * The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) that created this conference
   */
  account_sid: string;
  /**
   * A 34 character string that uniquely identifies the Participant call that is connected to this conference
   */
  call_sid: string;
  /**
   * A 34 character string that identifies the conference this participant is in
   */
  conference_sid: string;
  /**
   * The date that this resource was created, in [RFC 2822 format](https://tools.ietf.org/html/rfc2822#section-3.3).
   */
  date_created: Date;
  /**
   * The date that this resource was last updated, in [RFC 2822 format](https://tools.ietf.org/html/rfc2822#section-3.3).
   */
  date_updated: Date;
  /**
   * Indicates whether the `endConferenceOnExit` attribute was set on this participant, either `true` or `false`.
   */
  end_conference_on_exit: boolean;
  /**
   * `true` if this participant is currently on hold. `false` otherwise.
   */
  hold: boolean;
  /**
   * `true` if this participant is currently muted. `false` otherwise.
   */
  muted: boolean;
  /**
   * Indicates whether the `startConferenceOnEnter` attribute was set on this participant, either `true` or `false`.
   */
  start_conference_on_enter: boolean;
  /**
   * The status
   */
  status: ParticipantStatus;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`.
   */
  uri: string;
}

interface ParticipantPayload extends ParticipantResource, Page.TwilioResponsePayload {
}

interface ParticipantSolution {
  accountSid: string;
  conferenceSid: string;
}

interface ParticipantListCreateOptions {
  /**
   * Play a notification beep to the conference when this participant joins. Options are `true`, `false`, `onEnter`, or `onExit`. Defaults to `true`.
   */
  beep?: string;
  /**
   * Records the conference that this participant is joining. Options are `true`, `false`, `record-from-start`, and `do-not-record`. Deafults to `false`
   */
  conferenceRecord?: string;
  /**
   * The `absolute URL` Twilio should request when the conference recording is available.
   */
  conferenceRecordingStatusCallback?: string;
  /**
   * The conference_recording_status_callback_event
   */
  conferenceRecordingStatusCallbackEvent?: string[];
  /**
   * The HTTP method Twilio should use when requesting your recording status callback URL, either `GET` or `POST`. Defaults to `POST`.
   */
  conferenceRecordingStatusCallbackMethod?: string;
  /**
   * The absolute URL Twilio should request with conference events specified in `ConferenceStatusCallbackEvent`. This value is set by the first Participant to join the conference, and subsequent callback URLs will be ignored.
   */
  conferenceStatusCallback?: string;
  /**
   * Specifies which conference state changes should generate a webhook to the URL specified in the `ConferenceStatusCallback` attribute. Available values are `start`, `end`, `join`, `leave`, `mute`, `hold`, and `speaker`. To specify multiple values, separate them with a space. Defaults to `start` and `end`.
   */
  conferenceStatusCallbackEvent?: string[];
  /**
   * The HTTP method Twilio should use when requesting the `ConferenceStatusCallback` URL. Either `GET` or `POST`. Defaults to `POST`.
   */
  conferenceStatusCallbackMethod?: string;
  /**
   * Specify whether to trim leading and trailing silence from your recorded conference audio files. Options are `trim-silence` and `do-not-trim`. Defaults to `trim-silence`
   */
  conferenceTrim?: string;
  /**
   * Allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be `true` or `false`. Defaults to `true`.
   */
  earlyMedia?: boolean;
  /**
   * If `true`, will end the conference when this participant leaves. Defaults to `false`.
   */
  endConferenceOnExit?: boolean;
  /**
   * The `from` phone number that will dial the new conference participant. Values may be a phone number or client id.
   */
  from: string;
  /**
   * The maximum number of participants within this agent conference. Values can be positive integers from `2`-`10`. Defaults to `10`.
   */
  maxParticipants?: number;
  /**
   * Specify whether the agent can speak in the conference. Values can be `true` or `false`. Defaults to `false`.
   */
  muted?: boolean;
  /**
   * Records the agent and their conferences, including downtime between conferences. Values may be `true` or `false`. Defaults to `false`.
   */
  record?: boolean;
  /**
   * Set the recording channels for the final agent/conference recording. Either `mono` or `dual`. Defaults to `mono`.
   */
  recordingChannels?: string;
  /**
   * Specifies the `absolute URL` that Twilio should request when the recording is available if the agent and conference are recorded.
   */
  recordingStatusCallback?: string;
  /**
   * The recording_status_callback_event
   */
  recordingStatusCallbackEvent?: string[];
  /**
   * The HTTP method Twilio should use when requesting the `RecordingStatusCallback`. `GET` or `POST`. Defaults to `POST`.
   */
  recordingStatusCallbackMethod?: string;
  /**
   * Specifies the [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where Twilio should mix the recorded audio. Options are `us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, `jp1`.
   */
  region?: string;
  /**
   * SIP password for authentication.
   */
  sipAuthPassword?: string;
  /**
   * SIP username used for authenticating.
   */
  sipAuthUsername?: string;
  /**
   * If the conference has not already begun, `true` will start the conference when this participant joins. Specifying `false` will mute the participant and play background music until the conference begins. Defaults to `true`.
   */
  startConferenceOnEnter?: boolean;
  /**
   * The absolute URL where Twilio should send a webhook with conference event information that you request with the `StatusCallbackEvent` parameter.
   */
  statusCallback?: string;
  /**
   * Specifies which conference state changes should generate a webhook to the `StatusCallback` URL. Options are `initiated`, `ringing`, `answered`, and `completed`. To specify multiple values, separate each with a space. Defaults to `completed`.
   */
  statusCallbackEvent?: string[];
  /**
   * The method Twilio should use when requesting your `StatusCallback` URL. Options are `GET` and `POST`. Defaults to `POST`.
   */
  statusCallbackMethod?: string;
  /**
   * The number of seconds (integer) that Twilio should allow the phone to ring before assuming there is no answer. Defaults to 60 seconds. Minimum allowed timeout is `5`, max is `600`. Twilio always adds a 5-second timeout buffer to outgoing calls, so if you enter a timeout value of 10 seconds, you will see an actual timeout closer to 15 seconds.
   */
  timeout?: number;
  /**
   * The phone number, client id, or sip address you are inviting to this conference.
   */
  to: string;
  /**
   * Specify which method, `GET` or `POST`, Twilio should use to request the `WaitUrl` for this conference. Be sure to use `GET` if you are directly requesting static audio files so that Twilio properly caches the files. Defaults to `POST`.
   */
  waitMethod?: string;
  /**
   * Specify an absolute URL that hosts music to play before the  conference starts. Defualts to Twilio's standard [hold music](https://www.twilio.com/labs/twimlets/holdmusic).
   */
  waitUrl?: string;
}

interface ParticipantListEachOptions extends ListEachOptions<ParticipantInstance> {
  /**
   * Only return participants that are on hold or not on hold. Either `true` or `false`.
   */
  hold?: boolean;
  /**
   * Only return participants that are muted or unmuted. Either `true` or `false`.
   */
  muted?: boolean;
}

interface ParticipantListOptions extends ListOptions<ParticipantInstance> {
  /**
   * Only return participants that are on hold or not on hold. Either `true` or `false`.
   */
  hold?: boolean;
  /**
   * Only return participants that are muted or unmuted. Either `true` or `false`.
   */
  muted?: boolean;
}

interface ParticipantListPageOptions extends PageOptions<ParticipantPage> {
  /**
   * Only return participants that are on hold or not on hold. Either `true` or `false`.
   */
  hold?: boolean;
  /**
   * Only return participants that are muted or unmuted. Either `true` or `false`.
   */
  muted?: boolean;
}

interface ParticipantListInstance {
  /**
   * Gets context of a single Participant resource
   *
   * @param callSid - Fetch by unique participant Call SID
   */
  (callSid: string): ParticipantContext;
  /**
   * create a ParticipantInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  create(opts: ParticipantListCreateOptions): Promise<ParticipantInstance>;
  /**
   * create a ParticipantInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: ParticipantListCreateOptions, callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * Streams ParticipantInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: ParticipantListEachOptions): void;
  /**
   * Streams ParticipantInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: ParticipantInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Participant resource
   *
   * @param callSid - Fetch by unique participant Call SID
   */
  get(callSid: string): ParticipantContext;
  /**
   * Retrieve a single target page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<ParticipantPage>;
  /**
   * Retrieve a single target page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: ParticipantPage) => any): void;
  /**
   * Lists ParticipantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: ParticipantListOptions): Promise<ParticipantInstance[]>;
  /**
   * Lists ParticipantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: ParticipantListOptions, callback: (error: Error | null, items: ParticipantInstance[]) => any): void;
  /**
   * Lists ParticipantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: ParticipantInstance[]) => any): void;
  /**
   * Retrieve a single page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: ParticipantListPageOptions): Promise<ParticipantPage>;
  /**
   * Retrieve a single page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: ParticipantListPageOptions, callback: (error: Error | null, items: ParticipantPage) => any): void;
  /**
   * Retrieve a single page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: ParticipantPage) => any): void;
}

interface ParticipantListFetchOptions {
  /**
   * Specify the HTTP method Twilio should use to request your `AnnounceUrl`, either `GET` or `POST`. Defaults to `POST`.
   */
  announceMethod?: string;
  /**
   * The 'AnnounceUrl' attribute lets you specify a URL for announcing something to the participant. The URL may return an MP3, a WAV or a TwiML document with `<Play>` or `<Say>`.
   */
  announceUrl?: string;
  /**
   * Specifying `true` will hold the participant, while `false` will remove them from hold.
   */
  hold?: boolean;
  /**
   * Specify the HTTP method Twilio should use to request your `HoldUrl`, either `GET` or `POST`. Defaults to `GET`.
   */
  holdMethod?: string;
  /**
   * The 'HoldUrl' attribute lets you specify a URL for music that plays when a participant is on hold. The URL may be an MP3, a WAV or a TwiML document that uses `<Play>`, `<Say>` or `<Redirect>`.
   */
  holdUrl?: string;
  /**
   * Specifying `true` will mute the participant, while `false` will un-mute. Anything other than `true` or `false` is interpreted as `false`.
   */
  muted?: boolean;
}

interface ParticipantListFetchOptions {
  /**
   * Specify the HTTP method Twilio should use to request your `AnnounceUrl`, either `GET` or `POST`. Defaults to `POST`.
   */
  announceMethod?: string;
  /**
   * The 'AnnounceUrl' attribute lets you specify a URL for announcing something to the participant. The URL may return an MP3, a WAV or a TwiML document with `<Play>` or `<Say>`.
   */
  announceUrl?: string;
  /**
   * Specifying `true` will hold the participant, while `false` will remove them from hold.
   */
  hold?: boolean;
  /**
   * Specify the HTTP method Twilio should use to request your `HoldUrl`, either `GET` or `POST`. Defaults to `GET`.
   */
  holdMethod?: string;
  /**
   * The 'HoldUrl' attribute lets you specify a URL for music that plays when a participant is on hold. The URL may be an MP3, a WAV or a TwiML document that uses `<Play>`, `<Say>` or `<Redirect>`.
   */
  holdUrl?: string;
  /**
   * Specifying `true` will mute the participant, while `false` will un-mute. Anything other than `true` or `false` is interpreted as `false`.
   */
  muted?: boolean;
}

declare class ParticipantPage extends Page<V2010, ParticipantPayload, ParticipantResource, ParticipantInstance> {
  constructor(version: V2010, response: Response<string>, solution: ParticipantSolution);

  /**
   * Build an instance of ParticipantInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ParticipantPayload): ParticipantInstance;
}

declare class ParticipantInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param conferenceSid - The string that uniquely identifies this conference
   * @param callSid - Fetch by unique participant Call SID
   */
  constructor(version: V2010, payload: ParticipantPayload, accountSid: string, conferenceSid: string, callSid: string);

  private _proxy: ParticipantContext;
  /**
   * The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) that created this conference
   */
  accountSid: string;
  /**
   * A 34 character string that uniquely identifies the Participant call that is connected to this conference
   */
  callSid: string;
  /**
   * A 34 character string that identifies the conference this participant is in
   */
  conferenceSid: string;
  /**
   * The date that this resource was created, in [RFC 2822 format](https://tools.ietf.org/html/rfc2822#section-3.3).
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated, in [RFC 2822 format](https://tools.ietf.org/html/rfc2822#section-3.3).
   */
  dateUpdated: Date;
  /**
   * Indicates whether the `endConferenceOnExit` attribute was set on this participant, either `true` or `false`.
   */
  endConferenceOnExit: boolean;
  /**
   * fetch a ParticipantInstance
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  fetch(): Promise<ParticipantInstance>;
  /**
   * fetch a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * `true` if this participant is currently on hold. `false` otherwise.
   */
  hold: boolean;
  /**
   * `true` if this participant is currently muted. `false` otherwise.
   */
  muted: boolean;
  /**
   * remove a ParticipantInstance
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  remove(): Promise<ParticipantInstance>;
  /**
   * remove a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * Indicates whether the `startConferenceOnEnter` attribute was set on this participant, either `true` or `false`.
   */
  startConferenceOnEnter: boolean;
  /**
   * The status
   */
  status: ParticipantStatus;
  /**
   * update a ParticipantInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  update(opts?: ParticipantListFetchOptions): Promise<ParticipantInstance>;
  /**
   * update a ParticipantInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ParticipantListFetchOptions, callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * update a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`.
   */
  uri: string;
}

declare class ParticipantContext {
  constructor(version: V2010, accountSid: string, conferenceSid: string, callSid: string);

  /**
   * fetch a ParticipantInstance
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  fetch(): Promise<ParticipantInstance>;
  /**
   * fetch a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * remove a ParticipantInstance
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  remove(): Promise<ParticipantInstance>;
  /**
   * remove a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * update a ParticipantInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  update(opts?: ParticipantListFetchOptions): Promise<ParticipantInstance>;
  /**
   * update a ParticipantInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ParticipantListFetchOptions, callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * update a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ParticipantInstance) => any): void;
}

export { ParticipantContext, ParticipantInstance, ParticipantList, ParticipantListCreateOptions, ParticipantListEachOptions, ParticipantListFetchOptions, ParticipantListInstance, ParticipantListOptions, ParticipantListPageOptions, ParticipantPage, ParticipantPayload, ParticipantResource, ParticipantSolution, ParticipantStatus }
