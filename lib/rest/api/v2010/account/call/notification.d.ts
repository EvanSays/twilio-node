/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import V2010 = require('../../../V2010');
import deserialize = require('../../../../../base/deserialize');
import serialize = require('../../../../../base/serialize');
import values = require('../../../../../base/values');

/**
 * @description Initialize the NotificationList
 *
 * @param version - Version of the resource
 * @param accountSid - The account_sid
 * @param callSid - The call_sid
 */
declare function NotificationList(version: V2010, accountSid: string, callSid: string): NotificationListInstance;


declare class NotificationPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationPage
   * @augments Page
   * @description Initialize the NotificationPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of NotificationInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class NotificationInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance
   * @description Initialize the NotificationContext
   *
   * @property accountSid - The account_sid
   * @property apiVersion - The api_version
   * @property callSid - The call_sid
   * @property dateCreated - The date_created
   * @property dateUpdated - The date_updated
   * @property errorCode - The error_code
   * @property log - The log
   * @property messageDate - The message_date
   * @property messageText - The message_text
   * @property moreInfo - The more_info
   * @property requestMethod - The request_method
   * @property requestUrl - The request_url
   * @property requestVariables - The request_variables
   * @property responseBody - The response_body
   * @property responseHeaders - The response_headers
   * @property sid - The sid
   * @property uri - The uri
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param callSid - The call_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, callSid: sid, sid: sid);

  _proxy?: NotificationContext;
  /**
   * fetch a NotificationInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a NotificationInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the NotificationInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance
   * @instance
   */
  toJSON();
}


declare class NotificationContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationContext
   * @description Initialize the NotificationContext
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param callSid - The call_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, callSid: sid, sid: sid);

  /**
   * fetch a NotificationInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a NotificationInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { NotificationContext, NotificationInstance, NotificationList, NotificationPage }
