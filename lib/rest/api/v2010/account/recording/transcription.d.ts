/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V2010 = require('../../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';
import { SerializableClass } from '../../../../../interfaces';

/**
 * @description Initialize the TranscriptionList
 *
 * @param version - Version of the resource
 * @param accountSid - The account_sid
 * @param recordingSid - The recording_sid
 */
declare function TranscriptionList(version: V2010, accountSid: string, recordingSid: string): TranscriptionListInstance;

interface TranscriptionResource {
  account_sid: string;
  api_version: string;
  date_created: Date;
  date_updated: Date;
  duration: string;
  price: number;
  price_unit: string;
  recording_sid: string;
  sid: string;
  status: TranscriptionStatus;
  transcription_text: string;
  type: string;
  uri: string;
}

interface TranscriptionPayload extends TranscriptionResource, Page.TwilioResponsePayload {
}

interface TranscriptionSolution {
  accountSid?: string;
  recordingSid?: string;
}

interface TranscriptionListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): TranscriptionContext;
  /**
   * Streams TranscriptionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionList
   * @instance
   *
   * @param opts - ...
   * @param callback - Function to process each record
   */
  each(opts?: object, callback?: Function);
  /**
   * Constructs a transcription
   *
   * @function get
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionList
   * @instance
   *
   * @param sid - The sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of TranscriptionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionList
   * @instance
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists TranscriptionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  list(opts?: object, callback?: function);
  /**
   * Retrieve a single page of TranscriptionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  page(opts?: object, callback?: function);
}


declare class TranscriptionPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionPage
   * @augments Page
   * @description Initialize the TranscriptionPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: Response<string>, solution: object);

  /**
   * Build an instance of TranscriptionInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class TranscriptionInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionInstance
   * @description Initialize the TranscriptionContext
   *
   * @property accountSid - The account_sid
   * @property apiVersion - The api_version
   * @property dateCreated - The date_created
   * @property dateUpdated - The date_updated
   * @property duration - The duration
   * @property price - The price
   * @property priceUnit - The price_unit
   * @property recordingSid - The recording_sid
   * @property sid - The sid
   * @property status - The status
   * @property transcriptionText - The transcription_text
   * @property type - The type
   * @property uri - The uri
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param recordingSid - The recording_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, recordingSid: sid, sid: sid);

  _proxy?: TranscriptionContext;
  /**
   * fetch a TranscriptionInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a TranscriptionInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the TranscriptionInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionInstance
   * @instance
   */
  toJSON();
}


declare class TranscriptionContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionContext
   * @description Initialize the TranscriptionContext
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param recordingSid - The recording_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, recordingSid: sid, sid: sid);

  /**
   * fetch a TranscriptionInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a TranscriptionInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { TranscriptionContext, TranscriptionInstance, TranscriptionList, TranscriptionListInstance, TranscriptionPage, TranscriptionPayload, TranscriptionResource, TranscriptionSolution }
