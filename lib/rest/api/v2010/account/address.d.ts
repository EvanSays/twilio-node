/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import { DependentPhoneNumberListInstance } from './address/dependentPhoneNumber';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';

declare function AddressList(version: V2010, accountSid: string): AddressListInstance

interface AddressResource {
  /**
   * The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this address.
   */
  account_sid: string;
  /**
   * The city in which you or your customer is located.
   */
  city: string;
  /**
   * Your name or business name, or that of your customer.
   */
  customer_name: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * This is a value that indicates if emergency calling has been enabled on this number. Possible values are `true` or `false`.
   */
  emergency_enabled: boolean;
  /**
   * A human-readable description of the address. Maximum 64 characters.
   */
  friendly_name: string;
  /**
   * The ISO country code of your or your customer's address.
   */
  iso_country: string;
  /**
   * The postal code in which you or your customer is located.
   */
  postal_code: string;
  /**
   * The state or region in which you or your customer is located.
   */
  region: string;
  /**
   * A 34 character string that uniquely identifies this address.
   */
  sid: string;
  /**
   * The number and street address where you or your customer is located.
   */
  street: string;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`.
   */
  uri: string;
  /**
   * In some countries, addresses are validated to comply with local regulation. In those countries, if the address you provide does not pass validation, it will not be accepted as an Address. This value will be `true` if the Address has been validated, or `false` for countries that don't require validation or if the Address is non-compliant.
   */
  validated: boolean;
}

interface AddressPayload extends AddressResource, Page.TwilioResponsePayload {
}

interface AddressSolution {
  accountSid: string;
}

interface AddressListCreateOptions {
  /**
   * If you don't set a value for this parameter, or if you set it to `true`, then the system will, if necessary, auto-correct the address you provide. If you don't want the system to auto-correct the address, you will explicitly need to set this value to `false`.
   */
  autoCorrectAddress?: boolean;
  /**
   * The city in which you or your customer is located.
   */
  city: string;
  /**
   * Your name or business name, or that of your customer.
   */
  customerName: string;
  /**
   * The emergency_enabled
   */
  emergencyEnabled?: boolean;
  /**
   * A human-readable description of the new address. Maximum 64 characters.
   */
  friendlyName?: string;
  /**
   * The ISO country code of your or your customer's address.
   */
  isoCountry: string;
  /**
   * The postal code in which you or your customer is located.
   */
  postalCode: string;
  /**
   * The state or region in which you or your customer is located.
   */
  region: string;
  /**
   * The number and street address where you or your customer is located.
   */
  street: string;
}

interface AddressListEachOptions extends ListEachOptions<AddressInstance> {
  /**
   * Only return the Address resources with customer names that exactly match this name.
   */
  customerName?: string;
  /**
   * Only return the Address resources with friendly names that exactly match this name.
   */
  friendlyName?: string;
  /**
   * Only return the Address resources in this country.
   */
  isoCountry?: string;
}

interface AddressListOptions extends ListOptions<AddressInstance> {
  /**
   * Only return the Address resources with customer names that exactly match this name.
   */
  customerName?: string;
  /**
   * Only return the Address resources with friendly names that exactly match this name.
   */
  friendlyName?: string;
  /**
   * Only return the Address resources in this country.
   */
  isoCountry?: string;
}

interface AddressListPageOptions extends PageOptions<AddressPage> {
  /**
   * Only return the Address resources with customer names that exactly match this name.
   */
  customerName?: string;
  /**
   * Only return the Address resources with friendly names that exactly match this name.
   */
  friendlyName?: string;
  /**
   * Only return the Address resources in this country.
   */
  isoCountry?: string;
}

interface AddressListInstance {
  /**
   * Gets context of a single Address resource
   *
   * @param sid - The sid
   */
  (sid: string): AddressContext;
  /**
   * create a AddressInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  create(opts: AddressListCreateOptions): Promise<AddressInstance>;
  /**
   * create a AddressInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: AddressListCreateOptions, callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * Streams AddressInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: AddressListEachOptions): void;
  /**
   * Streams AddressInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: AddressInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Address resource
   *
   * @param sid - The sid
   */
  get(sid: string): AddressContext;
  /**
   * Retrieve a single target page of AddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<AddressPage>;
  /**
   * Retrieve a single target page of AddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: AddressPage) => any): void;
  /**
   * Lists AddressInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: AddressListOptions): Promise<AddressInstance[]>;
  /**
   * Lists AddressInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: AddressListOptions, callback: (error: Error | null, items: AddressInstance[]) => any): void;
  /**
   * Lists AddressInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: AddressInstance[]) => any): void;
  /**
   * Retrieve a single page of AddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: AddressListPageOptions): Promise<AddressPage>;
  /**
   * Retrieve a single page of AddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: AddressListPageOptions, callback: (error: Error | null, items: AddressPage) => any): void;
  /**
   * Retrieve a single page of AddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: AddressPage) => any): void;
}

interface AddressListFetchOptions {
  /**
   * If you don't set a value for this parameter, or if you set it to `true`, then the system will, if necessary, auto-correct the address you provide. If you don't want the system to auto-correct the address, you will explicitly need to set this value to `false`.
   */
  autoCorrectAddress?: boolean;
  /**
   * The city in which you or your customer is located.
   */
  city?: string;
  /**
   * Your name or business name, or that of your customer.
   */
  customerName?: string;
  /**
   * The emergency_enabled
   */
  emergencyEnabled?: boolean;
  /**
   * A human-readable description of the address. Maximum 64 characters.
   */
  friendlyName?: string;
  /**
   * The postal code in which you or your customer is located.
   */
  postalCode?: string;
  /**
   * The state or region in which you or your customer is located.
   */
  region?: string;
  /**
   * The number and street address where you or your customer is located.
   */
  street?: string;
}

interface AddressListFetchOptions {
  /**
   * If you don't set a value for this parameter, or if you set it to `true`, then the system will, if necessary, auto-correct the address you provide. If you don't want the system to auto-correct the address, you will explicitly need to set this value to `false`.
   */
  autoCorrectAddress?: boolean;
  /**
   * The city in which you or your customer is located.
   */
  city?: string;
  /**
   * Your name or business name, or that of your customer.
   */
  customerName?: string;
  /**
   * The emergency_enabled
   */
  emergencyEnabled?: boolean;
  /**
   * A human-readable description of the address. Maximum 64 characters.
   */
  friendlyName?: string;
  /**
   * The postal code in which you or your customer is located.
   */
  postalCode?: string;
  /**
   * The state or region in which you or your customer is located.
   */
  region?: string;
  /**
   * The number and street address where you or your customer is located.
   */
  street?: string;
}

declare class AddressPage extends Page<V2010, AddressPayload, AddressResource, AddressInstance> {
  constructor(version: V2010, response: Response<string>, solution: AddressSolution);

  /**
   * Build an instance of AddressInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AddressPayload): AddressInstance;
}

declare class AddressInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param sid - The sid
   */
  constructor(version: V2010, payload: AddressPayload, accountSid: string, sid: string);

  private _proxy: AddressContext;
  /**
   * The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this address.
   */
  accountSid: string;
  /**
   * The city in which you or your customer is located.
   */
  city: string;
  /**
   * Your name or business name, or that of your customer.
   */
  customerName: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  dependentPhoneNumbers(): DependentPhoneNumberListInstance;
  /**
   * This is a value that indicates if emergency calling has been enabled on this number. Possible values are `true` or `false`.
   */
  emergencyEnabled: boolean;
  /**
   * fetch a AddressInstance
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  fetch(): Promise<AddressInstance>;
  /**
   * fetch a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * A human-readable description of the address. Maximum 64 characters.
   */
  friendlyName: string;
  /**
   * The ISO country code of your or your customer's address.
   */
  isoCountry: string;
  /**
   * The postal code in which you or your customer is located.
   */
  postalCode: string;
  /**
   * The state or region in which you or your customer is located.
   */
  region: string;
  /**
   * remove a AddressInstance
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  remove(): Promise<AddressInstance>;
  /**
   * remove a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * A 34 character string that uniquely identifies this address.
   */
  sid: string;
  /**
   * The number and street address where you or your customer is located.
   */
  street: string;
  /**
   * update a AddressInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  update(opts?: AddressListFetchOptions): Promise<AddressInstance>;
  /**
   * update a AddressInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: AddressListFetchOptions, callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * update a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`.
   */
  uri: string;
  /**
   * In some countries, addresses are validated to comply with local regulation. In those countries, if the address you provide does not pass validation, it will not be accepted as an Address. This value will be `true` if the Address has been validated, or `false` for countries that don't require validation or if the Address is non-compliant.
   */
  validated: boolean;
}

declare class AddressContext {
  constructor(version: V2010, accountSid: string, sid: string);

  dependentPhoneNumbers: DependentPhoneNumberListInstance;
  /**
   * fetch a AddressInstance
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  fetch(): Promise<AddressInstance>;
  /**
   * fetch a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * remove a AddressInstance
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  remove(): Promise<AddressInstance>;
  /**
   * remove a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * update a AddressInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  update(opts?: AddressListFetchOptions): Promise<AddressInstance>;
  /**
   * update a AddressInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: AddressListFetchOptions, callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * update a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: AddressInstance) => any): void;
}

export { AddressContext, AddressInstance, AddressList, AddressListCreateOptions, AddressListEachOptions, AddressListFetchOptions, AddressListInstance, AddressListOptions, AddressListPageOptions, AddressPage, AddressPayload, AddressResource, AddressSolution }
