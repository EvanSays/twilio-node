/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import V2010 = require('../../../V2010');
import deserialize = require('../../../../../base/deserialize');
import serialize = require('../../../../../base/serialize');
import values = require('../../../../../base/values');

/**
 * @constructor Twilio.Api.V2010.AccountContext.MessageContext.MediaList
 * @description Initialize the MediaList
 *
 * @param version - Version of the resource
 * @param accountSid - The unique sid that identifies this account
 * @param messageSid - A string that uniquely identifies this message
 */
declare function MediaList(version: V2010, accountSid: string, messageSid: string): MediaListInstance;


declare class MediaPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.MessageContext.MediaPage
   * @augments Page
   * @description Initialize the MediaPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of MediaInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.MessageContext.MediaPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class MediaInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.MessageContext.MediaInstance
   * @description Initialize the MediaContext
   *
   * @property accountSid - The unique sid that identifies this account
   * @property contentType - The default mime-type of the media
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property parentSid - The unique id of the resource that created the media.
   * @property sid - A string that uniquely identifies this media
   * @property uri - The URI for this resource
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique sid that identifies this account
   * @param messageSid - A string that uniquely identifies this message
   * @param sid - Fetch by unique media Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, messageSid: sid, sid: sid);

  _proxy?: MediaContext;
  /**
   * fetch a MediaInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.MessageContext.MediaInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a MediaInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.MessageContext.MediaInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the MediaInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.MessageContext.MediaInstance
   * @instance
   */
  toJSON();
}


declare class MediaContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.MessageContext.MediaContext
   * @description Initialize the MediaContext
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param messageSid - The message_sid
   * @param sid - Fetch by unique media Sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, messageSid: sid, sid: sid);

  /**
   * fetch a MediaInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.MessageContext.MediaContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a MediaInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.MessageContext.MediaContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { MediaContext, MediaInstance, MediaList, MediaPage }
