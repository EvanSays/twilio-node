/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import serialize = require('../../../base/serialize');
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';
import { SerializableClass } from '../../../interfaces';

/**
 * @description Initialize the AlertList
 *
 * @param version - Version of the resource
 */
declare function AlertList(version: V1): AlertListInstance;

interface AlertResource {
  account_sid: string;
  alert_text: string;
  api_version: string;
  date_created: Date;
  date_generated: Date;
  date_updated: Date;
  error_code: string;
  log_level: string;
  more_info: string;
  request_method: string;
  request_url: string;
  request_variables?: string;
  resource_sid: string;
  response_body?: string;
  response_headers?: string;
  sid: string;
  url: string;
}

interface AlertPayload extends AlertResource, Page.TwilioResponsePayload {
}

interface AlertSolution {
}

interface AlertListInstance {
  /**
   * @param sid - sid of instance
   */
  AlertListInstance(sid: string);
  /**
   * Streams AlertInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Monitor.V1.AlertList
   * @instance
   *
   * @param opts - ...
   * @param callback - Function to process each record
   */
  each(opts?: object, callback?: Function);
  /**
   * Constructs a alert
   *
   * @function get
   * @memberof Twilio.Monitor.V1.AlertList
   * @instance
   *
   * @param sid - The sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of AlertInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Monitor.V1.AlertList
   * @instance
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists AlertInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Monitor.V1.AlertList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  list(opts?: object, callback?: function);
  /**
   * Retrieve a single page of AlertInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Monitor.V1.AlertList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  page(opts?: object, callback?: function);
}


declare class AlertPage extends Page {
  /**
   * @constructor Twilio.Monitor.V1.AlertPage
   * @augments Page
   * @description Initialize the AlertPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Monitor.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of AlertInstance
   *
   * @function getInstance
   * @memberof Twilio.Monitor.V1.AlertPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class AlertInstance {
  /**
   * @constructor Twilio.Monitor.V1.AlertInstance
   * @description Initialize the AlertContext
   *
   * @property accountSid - The unique id of the Account responsible for this alert.
   * @property alertText - The text of the alert.
   * @property apiVersion - The version of the Twilio API in use when this alert was generated.
   * @property dateCreated - The date that this resource was created, given in ISO 8601 format.
   * @property dateGenerated - The date the alert was actually generated, given in ISO 8601 format.
   * @property dateUpdated - The most recent date that this resource was updated, given in ISO 8601 format.
   * @property errorCode - A unique error code for the error condition.
   * @property logLevel - A string representing the log level.
   * @property moreInfo - A URL for more information about the error condition.
   * @property requestMethod - If the Alert was generated by a request Twilio made to your server, this will be the request method used when Twilio made the request to your server.
   * @property requestUrl - If the Alert was generated by a request Twilio made to your server, this will be the URL on your server that generated the alert.
   * @property requestVariables - The request_variables
   * @property resourceSid - The unique ID of the resource for which the Alert was generated.
   * @property responseBody - The response_body
   * @property responseHeaders - The response_headers
   * @property sid - A 34 character string that uniquely identifies this Alert.
   * @property url - The absolute URL for this resource.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: Twilio.Monitor.V1, payload: object, sid: sid);

  _proxy?: AlertContext;
  /**
   * fetch a AlertInstance
   *
   * @function fetch
   * @memberof Twilio.Monitor.V1.AlertInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a AlertInstance
   *
   * @function remove
   * @memberof Twilio.Monitor.V1.AlertInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the AlertInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Monitor.V1.AlertInstance
   * @instance
   */
  toJSON();
}


declare class AlertContext {
  /**
   * @constructor Twilio.Monitor.V1.AlertContext
   * @description Initialize the AlertContext
   *
   * @param version - Version of the resource
   * @param sid - The sid
   */
  constructor(version: Twilio.Monitor.V1, sid: sid);

  /**
   * fetch a AlertInstance
   *
   * @function fetch
   * @memberof Twilio.Monitor.V1.AlertContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a AlertInstance
   *
   * @function remove
   * @memberof Twilio.Monitor.V1.AlertContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { AlertContext, AlertInstance, AlertList, AlertListInstance, AlertPage, AlertPayload, AlertResource, AlertSolution }
