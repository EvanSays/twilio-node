/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import V1 = require('../V1');
import deserialize = require('../../../base/deserialize');
import serialize = require('../../../base/serialize');
import values = require('../../../base/values');



declare class AlertPage extends Page {
  /**
   * @constructor Twilio.Monitor.V1.AlertPage
   * @augments Page
   * @description Initialize the AlertPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Monitor.V1, response: object, solution: object);

  /**
   * Build an instance of AlertInstance
   *
   * @function getInstance
   * @memberof Twilio.Monitor.V1.AlertPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}

declare class AlertInstance {
  /**
   * @constructor Twilio.Monitor.V1.AlertInstance
   * @description Initialize the AlertContext
   *
   * @property accountSid - The unique id of the Account responsible for this alert.
   * @property alertText - The text of the alert.
   * @property apiVersion - The version of the Twilio API in use when this alert was generated.
   * @property dateCreated - The date that this resource was created, given in ISO 8601 format.
   * @property dateGenerated - The date the alert was actually generated, given in ISO 8601 format.
   * @property dateUpdated - The most recent date that this resource was updated, given in ISO 8601 format.
   * @property errorCode - A unique error code for the error condition.
   * @property logLevel - A string representing the log level.
   * @property moreInfo - A URL for more information about the error condition.
   * @property requestMethod - If the Alert was generated by a request Twilio made to your server, this will be the request method used when Twilio made the request to your server.
   * @property requestUrl - If the Alert was generated by a request Twilio made to your server, this will be the URL on your server that generated the alert.
   * @property requestVariables - The request_variables
   * @property resourceSid - The unique ID of the resource for which the Alert was generated.
   * @property responseBody - The response_body
   * @property responseHeaders - The response_headers
   * @property sid - A 34 character string that uniquely identifies this Alert.
   * @property url - The absolute URL for this resource.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: Twilio.Monitor.V1, payload: object, sid: sid);

  _proxy?: AlertContext;
  /**
   * fetch a AlertInstance
   *
   * @function fetch
   * @memberof Twilio.Monitor.V1.AlertInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a AlertInstance
   *
   * @function remove
   * @memberof Twilio.Monitor.V1.AlertInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the AlertInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Monitor.V1.AlertInstance
   * @instance
   */
  toJSON();
}

declare class AlertContext {
  /**
   * @constructor Twilio.Monitor.V1.AlertContext
   * @description Initialize the AlertContext
   *
   * @param version - Version of the resource
   * @param sid - The sid
   */
  constructor(version: Twilio.Monitor.V1, sid: sid);

  /**
   * fetch a AlertInstance
   *
   * @function fetch
   * @memberof Twilio.Monitor.V1.AlertContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a AlertInstance
   *
   * @function remove
   * @memberof Twilio.Monitor.V1.AlertContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { AlertContext, AlertInstance, AlertList, AlertPage }
