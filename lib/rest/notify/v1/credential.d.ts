/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';
import { SerializableClass } from '../../../interfaces';

declare function CredentialList(version: V1): CredentialListInstance

type CredentialPushService = 'gcm'|'apn'|'fcm';

interface CredentialResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * Friendly name for stored credential
   */
  friendly_name: string;
  /**
   * [APN only] use this credential for sending to production or sandbox APNs (string `true` or `false`)
   */
  sandbox: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * Credential type, one of "gcm", "fcm", or "apn"
   */
  type: CredentialPushService;
  /**
   * The url
   */
  url: string;
}

interface CredentialPayload extends CredentialResource, Page.TwilioResponsePayload {
}

interface CredentialSolution {
}

interface CredentialListEachOptions extends ListEachOptions<CredentialInstance> {
}

interface CredentialListOptions extends ListOptions<CredentialInstance> {
}

interface CredentialListPageOptions extends PageOptions<CredentialPage> {
}

interface CredentialListCreateOptions {
  /**
   * [GCM only] This is the "Server key" of your project from Firebase console under Settings / Cloud messaging. Yes, you can use the server key from the Firebase console for GCM.
   */
  apiKey?: string;
  /**
   * [APN only] URL encoded representation of the certificate. Strip everything outside of the headers, e.g. `-----BEGIN CERTIFICATE-----MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A==-----END CERTIFICATE-----`
   */
  certificate?: string;
  /**
   * Friendly name for stored credential
   */
  friendlyName?: string;
  /**
   * [APN only] URL encoded representation of the private key. Strip everything outside of the headers, e.g. `-----BEGIN RSA PRIVATE KEY-----MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR\n.-----END RSA PRIVATE KEY-----`
   */
  privateKey?: string;
  /**
   * [APN only] use this credential for sending to production or sandbox APNs (string `true` or `false`)
   */
  sandbox?: boolean;
  /**
   * [FCM only] This is the "Server key" of your project from Firebase console under Settings / Cloud messaging.
   */
  secret?: string;
  /**
   * Credential type, one of "gcm", "fcm", or "apn"
   */
  type: CredentialPushService;
}

interface CredentialListInstance {
  /**
   * Gets context of a single Credential resource
   *
   * @param sid - The sid
   */
  (sid: string): CredentialContext;
  /**
   * create a CredentialInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CredentialInstance
   */
  create(opts: CredentialListCreateOptions): Promise<CredentialInstance>;
  /**
   * create a CredentialInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: CredentialListCreateOptions, callback: (error: Error | null, items: CredentialInstance) => any): void;
  /**
   * Streams CredentialInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: CredentialListEachOptions): void;
  /**
   * Streams CredentialInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: CredentialInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Credential resource
   *
   * @param sid - The sid
   */
  get(sid: string): CredentialContext;
  /**
   * Retrieve a single target page of CredentialInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<CredentialPage>;
  /**
   * Retrieve a single target page of CredentialInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: CredentialPage) => any): void;
  /**
   * Lists CredentialInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: CredentialListOptions): Promise<CredentialInstance[]>;
  /**
   * Lists CredentialInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: CredentialListOptions, callback: (error: Error | null, items: CredentialInstance[]) => any): void;
  /**
   * Lists CredentialInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: CredentialInstance[]) => any): void;
  /**
   * Retrieve a single page of CredentialInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: CredentialListPageOptions): Promise<CredentialPage>;
  /**
   * Retrieve a single page of CredentialInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: CredentialListPageOptions, callback: (error: Error | null, items: CredentialPage) => any): void;
  /**
   * Retrieve a single page of CredentialInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: CredentialPage) => any): void;
}

interface CredentialListFetchOptions {
  /**
   * [GCM only] This is the "Server key" of your project from Firebase console under Settings / Cloud messaging. Yes, you can use the server key from the Firebase console for GCM.
   */
  apiKey?: string;
  /**
   * [APN only] URL encoded representation of the certificate. Strip everything outside of the headers, e.g. `-----BEGIN CERTIFICATE-----MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A==-----END CERTIFICATE-----`
   */
  certificate?: string;
  /**
   * Friendly name for stored credential
   */
  friendlyName?: string;
  /**
   * [APN only] URL encoded representation of the private key. Strip everything outside of the headers, e.g. `-----BEGIN RSA PRIVATE KEY-----MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR\n.-----END RSA PRIVATE KEY-----`
   */
  privateKey?: string;
  /**
   * [APN only] use this credential for sending to production or sandbox APNs (string `true` or `false`)
   */
  sandbox?: boolean;
  /**
   * [FCM only] This is the "Server key" of your project from Firebase console under Settings / Cloud messaging.
   */
  secret?: string;
}

interface CredentialListFetchOptions {
  /**
   * [GCM only] This is the "Server key" of your project from Firebase console under Settings / Cloud messaging. Yes, you can use the server key from the Firebase console for GCM.
   */
  apiKey?: string;
  /**
   * [APN only] URL encoded representation of the certificate. Strip everything outside of the headers, e.g. `-----BEGIN CERTIFICATE-----MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A==-----END CERTIFICATE-----`
   */
  certificate?: string;
  /**
   * Friendly name for stored credential
   */
  friendlyName?: string;
  /**
   * [APN only] URL encoded representation of the private key. Strip everything outside of the headers, e.g. `-----BEGIN RSA PRIVATE KEY-----MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR\n.-----END RSA PRIVATE KEY-----`
   */
  privateKey?: string;
  /**
   * [APN only] use this credential for sending to production or sandbox APNs (string `true` or `false`)
   */
  sandbox?: boolean;
  /**
   * [FCM only] This is the "Server key" of your project from Firebase console under Settings / Cloud messaging.
   */
  secret?: string;
}

declare class CredentialPage extends Page<V1, CredentialPayload, CredentialResource, CredentialInstance> {
  constructor(version: V1, response: Response<string>, solution: CredentialSolution);

  /**
   * Build an instance of CredentialInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: CredentialPayload): CredentialInstance;
}

declare class CredentialInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: V1, payload: CredentialPayload, sid: string);

  private _proxy: CredentialContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a CredentialInstance
   *
   * @returns Promise that resolves to processed CredentialInstance
   */
  fetch(): Promise<CredentialInstance>;
  /**
   * fetch a CredentialInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CredentialInstance) => any): void;
  /**
   * Friendly name for stored credential
   */
  friendlyName: string;
  /**
   * remove a CredentialInstance
   *
   * @returns Promise that resolves to processed CredentialInstance
   */
  remove(): Promise<CredentialInstance>;
  /**
   * remove a CredentialInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: CredentialInstance) => any): void;
  /**
   * [APN only] use this credential for sending to production or sandbox APNs (string `true` or `false`)
   */
  sandbox: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * Credential type, one of "gcm", "fcm", or "apn"
   */
  type: CredentialPushService;
  /**
   * update a CredentialInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CredentialInstance
   */
  update(opts?: CredentialListFetchOptions): Promise<CredentialInstance>;
  /**
   * update a CredentialInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: CredentialListFetchOptions, callback: (error: Error | null, items: CredentialInstance) => any): void;
  /**
   * update a CredentialInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: CredentialInstance) => any): void;
  /**
   * The url
   */
  url: string;
}

declare class CredentialContext {
  constructor(version: V1, sid: string);

  /**
   * fetch a CredentialInstance
   *
   * @returns Promise that resolves to processed CredentialInstance
   */
  fetch(): Promise<CredentialInstance>;
  /**
   * fetch a CredentialInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CredentialInstance) => any): void;
  /**
   * remove a CredentialInstance
   *
   * @returns Promise that resolves to processed CredentialInstance
   */
  remove(): Promise<CredentialInstance>;
  /**
   * remove a CredentialInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: CredentialInstance) => any): void;
  /**
   * update a CredentialInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CredentialInstance
   */
  update(opts?: CredentialListFetchOptions): Promise<CredentialInstance>;
  /**
   * update a CredentialInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: CredentialListFetchOptions, callback: (error: Error | null, items: CredentialInstance) => any): void;
  /**
   * update a CredentialInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: CredentialInstance) => any): void;
}

export { CredentialContext, CredentialInstance, CredentialList, CredentialListCreateOptions, CredentialListEachOptions, CredentialListFetchOptions, CredentialListInstance, CredentialListOptions, CredentialListPageOptions, CredentialPage, CredentialPayload, CredentialPushService, CredentialResource, CredentialSolution }
