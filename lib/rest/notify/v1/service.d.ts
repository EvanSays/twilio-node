/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import V1 = require('../V1');
import deserialize = require('../../../base/deserialize');
import serialize = require('../../../base/serialize');
import values = require('../../../base/values');
import { BindingList } from './service/binding';
import { NotificationList } from './service/notification';
import { SegmentList } from './service/segment';
import { UserList } from './service/user';

/**
 * @constructor Twilio.Notify.V1.ServiceList
 * @description Initialize the ServiceList
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param version - Version of the resource
 */
declare function ServiceList(version: V1): ServiceListInstance;

/**
 * Options to pass to update
 *
 * @property friendlyName - Human-readable name for this service instance
 * @property apnCredentialSid - The SID of the default Credential to be used for APN Bindings
 * @property gcmCredentialSid - The SID of the default Credential to be used for GCM Bindings
 * @property messagingServiceSid - The SID of the Messaging Service to be used for SMS Bindings.
 * @property facebookMessengerPageId - The Page ID to be used to send for Facebook Messenger Bindings.
 * @property defaultApnNotificationProtocolVersion - The version of the protocol to be used for sending APNS notifications.
 * @property defaultGcmNotificationProtocolVersion - The version of the protocol to be used for sending GCM notifications.
 * @property fcmCredentialSid - The SID of the default Credential to be used for FCM Bindings
 * @property defaultFcmNotificationProtocolVersion - The version of the protocol to be used for sending FCM notifications.
 * @property logEnabled - The log_enabled
 * @property alexaSkillId - The alexa_skill_id
 * @property defaultAlexaNotificationProtocolVersion - The default_alexa_notification_protocol_version
 */
export interface UpdateOptions {
  alexaSkillId?: string;
  apnCredentialSid?: string;
  defaultAlexaNotificationProtocolVersion?: string;
  defaultApnNotificationProtocolVersion?: string;
  defaultFcmNotificationProtocolVersion?: string;
  defaultGcmNotificationProtocolVersion?: string;
  facebookMessengerPageId?: string;
  fcmCredentialSid?: string;
  friendlyName?: string;
  gcmCredentialSid?: string;
  logEnabled?: boolean;
  messagingServiceSid?: string;
}

/**
 * Options to pass to update
 *
 * @property friendlyName - Human-readable name for this service instance
 * @property apnCredentialSid - The SID of the default Credential to be used for APN Bindings
 * @property gcmCredentialSid - The SID of the default Credential to be used for GCM Bindings
 * @property messagingServiceSid - The SID of the Messaging Service to be used for SMS Bindings.
 * @property facebookMessengerPageId - The Page ID to be used to send for Facebook Messenger Bindings.
 * @property defaultApnNotificationProtocolVersion - The version of the protocol to be used for sending APNS notifications.
 * @property defaultGcmNotificationProtocolVersion - The version of the protocol to be used for sending GCM notifications.
 * @property fcmCredentialSid - The SID of the default Credential to be used for FCM Bindings
 * @property defaultFcmNotificationProtocolVersion - The version of the protocol to be used for sending FCM notifications.
 * @property logEnabled - The log_enabled
 * @property alexaSkillId - The alexa_skill_id
 * @property defaultAlexaNotificationProtocolVersion - The default_alexa_notification_protocol_version
 */
export interface UpdateOptions {
  alexaSkillId?: string;
  apnCredentialSid?: string;
  defaultAlexaNotificationProtocolVersion?: string;
  defaultApnNotificationProtocolVersion?: string;
  defaultFcmNotificationProtocolVersion?: string;
  defaultGcmNotificationProtocolVersion?: string;
  facebookMessengerPageId?: string;
  fcmCredentialSid?: string;
  friendlyName?: string;
  gcmCredentialSid?: string;
  logEnabled?: boolean;
  messagingServiceSid?: string;
}


declare class ServicePage extends Page {
  /**
   * @constructor Twilio.Notify.V1.ServicePage
   * @augments Page
   * @description Initialize the ServicePage
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Notify.V1, response: object, solution: object);

  /**
   * Build an instance of ServiceInstance
   *
   * @function getInstance
   * @memberof Twilio.Notify.V1.ServicePage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class ServiceInstance {
  /**
   * @constructor Twilio.Notify.V1.ServiceInstance
   * @description Initialize the ServiceContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property sid - The sid
   * @property accountSid - The account_sid
   * @property friendlyName - Human-readable name for this service instance
   * @property dateCreated - The date_created
   * @property dateUpdated - The date_updated
   * @property apnCredentialSid - The SID of the Credential to be used for APN Bindings.
   * @property gcmCredentialSid - The SID of the Credential to be used for GCM Bindings.
   * @property fcmCredentialSid - The SID of the Credential to be used for FCM Bindings.
   * @property messagingServiceSid - The SID of the Messaging Service to be used for SMS Bindings.
   * @property facebookMessengerPageId - The Page ID to be used to send for Facebook Messenger Bindings.
   * @property defaultApnNotificationProtocolVersion - The version of the protocol to be used for sending APNS notifications.
   * @property defaultGcmNotificationProtocolVersion - The version of the protocol to be used for sending GCM notifications.
   * @property defaultFcmNotificationProtocolVersion - The version of the protocol to be used for sending FCM notifications.
   * @property logEnabled - The log_enabled
   * @property url - The url
   * @property links - The links
   * @property alexaSkillId - The alexa_skill_id
   * @property defaultAlexaNotificationProtocolVersion - The default_alexa_notification_protocol_version
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: Twilio.Notify.V1, payload: object, sid: sid);

  _proxy?: ServiceContext;
  /**
   * Access the bindings
   *
   * @function bindings
   * @memberof Twilio.Notify.V1.ServiceInstance
   * @instance
   */
  bindings();
  /**
   * fetch a ServiceInstance
   *
   * @function fetch
   * @memberof Twilio.Notify.V1.ServiceInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the notifications
   *
   * @function notifications
   * @memberof Twilio.Notify.V1.ServiceInstance
   * @instance
   */
  notifications();
  /**
   * remove a ServiceInstance
   *
   * @function remove
   * @memberof Twilio.Notify.V1.ServiceInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Access the segments
   *
   * @function segments
   * @memberof Twilio.Notify.V1.ServiceInstance
   * @instance
   */
  segments();
  /**
   * Produce a plain JSON object version of the ServiceInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Notify.V1.ServiceInstance
   * @instance
   */
  toJSON();
  /**
   * update a ServiceInstance
   *
   * @function update
   * @memberof Twilio.Notify.V1.ServiceInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
  /**
   * Access the users
   *
   * @function users
   * @memberof Twilio.Notify.V1.ServiceInstance
   * @instance
   */
  users();
}


declare class ServiceContext {
  /**
   * @constructor Twilio.Notify.V1.ServiceContext
   * @description Initialize the ServiceContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property bindings - bindings resource
   * @property notifications - notifications resource
   * @property users - users resource
   * @property segments - segments resource
   *
   * @param version - Version of the resource
   * @param sid - The sid
   */
  constructor(version: Twilio.Notify.V1, sid: sid);

  bindings?: Twilio.Notify.V1.ServiceContext.BindingList;
  /**
   * fetch a ServiceInstance
   *
   * @function fetch
   * @memberof Twilio.Notify.V1.ServiceContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  notifications?: Twilio.Notify.V1.ServiceContext.NotificationList;
  /**
   * remove a ServiceInstance
   *
   * @function remove
   * @memberof Twilio.Notify.V1.ServiceContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  segments?: Twilio.Notify.V1.ServiceContext.SegmentList;
  /**
   * update a ServiceInstance
   *
   * @function update
   * @memberof Twilio.Notify.V1.ServiceContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
  users?: Twilio.Notify.V1.ServiceContext.UserList;
}

export { ServiceContext, ServiceInstance, ServiceList, ServicePage }
