/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the SegmentList
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param version - Version of the resource
 * @param serviceSid - The service_sid
 */
declare function SegmentList(version: V1, serviceSid: string): SegmentListInstance;

interface SegmentResource {
  account_sid: string;
  date_created: Date;
  date_updated: Date;
  service_sid: string;
  sid: string;
  unique_name: string;
}

interface SegmentPayload extends SegmentResource, Page.TwilioResponsePayload {
}

interface SegmentSolution {
  serviceSid?: string;
}

interface SegmentListInstance {
  /**
   * Streams SegmentInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: SegmentListInstanceEachOptions, callback?: (item: SegmentInstance, done: (err?: Error) => void) => void): void;
  /**
   * Retrieve a single target page of SegmentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: SegmentPage) => any): Promise<SegmentPage>;
  /**
   * Lists SegmentInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: SegmentListInstanceOptions, callback?: (error: Error | null, items: SegmentInstance[]) => any): Promise<SegmentInstance[]>;
  /**
   * Retrieve a single page of SegmentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: SegmentListInstancePageOptions, callback?: (error: Error | null, items: SegmentPage) => any): Promise<SegmentPage>;
}


declare class SegmentPage extends Page<V1, SegmentPayload, SegmentResource, SegmentInstance> {
  /**
   * Initialize the SegmentPagePLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: SegmentSolution);

  /**
   * Build an instance of SegmentInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: SegmentPayload): SegmentInstance;
}


declare class SegmentInstance extends SerializableClass {
  /**
   * Initialize the SegmentContextPLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property sid - The sid
   * @property accountSid - The account_sid
   * @property serviceSid - The service_sid
   * @property uniqueName - The unique_name
   * @property dateCreated - The date_created
   * @property dateUpdated - The date_updated
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   */
  constructor(version: V1, payload: SegmentPayload, serviceSid: string);

  accountSid: string;
  dateCreated: Date;
  dateUpdated: Date;
  serviceSid: string;
  sid: string;
  uniqueName: string;
}

export { SegmentInstance, SegmentList, SegmentListInstance, SegmentListInstanceEachOptions, SegmentListInstanceOptions, SegmentListInstancePageOptions, SegmentPage, SegmentPayload, SegmentResource, SegmentSolution }
