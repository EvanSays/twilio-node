/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');
import { SerializableClass } from '../../../../../interfaces';

/**
 * @description Initialize the SegmentMembershipList
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param version - Version of the resource
 * @param serviceSid - The service_sid
 * @param identity - The identity
 */
declare function SegmentMembershipList(version: V1, serviceSid: string, identity: string): SegmentMembershipListInstance;

interface SegmentMembershipResource {
  account_sid: string;
  identity: string;
  segment: string;
  service_sid: string;
  url: string;
}

interface SegmentMembershipPayload extends SegmentMembershipResource, Page.TwilioResponsePayload {
}

interface SegmentMembershipSolution {
  identity?: string;
  serviceSid?: string;
}

interface SegmentMembershipListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): SegmentMembershipContext;
  /**
   * create a SegmentMembershipInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: SegmentMembershipListInstanceCreateOptions, callback?: (error: Error | null, items: SegmentMembershipListInstance) => any): Promise<SegmentMembershipInstance>;
  /**
   * Constructs a segment_membership
   *
   * @param segment - The segment
   */
  get(segment: string): SegmentMembershipContext;
}


declare class SegmentMembershipPage extends Page<V1, SegmentMembershipPayload, SegmentMembershipResource, SegmentMembershipInstance> {
  /**
   * Initialize the SegmentMembershipPagePLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: SegmentMembershipSolution);

  /**
   * Build an instance of SegmentMembershipInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: SegmentMembershipPayload): SegmentMembershipInstance;
}


declare class SegmentMembershipInstance extends SerializableClass {
  /**
   * Initialize the SegmentMembershipContextPLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property accountSid - The account_sid
   * @property serviceSid - The service_sid
   * @property identity - The identity
   * @property segment - The segment
   * @property url - The url
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param identity - The identity
   * @param segment - The segment
   */
  constructor(version: V1, payload: SegmentMembershipPayload, serviceSid: string, identity: string, segment: string);

  private _proxy: SegmentMembershipContext;
  accountSid: string;
  /**
   * fetch a SegmentMembershipInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: SegmentMembershipInstance) => any): void;
  identity: string;
  /**
   * remove a SegmentMembershipInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: SegmentMembershipInstance) => any): void;
  segment: string;
  serviceSid: string;
  url: string;
}


declare class SegmentMembershipContext {
  /**
   * Initialize the SegmentMembershipContextPLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param serviceSid - The service_sid
   * @param identity - The identity
   * @param segment - The segment
   */
  constructor(version: V1, serviceSid: string, identity: string, segment: string);

  /**
   * fetch a SegmentMembershipInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: SegmentMembershipInstance) => any): void;
  /**
   * remove a SegmentMembershipInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: SegmentMembershipInstance) => any): void;
}

export { SegmentMembershipContext, SegmentMembershipInstance, SegmentMembershipList, SegmentMembershipListInstance, SegmentMembershipListInstanceCreateOptions, SegmentMembershipPage, SegmentMembershipPayload, SegmentMembershipResource, SegmentMembershipSolution }
