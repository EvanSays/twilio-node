/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the CountryList
 *
 * @param version - Version of the resource
 */
declare function CountryList(version: V1): CountryListInstance;

interface CountryResource {
  country: string;
  inbound_call_prices?: string;
  iso_country: string;
  outbound_prefix_prices?: string;
  price_unit?: string;
  url: string;
}

interface CountryPayload extends CountryResource, Page.TwilioResponsePayload {
}

interface CountrySolution {
}

interface CountryListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): CountryContext;
  /**
   * Streams CountryInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Pricing.V1.VoiceContext.CountryList
   * @instance
   *
   * @param opts - ...
   * @param callback - Function to process each record
   */
  each(opts?: object, callback?: Function);
  /**
   * Constructs a country
   *
   * @function get
   * @memberof Twilio.Pricing.V1.VoiceContext.CountryList
   * @instance
   *
   * @param isoCountry - The iso_country
   */
  get(isoCountry: string);
  /**
   * Retrieve a single target page of CountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Pricing.V1.VoiceContext.CountryList
   * @instance
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists CountryInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Pricing.V1.VoiceContext.CountryList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  list(opts?: object, callback?: function);
  /**
   * Retrieve a single page of CountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Pricing.V1.VoiceContext.CountryList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  page(opts?: object, callback?: function);
}


declare class CountryPage extends Page {
  /**
   * @constructor Twilio.Pricing.V1.VoiceContext.CountryPage
   * @augments Page
   * @description Initialize the CountryPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Pricing.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of CountryInstance
   *
   * @function getInstance
   * @memberof Twilio.Pricing.V1.VoiceContext.CountryPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class CountryInstance {
  /**
   * @constructor Twilio.Pricing.V1.VoiceContext.CountryInstance
   * @description Initialize the CountryContext
   *
   * @property country - Name of the country
   * @property isoCountry - The ISO country code
   * @property outboundPrefixPrices - The outbound_prefix_prices
   * @property inboundCallPrices - The inbound_call_prices
   * @property priceUnit - The currency in which prices are measured, in ISO 4127 format (e.g. usd, eur, jpy).
   * @property url - The url
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param isoCountry - The iso_country
   */
  constructor(version: Twilio.Pricing.V1, payload: object, isoCountry: iso_country_code);

  _proxy?: CountryContext;
  /**
   * fetch a CountryInstance
   *
   * @function fetch
   * @memberof Twilio.Pricing.V1.VoiceContext.CountryInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Produce a plain JSON object version of the CountryInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Pricing.V1.VoiceContext.CountryInstance
   * @instance
   */
  toJSON();
}


declare class CountryContext {
  /**
   * @constructor Twilio.Pricing.V1.VoiceContext.CountryContext
   * @description Initialize the CountryContext
   *
   * @param version - Version of the resource
   * @param isoCountry - The iso_country
   */
  constructor(version: Twilio.Pricing.V1, isoCountry: iso_country_code);

  /**
   * fetch a CountryInstance
   *
   * @function fetch
   * @memberof Twilio.Pricing.V1.VoiceContext.CountryContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
}

export { CountryContext, CountryInstance, CountryList, CountryListInstance, CountryPage, CountryPayload, CountryResource, CountrySolution }
