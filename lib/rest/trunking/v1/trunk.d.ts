/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import { CredentialListListInstance } from './trunk/credentialList';
import { IpAccessControlListListInstance } from './trunk/ipAccessControlList';
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';
import { OriginationUrlListInstance } from './trunk/originationUrl';
import { PhoneNumberListInstance } from './trunk/phoneNumber';
import { SerializableClass } from '../../../interfaces';

declare function TrunkList(version: V1): TrunkListInstance

type TrunkRecordingSetting = 'do-not-record'|'record-from-ringing'|'record-from-answer';

interface TrunkResource {
  /**
   * The unique ID of the Account that owns this Trunk.
   */
  account_sid: string;
  /**
   * The types of authentication you have mapped to your domain. The possible values are `IP_ACL` and `CREDENTIAL_LIST`. If you have both setup for your domain, both will be returned comma delimited. If you do not have one setup for your domain, it will not be able to receive any traffic.
   */
  auth_type: string;
  /**
   * The auth_type_set
   */
  auth_type_set: string;
  /**
   * The Caller ID Name (CNAM) lookup setting for this trunk. If turned on, all inbound calls to this SIP Trunk from the United States and Canada will automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM](https://www.twilio.com/docs/sip-trunking#CNAM) Lookups for more information.
   */
  cnam_lookup_enabled: boolean;
  /**
   * The date this Activity was created.
   */
  date_created: Date;
  /**
   * The date this Activity was updated.
   */
  date_updated: Date;
  /**
   * The HTTP method Twilio will use when requesting the `DisasterRecoveryUrl`. Either `GET` or `POST`.
   */
  disaster_recovery_method: string;
  /**
   * The HTTP URL that Twilio will request if an error occurs while sending SIP traffic towards your configured Origination URL. Twilio will retrieve TwiML from this URL and execute those instructions like any other normal TwiML call. See [Disaster Recovery](https://www.twilio.com/docs/sip-trunking/getting-started#disaster-recovery) for more information.
   */
  disaster_recovery_url: string;
  /**
   * The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and `-` and must always end with `pstn.twilio.com`. See [Termination Settings](https://www.twilio.com/docs/sip-trunking/getting-started#termination) for more information.
   */
  domain_name: string;
  /**
   * A human-readable name for the Trunk.
   */
  friendly_name: string;
  /**
   * The links
   */
  links: string;
  /**
   * The recording settings for this trunk. If turned on, all calls going through this trunk will be recorded and the recording can either start when the call is ringing or when the call is answered. TwiML from this URL and execute those instructions like any other normal TwiML call. See [Recording](https://www.twilio.com/docs/sip-trunking/getting-started#recording) for more information.
   */
  recording: string;
  /**
   * The Secure Trunking  settings for this trunk. If turned on, all calls going through this trunk will be secure using SRTP for media and TLS for signalling. If turned off, then RTP will be used for media. TwiML from this URL and execute those instructions like any other normal TwiML call. See [Secure Trunking](https://www.twilio.com/docs/sip-trunking/getting-started#securetrunking) for more information.
   */
  secure: boolean;
  /**
   * A 34 character string that uniquely identifies the SIP Trunk in Twilio.
   */
  sid: string;
  /**
   * The URL for this resource, relative to `https://trunking.twilio.com`
   */
  url: string;
}

interface TrunkPayload extends TrunkResource, Page.TwilioResponsePayload {
}

interface TrunkSolution {
}

interface TrunkListCreateOptions {
  /**
   * The Caller ID Name (CNAM) lookup setting for this trunk. If turned on, all inbound calls to this SIP Trunk from the United States and Canada will automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM](https://www.twilio.com/docs/sip-trunking#CNAM) Lookups for more information.
   */
  cnamLookupEnabled?: boolean;
  /**
   * The HTTP method Twilio will use when requesting the `DisasterRecoveryUrl`. Either `GET` or `POST`.
   */
  disasterRecoveryMethod?: string;
  /**
   * The HTTP URL that Twilio will request if an error occurs while sending SIP traffic towards your configured Origination URL. Twilio will retrieve TwiML from this URL and execute those instructions like any other normal TwiML call. See [Disaster Recovery](https://www.twilio.com/docs/sip-trunking/getting-started#disaster-recovery) for more information.
   */
  disasterRecoveryUrl?: string;
  /**
   * The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and `-` and must always end with `pstn.twilio.com`. See [Termination Settings](https://www.twilio.com/docs/sip-trunking/getting-started#termination) for more information.
   */
  domainName?: string;
  /**
   * A human-readable name for the Trunk.
   */
  friendlyName?: string;
  /**
   * The recording settings for this trunk. If turned on, all calls going through this trunk will be recorded and the recording can either start when the call is ringing or when the call is answered. See [Recording](https://www.twilio.com/docs/sip-trunking/getting-started#recording) for more information.
   */
  recording?: TrunkRecordingSetting;
  /**
   * The Secure Trunking  settings for this trunk. If turned on, all calls going through this trunk will be secure using SRTP for media and TLS for signalling. If turned off, then RTP will be used for media. See [Secure Trunking](https://www.twilio.com/docs/sip-trunking/getting-started#securetrunking) for more information.
   */
  secure?: boolean;
}

interface TrunkListEachOptions extends ListEachOptions<TrunkInstance> {
}

interface TrunkListOptions extends ListOptions<TrunkInstance> {
}

interface TrunkListPageOptions extends PageOptions<TrunkPage> {
}

interface TrunkListInstance {
  /**
   * Gets context of a single Trunk resource
   *
   * @param sid - The sid
   */
  (sid: string): TrunkContext;
  /**
   * create a TrunkInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TrunkInstance
   */
  create(opts?: TrunkListCreateOptions): Promise<TrunkInstance>;
  /**
   * create a TrunkInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: TrunkListCreateOptions, callback: (error: Error | null, items: TrunkInstance) => any): void;
  /**
   * create a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: TrunkInstance) => any): void;
  /**
   * Streams TrunkInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: TrunkListEachOptions): void;
  /**
   * Streams TrunkInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: TrunkInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Trunk resource
   *
   * @param sid - The sid
   */
  get(sid: string): TrunkContext;
  /**
   * Retrieve a single target page of TrunkInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<TrunkPage>;
  /**
   * Retrieve a single target page of TrunkInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: TrunkPage) => any): void;
  /**
   * Lists TrunkInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: TrunkListOptions): Promise<TrunkInstance[]>;
  /**
   * Lists TrunkInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: TrunkListOptions, callback: (error: Error | null, items: TrunkInstance[]) => any): void;
  /**
   * Lists TrunkInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: TrunkInstance[]) => any): void;
  /**
   * Retrieve a single page of TrunkInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: TrunkListPageOptions): Promise<TrunkPage>;
  /**
   * Retrieve a single page of TrunkInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: TrunkListPageOptions, callback: (error: Error | null, items: TrunkPage) => any): void;
  /**
   * Retrieve a single page of TrunkInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: TrunkPage) => any): void;
}

interface TrunkListFetchOptions {
  /**
   * The Caller ID Name (CNAM) lookup setting for this trunk. If turned on, all inbound calls to this SIP Trunk from the United States and Canada will automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM](https://www.twilio.com/docs/sip-trunking#CNAM) Lookups for more information.
   */
  cnamLookupEnabled?: boolean;
  /**
   * The HTTP method Twilio will use when requesting the `DisasterRecoveryUrl`. Either `GET` or `POST`.
   */
  disasterRecoveryMethod?: string;
  /**
   * The HTTP URL that Twilio will request if an error occurs while sending SIP traffic towards your configured Origination URL. Twilio will retrieve TwiML from this URL and execute those instructions like any other normal TwiML call. See [Disaster Recovery](https://www.twilio.com/docs/sip-trunking/getting-started#disaster-recovery) for more information.
   */
  disasterRecoveryUrl?: string;
  /**
   * The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and `-` and must always end with `pstn.twilio.com`. See [Termination Settings](https://www.twilio.com/docs/sip-trunking/getting-started#termination) for more information.
   */
  domainName?: string;
  /**
   * A human-readable name for the Trunk.
   */
  friendlyName?: string;
  /**
   * The recording settings for this trunk. If turned on, all calls going through this trunk will be recorded and the recording can either start when the call is ringing or when the call is answered. See [Recording](https://www.twilio.com/docs/sip-trunking/getting-started#recording) for more information.
   */
  recording?: TrunkRecordingSetting;
  /**
   * The Secure Trunking  settings for this trunk. If turned on, all calls going through this trunk will be secure using SRTP for media and TLS for signalling. If turned off, then RTP will be used for media. See [Secure Trunking](https://www.twilio.com/docs/sip-trunking/getting-started#securetrunking) for more information.
   */
  secure?: boolean;
}

interface TrunkListFetchOptions {
  /**
   * The Caller ID Name (CNAM) lookup setting for this trunk. If turned on, all inbound calls to this SIP Trunk from the United States and Canada will automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM](https://www.twilio.com/docs/sip-trunking#CNAM) Lookups for more information.
   */
  cnamLookupEnabled?: boolean;
  /**
   * The HTTP method Twilio will use when requesting the `DisasterRecoveryUrl`. Either `GET` or `POST`.
   */
  disasterRecoveryMethod?: string;
  /**
   * The HTTP URL that Twilio will request if an error occurs while sending SIP traffic towards your configured Origination URL. Twilio will retrieve TwiML from this URL and execute those instructions like any other normal TwiML call. See [Disaster Recovery](https://www.twilio.com/docs/sip-trunking/getting-started#disaster-recovery) for more information.
   */
  disasterRecoveryUrl?: string;
  /**
   * The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and `-` and must always end with `pstn.twilio.com`. See [Termination Settings](https://www.twilio.com/docs/sip-trunking/getting-started#termination) for more information.
   */
  domainName?: string;
  /**
   * A human-readable name for the Trunk.
   */
  friendlyName?: string;
  /**
   * The recording settings for this trunk. If turned on, all calls going through this trunk will be recorded and the recording can either start when the call is ringing or when the call is answered. See [Recording](https://www.twilio.com/docs/sip-trunking/getting-started#recording) for more information.
   */
  recording?: TrunkRecordingSetting;
  /**
   * The Secure Trunking  settings for this trunk. If turned on, all calls going through this trunk will be secure using SRTP for media and TLS for signalling. If turned off, then RTP will be used for media. See [Secure Trunking](https://www.twilio.com/docs/sip-trunking/getting-started#securetrunking) for more information.
   */
  secure?: boolean;
}

declare class TrunkPage extends Page<V1, TrunkPayload, TrunkResource, TrunkInstance> {
  constructor(version: V1, response: Response<string>, solution: TrunkSolution);

  /**
   * Build an instance of TrunkInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TrunkPayload): TrunkInstance;
}

declare class TrunkInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: V1, payload: TrunkPayload, sid: string);

  private _proxy: TrunkContext;
  /**
   * The unique ID of the Account that owns this Trunk.
   */
  accountSid: string;
  /**
   * The types of authentication you have mapped to your domain. The possible values are `IP_ACL` and `CREDENTIAL_LIST`. If you have both setup for your domain, both will be returned comma delimited. If you do not have one setup for your domain, it will not be able to receive any traffic.
   */
  authType: string;
  /**
   * The auth_type_set
   */
  authTypeSet: string;
  /**
   * The Caller ID Name (CNAM) lookup setting for this trunk. If turned on, all inbound calls to this SIP Trunk from the United States and Canada will automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM](https://www.twilio.com/docs/sip-trunking#CNAM) Lookups for more information.
   */
  cnamLookupEnabled: boolean;
  credentialsLists(): CredentialListListInstance;
  /**
   * The date this Activity was created.
   */
  dateCreated: Date;
  /**
   * The date this Activity was updated.
   */
  dateUpdated: Date;
  /**
   * The HTTP method Twilio will use when requesting the `DisasterRecoveryUrl`. Either `GET` or `POST`.
   */
  disasterRecoveryMethod: string;
  /**
   * The HTTP URL that Twilio will request if an error occurs while sending SIP traffic towards your configured Origination URL. Twilio will retrieve TwiML from this URL and execute those instructions like any other normal TwiML call. See [Disaster Recovery](https://www.twilio.com/docs/sip-trunking/getting-started#disaster-recovery) for more information.
   */
  disasterRecoveryUrl: string;
  /**
   * The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and `-` and must always end with `pstn.twilio.com`. See [Termination Settings](https://www.twilio.com/docs/sip-trunking/getting-started#termination) for more information.
   */
  domainName: string;
  /**
   * fetch a TrunkInstance
   *
   * @returns Promise that resolves to processed TrunkInstance
   */
  fetch(): Promise<TrunkInstance>;
  /**
   * fetch a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TrunkInstance) => any): void;
  /**
   * A human-readable name for the Trunk.
   */
  friendlyName: string;
  ipAccessControlLists(): IpAccessControlListListInstance;
  /**
   * The links
   */
  links: string;
  originationUrls(): OriginationUrlListInstance;
  phoneNumbers(): PhoneNumberListInstance;
  /**
   * The recording settings for this trunk. If turned on, all calls going through this trunk will be recorded and the recording can either start when the call is ringing or when the call is answered. TwiML from this URL and execute those instructions like any other normal TwiML call. See [Recording](https://www.twilio.com/docs/sip-trunking/getting-started#recording) for more information.
   */
  recording: string;
  /**
   * remove a TrunkInstance
   *
   * @returns Promise that resolves to processed TrunkInstance
   */
  remove(): Promise<TrunkInstance>;
  /**
   * remove a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: TrunkInstance) => any): void;
  /**
   * The Secure Trunking  settings for this trunk. If turned on, all calls going through this trunk will be secure using SRTP for media and TLS for signalling. If turned off, then RTP will be used for media. TwiML from this URL and execute those instructions like any other normal TwiML call. See [Secure Trunking](https://www.twilio.com/docs/sip-trunking/getting-started#securetrunking) for more information.
   */
  secure: boolean;
  /**
   * A 34 character string that uniquely identifies the SIP Trunk in Twilio.
   */
  sid: string;
  /**
   * update a TrunkInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TrunkInstance
   */
  update(opts?: TrunkListFetchOptions): Promise<TrunkInstance>;
  /**
   * update a TrunkInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: TrunkListFetchOptions, callback: (error: Error | null, items: TrunkInstance) => any): void;
  /**
   * update a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: TrunkInstance) => any): void;
  /**
   * The URL for this resource, relative to `https://trunking.twilio.com`
   */
  url: string;
}

declare class TrunkContext {
  constructor(version: V1, sid: string);

  credentialsLists: CredentialListListInstance;
  /**
   * fetch a TrunkInstance
   *
   * @returns Promise that resolves to processed TrunkInstance
   */
  fetch(): Promise<TrunkInstance>;
  /**
   * fetch a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TrunkInstance) => any): void;
  ipAccessControlLists: IpAccessControlListListInstance;
  originationUrls: OriginationUrlListInstance;
  phoneNumbers: PhoneNumberListInstance;
  /**
   * remove a TrunkInstance
   *
   * @returns Promise that resolves to processed TrunkInstance
   */
  remove(): Promise<TrunkInstance>;
  /**
   * remove a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: TrunkInstance) => any): void;
  /**
   * update a TrunkInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TrunkInstance
   */
  update(opts?: TrunkListFetchOptions): Promise<TrunkInstance>;
  /**
   * update a TrunkInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: TrunkListFetchOptions, callback: (error: Error | null, items: TrunkInstance) => any): void;
  /**
   * update a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: TrunkInstance) => any): void;
}

export { TrunkContext, TrunkInstance, TrunkList, TrunkListCreateOptions, TrunkListEachOptions, TrunkListFetchOptions, TrunkListInstance, TrunkListOptions, TrunkListPageOptions, TrunkPage, TrunkPayload, TrunkRecordingSetting, TrunkResource, TrunkSolution }
