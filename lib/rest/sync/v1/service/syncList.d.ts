/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { SerializableClass } from '../../../../interfaces';
import { SyncListItemList } from './syncList/syncListItem';
import { SyncListPermissionList } from './syncList/syncListPermission';

/**
 * @description Initialize the SyncListList
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param version - Version of the resource
 * @param serviceSid - The unique SID identifier of the Service Instance that hosts this List object.
 */
declare function SyncListList(version: V1, serviceSid: string): SyncListListInstance;

interface SyncListResource {
  account_sid: string;
  created_by: string;
  date_created: Date;
  date_expires: Date;
  date_updated: Date;
  links: string;
  revision: string;
  service_sid: string;
  sid: string;
  unique_name: string;
  url: string;
}

interface SyncListPayload extends SyncListResource, Page.TwilioResponsePayload {
}

interface SyncListSolution {
  serviceSid?: string;
}

interface SyncListListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): SyncListContext;
  /**
   * create a SyncListInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts?: SyncListListInstanceCreateOptions, callback?: function);
  /**
   * Streams SyncListInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: SyncListListInstanceEachOptions, callback?: (item: SyncListInstance, done: (err?: Error) => void) => void);
  /**
   * Constructs a sync_list
   *
   * @param sid - The sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of SyncListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists SyncListInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: SyncListListInstanceOptions, callback?: function);
  /**
   * Retrieve a single page of SyncListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: SyncListListInstancePageOptions, callback?: function);
}

/**
 * Options to pass to update
 *
 * @property ttl - Time-to-live of this List in seconds, defaults to no expiration.
 */
export interface SyncListInstanceUpdateOptions {
  ttl?: number;
}

/**
 * Options to pass to update
 *
 * @property ttl - Time-to-live of this List in seconds, defaults to no expiration.
 */
export interface SyncListContextUpdateOptions {
  ttl?: number;
}

/**
 * Options to pass to create
 *
 * @property uniqueName - Human-readable name for this list
 * @property ttl - Time-to-live of this List in seconds, defaults to no expiration.
 */
export interface SyncListListInstanceCreateOptions {
  ttl?: number;
  uniqueName?: string;
}

/**
 * Options to pass to each
 *
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 */
export interface SyncListListInstanceEachOptions {
  callback?: (item: SyncListInstance, done: (err?: Error) => void) => void;
  done?: Function;
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to list
 *
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
export interface SyncListListInstanceOptions {
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to page
 *
 * @property pageToken - PageToken provided by the API
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 */
export interface SyncListListInstancePageOptions {
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
}


declare class SyncListPage extends Page {
  /**
   * @constructor Twilio.Sync.V1.ServiceContext.SyncListPage
   * @augments Page
   * @description Initialize the SyncListPage
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Sync.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of SyncListInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class SyncListInstance {
  /**
   * @constructor Twilio.Sync.V1.ServiceContext.SyncListInstance
   * @description Initialize the SyncListContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property sid - The unique 34-character SID identifier of the List.
   * @property uniqueName - The unique and addressable name of this List.
   * @property accountSid - The unique SID identifier of the Twilio Account.
   * @property serviceSid - The unique SID identifier of the Service Instance that hosts this List object.
   * @property url - The absolute URL for this List.
   * @property links - A dictionary of URL links to nested resources of this List.
   * @property revision - Contains the current revision of this List, represented by a string identifier.
   * @property dateExpires - Contains the date this List expires and gets deleted automatically.
   * @property dateCreated - The date this List was created, given in UTC ISO 8601 format.
   * @property dateUpdated - Specifies the date this List was last updated, given in UTC ISO 8601 format.
   * @property createdBy - The identity of the List creator.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The unique SID identifier of the Service Instance that hosts this List object.
   * @param sid - The sid
   */
  constructor(version: Twilio.Sync.V1, payload: object, serviceSid: sid, sid: sid_like);

  _proxy?: SyncListContext;
  /**
   * fetch a SyncListInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a SyncListInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Access the syncListItems
   */
  syncListItems();
  /**
   * Access the syncListPermissions
   */
  syncListPermissions();
  /**
   * Produce a plain JSON object version of the SyncListInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON();
  /**
   * update a SyncListInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: SyncListInstanceUpdateOptions, callback?: function);
}


declare class SyncListContext {
  /**
   * @constructor Twilio.Sync.V1.ServiceContext.SyncListContext
   * @description Initialize the SyncListContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property syncListItems - syncListItems resource
   * @property syncListPermissions - syncListPermissions resource
   *
   * @param version - Version of the resource
   * @param serviceSid - The service_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Sync.V1, serviceSid: sid_like, sid: sid_like);

  /**
   * fetch a SyncListInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a SyncListInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  syncListItems?: Twilio.Sync.V1.ServiceContext.SyncListContext.SyncListItemList;
  syncListPermissions?: Twilio.Sync.V1.ServiceContext.SyncListContext.SyncListPermissionList;
  /**
   * update a SyncListInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: SyncListContextUpdateOptions, callback?: function);
}

export { SyncListContext, SyncListInstance, SyncListList, SyncListListInstance, SyncListPage, SyncListPayload, SyncListResource, SyncListSolution }
