/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import V1 = require('../../V1');
import deserialize = require('../../../../base/deserialize');
import serialize = require('../../../../base/serialize');
import values = require('../../../../base/values');
import { InteractionList } from './session/interaction';
import { ParticipantList } from './session/participant';

/**
 * @constructor Twilio.Proxy.V1.ServiceContext.SessionList
 * @description Initialize the SessionList
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param version - Version of the resource
 * @param serviceSid - Service Sid.
 */
declare function SessionList(version: V1, serviceSid: string): SessionListInstance;

/**
 * Options to pass to update
 *
 * @property dateExpiry - The date this Session should expire
 * @property ttl - TTL for a Session, in seconds.
 * @property mode - The mode
 * @property status - The Status of this Session
 * @property participants - The participants
 */
export interface UpdateOptions {
  dateExpiry?: Date;
  mode?: session.mode;
  participants?: string|list;
  status?: session.status;
  ttl?: number;
}

/**
 * Options to pass to update
 *
 * @property dateExpiry - The date this Session should expire
 * @property ttl - TTL for a Session, in seconds.
 * @property mode - The mode
 * @property status - The Status of this Session
 * @property participants - The participants
 */
export interface UpdateOptions {
  dateExpiry?: Date;
  mode?: session.mode;
  participants?: string|list;
  status?: session.status;
  ttl?: number;
}


declare class SessionPage extends Page {
  /**
   * @constructor Twilio.Proxy.V1.ServiceContext.SessionPage
   * @augments Page
   * @description Initialize the SessionPage
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Proxy.V1, response: object, solution: object);

  /**
   * Build an instance of SessionInstance
   *
   * @function getInstance
   * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class SessionInstance {
  /**
   * @constructor Twilio.Proxy.V1.ServiceContext.SessionInstance
   * @description Initialize the SessionContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property sid - A string that uniquely identifies this Session.
   * @property serviceSid - Service Sid.
   * @property accountSid - Account Sid.
   * @property dateStarted - The date this Session was started
   * @property dateEnded - The date this Session was ended
   * @property dateLastInteraction - The date this Session last had an interaction
   * @property dateExpiry - The date this Session should expire
   * @property uniqueName - A unique, developer assigned identifier for this Session.
   * @property status - The Status of this Session
   * @property closedReason - Reason Session ended.
   * @property ttl - TTL for a Session, in seconds.
   * @property mode - The Mode of this Session
   * @property dateCreated - The date this Session was created
   * @property dateUpdated - The date this Session was last updated
   * @property url - The URL of this resource.
   * @property links - Nested resource URLs.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - Service Sid.
   * @param sid - A string that uniquely identifies this Session.
   */
  constructor(version: Twilio.Proxy.V1, payload: object, serviceSid: sid, sid: sid_like);

  _proxy?: SessionContext;
  /**
   * fetch a SessionInstance
   *
   * @function fetch
   * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the interactions
   *
   * @function interactions
   * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance
   * @instance
   */
  interactions();
  /**
   * Access the participants
   *
   * @function participants
   * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance
   * @instance
   */
  participants();
  /**
   * remove a SessionInstance
   *
   * @function remove
   * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the SessionInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance
   * @instance
   */
  toJSON();
  /**
   * update a SessionInstance
   *
   * @function update
   * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}


declare class SessionContext {
  /**
   * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext
   * @description Initialize the SessionContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property interactions - interactions resource
   * @property participants - participants resource
   *
   * @param version - Version of the resource
   * @param serviceSid - Service Sid.
   * @param sid - A string that uniquely identifies this Session.
   */
  constructor(version: Twilio.Proxy.V1, serviceSid: sid, sid: sid_like);

  /**
   * fetch a SessionInstance
   *
   * @function fetch
   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  interactions?: Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList;
  participants?: Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList;
  /**
   * remove a SessionInstance
   *
   * @function remove
   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a SessionInstance
   *
   * @function update
   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { SessionContext, SessionInstance, SessionList, SessionPage }
