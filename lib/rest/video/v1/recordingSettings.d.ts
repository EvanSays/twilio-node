/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import { SerializableClass } from '../../../interfaces';

declare function RecordingSettingsList(version: V1): RecordingSettingsListInstance

interface RecordingSettingsResource {
  /**
   * The Twilio Account SID associated with this item
   */
  account_sid: string;
  /**
   * SID of the Stored Credential resource `CRxx`
   */
  aws_credentials_sid: string;
  /**
   * URL of the S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like `http://<my-bucket>.s3-<aws-region>.amazonaws.com/recordings`, where `recordings` is the path where you want recordings to be stored.
   */
  aws_s3_url: string;
  /**
   * `true|false` When set to `true`, all Recordings will be written to the `AwsS3Url` specified above. When set to `false`, all Recordings will be stored in Twilio's cloud.
   */
  aws_storage_enabled: boolean;
  /**
   * `true|false` When set to `true`, all Recordings will be stored encrypted. Dafault value is `false`
   */
  encryption_enabled: boolean;
  /**
   * SID of the Public Key resource `CRxx`
   */
  encryption_key_sid: string;
  /**
   * Friendly name of the configuration to be shown in the console
   */
  friendly_name: string;
  /**
   * The url
   */
  url: string;
}

interface RecordingSettingsPayload extends RecordingSettingsResource, Page.TwilioResponsePayload {
}

interface RecordingSettingsSolution {
}

interface RecordingSettingsListInstance {
  /**
   * Gets context of a single RecordingSettings resource
   */
  (): RecordingSettingsContext;
  /**
   * Gets context of a single RecordingSettings resource
   */
  get(): RecordingSettingsContext;
}

interface RecordingSettingsListCreateOptions {
  /**
   * SID of the Stored Credential resource `CRxx`
   */
  awsCredentialsSid?: string;
  /**
   * Identity of the external location where the recordings should be stored. We only support DNS-compliant URLs like `http://<my-bucket>.s3-<aws-region>.amazonaws.com/recordings`, where `recordings` is the path where you want recordings to be stored.
   */
  awsS3Url?: string;
  /**
   * `true|false` When set to `true`, all Recordings will be written to the `AwsS3Url` specified above. When set to `false`, all Recordings will be stored in Twilio's cloud.
   */
  awsStorageEnabled?: boolean;
  /**
   * `true|false` When set to `true`, all Recordings will be stored encrypted. Dafault value is `false`
   */
  encryptionEnabled?: boolean;
  /**
   * SID of the Public Key resource `CRxx`
   */
  encryptionKeySid?: string;
  /**
   * Friendly name of the configuration to be shown in the console
   */
  friendlyName: string;
}

interface RecordingSettingsListCreateOptions {
  /**
   * SID of the Stored Credential resource `CRxx`
   */
  awsCredentialsSid?: string;
  /**
   * Identity of the external location where the recordings should be stored. We only support DNS-compliant URLs like `http://<my-bucket>.s3-<aws-region>.amazonaws.com/recordings`, where `recordings` is the path where you want recordings to be stored.
   */
  awsS3Url?: string;
  /**
   * `true|false` When set to `true`, all Recordings will be written to the `AwsS3Url` specified above. When set to `false`, all Recordings will be stored in Twilio's cloud.
   */
  awsStorageEnabled?: boolean;
  /**
   * `true|false` When set to `true`, all Recordings will be stored encrypted. Dafault value is `false`
   */
  encryptionEnabled?: boolean;
  /**
   * SID of the Public Key resource `CRxx`
   */
  encryptionKeySid?: string;
  /**
   * Friendly name of the configuration to be shown in the console
   */
  friendlyName: string;
}

declare class RecordingSettingsPage extends Page<V1, RecordingSettingsPayload, RecordingSettingsResource, RecordingSettingsInstance> {
  constructor(version: V1, response: Response<string>, solution: RecordingSettingsSolution);

  /**
   * Build an instance of RecordingSettingsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: RecordingSettingsPayload): RecordingSettingsInstance;
}

declare class RecordingSettingsInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   */
  constructor(version: V1, payload: RecordingSettingsPayload);

  private _proxy: RecordingSettingsContext;
  /**
   * The Twilio Account SID associated with this item
   */
  accountSid: string;
  /**
   * SID of the Stored Credential resource `CRxx`
   */
  awsCredentialsSid: string;
  /**
   * URL of the S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like `http://<my-bucket>.s3-<aws-region>.amazonaws.com/recordings`, where `recordings` is the path where you want recordings to be stored.
   */
  awsS3Url: string;
  /**
   * `true|false` When set to `true`, all Recordings will be written to the `AwsS3Url` specified above. When set to `false`, all Recordings will be stored in Twilio's cloud.
   */
  awsStorageEnabled: boolean;
  /**
   * create a RecordingSettingsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed RecordingSettingsInstance
   */
  create(opts: RecordingSettingsListCreateOptions): Promise<RecordingSettingsInstance>;
  /**
   * create a RecordingSettingsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: RecordingSettingsListCreateOptions, callback: (error: Error | null, items: RecordingSettingsInstance) => any): void;
  /**
   * `true|false` When set to `true`, all Recordings will be stored encrypted. Dafault value is `false`
   */
  encryptionEnabled: boolean;
  /**
   * SID of the Public Key resource `CRxx`
   */
  encryptionKeySid: string;
  /**
   * fetch a RecordingSettingsInstance
   *
   * @returns Promise that resolves to processed RecordingSettingsInstance
   */
  fetch(): Promise<RecordingSettingsInstance>;
  /**
   * fetch a RecordingSettingsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: RecordingSettingsInstance) => any): void;
  /**
   * Friendly name of the configuration to be shown in the console
   */
  friendlyName: string;
  /**
   * The url
   */
  url: string;
}

declare class RecordingSettingsContext {
  constructor(version: V1);

  /**
   * create a RecordingSettingsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed RecordingSettingsInstance
   */
  create(opts: RecordingSettingsListCreateOptions): Promise<RecordingSettingsInstance>;
  /**
   * create a RecordingSettingsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: RecordingSettingsListCreateOptions, callback: (error: Error | null, items: RecordingSettingsInstance) => any): void;
  /**
   * fetch a RecordingSettingsInstance
   *
   * @returns Promise that resolves to processed RecordingSettingsInstance
   */
  fetch(): Promise<RecordingSettingsInstance>;
  /**
   * fetch a RecordingSettingsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: RecordingSettingsInstance) => any): void;
}

export { RecordingSettingsContext, RecordingSettingsInstance, RecordingSettingsList, RecordingSettingsListCreateOptions, RecordingSettingsListInstance, RecordingSettingsPage, RecordingSettingsPayload, RecordingSettingsResource, RecordingSettingsSolution }
