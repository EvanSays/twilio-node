/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import serialize = require('../../../base/serialize');
import { SerializableClass } from '../../../interfaces';

/**
 * @description Initialize the RecordingList
 *
 * @param version - Version of the resource
 */
declare function RecordingList(version: V1): RecordingListInstance;

interface RecordingResource {
  account_sid: string;
  codec: RecordingCodec;
  container_format: RecordingFormat;
  date_created: Date;
  duration: number;
  grouping_sids: string;
  links: string;
  sid: string;
  size: number;
  source_sid: string;
  status: RecordingStatus;
  track_name: string;
  type: RecordingType;
  url: string;
}

interface RecordingPayload extends RecordingResource, Page.TwilioResponsePayload {
}

interface RecordingSolution {
}

interface RecordingListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): RecordingContext;
  /**
   * Streams RecordingInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: RecordingListInstanceEachOptions, callback?: (item: RecordingInstance, done: (err?: Error) => void) => void);
  /**
   * Constructs a recording
   *
   * @param sid - The Recording Sid that uniquely identifies the Recording to fetch.
   */
  get(sid: string);
  /**
   * Retrieve a single target page of RecordingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists RecordingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: RecordingListInstanceOptions, callback?: function);
  /**
   * Retrieve a single page of RecordingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: RecordingListInstancePageOptions, callback?: function);
}

/**
 * Options to pass to each
 *
 * @property status - Only show Recordings with the given status.
 * @property sourceSid - Only show the Recordings with the given source Sid.
 * @property groupingSid - Only show Recordings that have this GroupingSid.
 * @property dateCreatedAfter - Only show Recordings that started on or after this ISO8601 date-time.
 * @property dateCreatedBefore - Only show Recordings that started before this this ISO8601 date-time.
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 */
export interface RecordingListInstanceEachOptions {
  callback?: (item: RecordingInstance, done: (err?: Error) => void) => void;
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  done?: Function;
  groupingSid?: string|list;
  limit?: number;
  pageSize?: number;
  sourceSid?: string;
  status?: recording.status;
}

/**
 * Options to pass to list
 *
 * @property status - Only show Recordings with the given status.
 * @property sourceSid - Only show the Recordings with the given source Sid.
 * @property groupingSid - Only show Recordings that have this GroupingSid.
 * @property dateCreatedAfter - Only show Recordings that started on or after this ISO8601 date-time.
 * @property dateCreatedBefore - Only show Recordings that started before this this ISO8601 date-time.
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
export interface RecordingListInstanceOptions {
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  groupingSid?: string|list;
  limit?: number;
  pageSize?: number;
  sourceSid?: string;
  status?: recording.status;
}

/**
 * Options to pass to page
 *
 * @property status - Only show Recordings with the given status.
 * @property sourceSid - Only show the Recordings with the given source Sid.
 * @property groupingSid - Only show Recordings that have this GroupingSid.
 * @property dateCreatedAfter - Only show Recordings that started on or after this ISO8601 date-time.
 * @property dateCreatedBefore - Only show Recordings that started before this this ISO8601 date-time.
 * @property pageToken - PageToken provided by the API
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 */
export interface RecordingListInstancePageOptions {
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  groupingSid?: string|list;
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
  sourceSid?: string;
  status?: recording.status;
}


declare class RecordingPage extends Page {
  /**
   * @constructor Twilio.Video.V1.RecordingPage
   * @augments Page
   * @description Initialize the RecordingPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Video.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of RecordingInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class RecordingInstance {
  /**
   * @constructor Twilio.Video.V1.RecordingInstance
   * @description Initialize the RecordingContext
   *
   * @property accountSid - Twilio Account SID.
   * @property status - The status of the Recording.
   * @property dateCreated - Date when the media recording began writing.
   * @property sid - A 34-character string that uniquely identifies this Recording.
   * @property sourceSid - A 34-character string that uniquely identifies the source of this Recording.
   * @property size - Size of the recorded track, in bytes.
   * @property url - The absolute URL for this resource.
   * @property type - Indicates the media type for this recording.
   * @property duration - Duration of the Recording in seconds.
   * @property containerFormat - The file format for this Recording.
   * @property codec - The codec used to encode the track.
   * @property groupingSids - A list of Sids related to this Recording.
   * @property trackName - The name that was given to the source track of this recording.
   * @property links - The links
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The Recording Sid that uniquely identifies the Recording to fetch.
   */
  constructor(version: Twilio.Video.V1, payload: object, sid: sid);

  _proxy?: RecordingContext;
  /**
   * fetch a RecordingInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a RecordingInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the RecordingInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON();
}


declare class RecordingContext {
  /**
   * @constructor Twilio.Video.V1.RecordingContext
   * @description Initialize the RecordingContext
   *
   * @param version - Version of the resource
   * @param sid - The Recording Sid that uniquely identifies the Recording to fetch.
   */
  constructor(version: Twilio.Video.V1, sid: sid);

  /**
   * fetch a RecordingInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a RecordingInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { RecordingContext, RecordingInstance, RecordingList, RecordingListInstance, RecordingPage, RecordingPayload, RecordingResource, RecordingSolution }
