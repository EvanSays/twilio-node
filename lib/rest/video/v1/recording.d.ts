/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import deserialize = require('../../../base/deserialize');
import serialize = require('../../../base/serialize');
import values = require('../../../base/values');



declare class RecordingPage extends Page {
  /**
   * @constructor Twilio.Video.V1.RecordingPage
   * @augments Page
   * @description Initialize the RecordingPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Video.V1, response: object, solution: object);

  /**
   * Build an instance of RecordingInstance
   *
   * @function getInstance
   * @memberof Twilio.Video.V1.RecordingPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}

declare class RecordingInstance {
  /**
   * @constructor Twilio.Video.V1.RecordingInstance
   * @description Initialize the RecordingContext
   *
   * @property accountSid - Twilio Account SID.
   * @property status - The status of the Recording.
   * @property dateCreated - Date when the media recording began writing.
   * @property sid - A 34-character string that uniquely identifies this Recording.
   * @property sourceSid - A 34-character string that uniquely identifies the source of this Recording.
   * @property size - Size of the recorded track, in bytes.
   * @property url - The absolute URL for this resource.
   * @property type - Indicates the media type for this recording.
   * @property duration - Duration of the Recording in seconds.
   * @property containerFormat - The file format for this Recording.
   * @property codec - The codec used to encode the track.
   * @property groupingSids - A list of Sids related to this Recording.
   * @property trackName - The name that was given to the source track of this recording.
   * @property links - The links
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The Recording Sid that uniquely identifies the Recording to fetch.
   */
  constructor(version: Twilio.Video.V1, payload: object, sid: sid);

  _proxy?: RecordingContext;
  /**
   * fetch a RecordingInstance
   *
   * @function fetch
   * @memberof Twilio.Video.V1.RecordingInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a RecordingInstance
   *
   * @function remove
   * @memberof Twilio.Video.V1.RecordingInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the RecordingInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Video.V1.RecordingInstance
   * @instance
   */
  toJSON();
}

declare class RecordingContext {
  /**
   * @constructor Twilio.Video.V1.RecordingContext
   * @description Initialize the RecordingContext
   *
   * @param version - Version of the resource
   * @param sid - The Recording Sid that uniquely identifies the Recording to fetch.
   */
  constructor(version: Twilio.Video.V1, sid: sid);

  /**
   * fetch a RecordingInstance
   *
   * @function fetch
   * @memberof Twilio.Video.V1.RecordingContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a RecordingInstance
   *
   * @function remove
   * @memberof Twilio.Video.V1.RecordingContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { RecordingContext, RecordingInstance, RecordingList, RecordingPage }
