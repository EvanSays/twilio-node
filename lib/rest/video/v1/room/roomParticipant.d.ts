/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import serialize = require('../../../../base/serialize');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { PublishedTrackList } from './roomParticipant/roomParticipantPublishedTrack';
import { SerializableClass } from '../../../../interfaces';
import { SubscribedTrackList } from './roomParticipant/roomParticipantSubscribedTrack';

/**
 * @description Initialize the ParticipantList
 *
 * @param version - Version of the resource
 * @param roomSid - A system-generated 34-character string that uniquely identifies.
 */
declare function ParticipantList(version: V1, roomSid: string): ParticipantListInstance;

interface ParticipantResource {
  account_sid: string;
  date_created: Date;
  date_updated: Date;
  duration: number;
  end_time: Date;
  identity: string;
  links: string;
  room_sid: string;
  sid: string;
  start_time: Date;
  status: ParticipantStatus;
  url: string;
}

interface ParticipantPayload extends ParticipantResource, Page.TwilioResponsePayload {
}

interface ParticipantSolution {
  roomSid?: string;
}

interface ParticipantListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): ParticipantContext;
  /**
   * Streams ParticipantInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Video.V1.RoomContext.ParticipantList
   * @instance
   *
   * @param opts - ...
   * @param callback - Function to process each record
   */
  each(opts?: object, callback?: Function);
  /**
   * Constructs a participant
   *
   * @function get
   * @memberof Twilio.Video.V1.RoomContext.ParticipantList
   * @instance
   *
   * @param sid - The sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Video.V1.RoomContext.ParticipantList
   * @instance
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists ParticipantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Video.V1.RoomContext.ParticipantList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  list(opts?: object, callback?: function);
  /**
   * Retrieve a single page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Video.V1.RoomContext.ParticipantList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  page(opts?: object, callback?: function);
}

/**
 * Options to pass to update
 *
 * @property status - Set to disconnected to remove participant.
 */
export interface UpdateOptions {
  status?: participant.status;
}

/**
 * Options to pass to update
 *
 * @property status - Set to disconnected to remove participant.
 */
export interface UpdateOptions {
  status?: participant.status;
}


declare class ParticipantPage extends Page {
  /**
   * @constructor Twilio.Video.V1.RoomContext.ParticipantPage
   * @augments Page
   * @description Initialize the ParticipantPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Video.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of ParticipantInstance
   *
   * @function getInstance
   * @memberof Twilio.Video.V1.RoomContext.ParticipantPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class ParticipantInstance {
  /**
   * @constructor Twilio.Video.V1.RoomContext.ParticipantInstance
   * @description Initialize the ParticipantContext
   *
   * @property sid - A 34 character string that uniquely identifies this resource.
   * @property roomSid - A system-generated 34-character string that uniquely identifies.
   * @property accountSid - The unique ID of the Account associated with this Room.
   * @property status - A string representing the status of the Participant.
   * @property identity - The unique name identifier that is assigned to this Participant.
   * @property dateCreated - The date that this resource was created, given as a UTC ISO 8601 Timestamp.
   * @property dateUpdated - The date that this resource was last updated, given as a UTC ISO 8601 Timestamp.
   * @property startTime - The time of Participant connected to the Room, given as a UTC ISO 8601 Timestamp.
   * @property endTime - The time of Participant disconnected from the Room, given as a UTC ISO 8601 Timestamp.
   * @property duration - Duration of time in seconds this Participant was connected.
   * @property url - The absolute URL for this resource.
   * @property links - The links
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param roomSid - A system-generated 34-character string that uniquely identifies.
   * @param sid - The sid
   */
  constructor(version: Twilio.Video.V1, payload: object, roomSid: sid, sid: sid_like);

  _proxy?: ParticipantContext;
  /**
   * fetch a ParticipantInstance
   *
   * @function fetch
   * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the publishedTracks
   *
   * @function publishedTracks
   * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance
   * @instance
   */
  publishedTracks();
  /**
   * Access the subscribedTracks
   *
   * @function subscribedTracks
   * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance
   * @instance
   */
  subscribedTracks();
  /**
   * Produce a plain JSON object version of the ParticipantInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance
   * @instance
   */
  toJSON();
  /**
   * update a ParticipantInstance
   *
   * @function update
   * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}


declare class ParticipantContext {
  /**
   * @constructor Twilio.Video.V1.RoomContext.ParticipantContext
   * @description Initialize the ParticipantContext
   *
   * @property publishedTracks - publishedTracks resource
   * @property subscribedTracks - subscribedTracks resource
   *
   * @param version - Version of the resource
   * @param roomSid - The room_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Video.V1, roomSid: sid_like, sid: sid_like);

  /**
   * fetch a ParticipantInstance
   *
   * @function fetch
   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  publishedTracks?: Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList;
  subscribedTracks?: Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList;
  /**
   * update a ParticipantInstance
   *
   * @function update
   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { ParticipantContext, ParticipantInstance, ParticipantList, ParticipantListInstance, ParticipantPage, ParticipantPayload, ParticipantResource, ParticipantSolution }
