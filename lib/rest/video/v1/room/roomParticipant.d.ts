/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { PublishedTrackListInstance } from './roomParticipant/roomParticipantPublishedTrack';
import { SerializableClass } from '../../../../interfaces';
import { SubscribedTrackListInstance } from './roomParticipant/roomParticipantSubscribedTrack';

declare function ParticipantList(version: V1, roomSid: string): ParticipantListInstance

type ParticipantStatus = 'connected'|'disconnected';

interface ParticipantResource {
  /**
   * The unique ID of the [Account](https://www.twilio.com/docs/api/rest/account) associated with this Room.
   */
  account_sid: string;
  /**
   * The date that this resource was created, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  date_created: Date;
  /**
   * The date that this resource was last updated, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  date_updated: Date;
  /**
   * Duration of time in seconds this Participant was `connected`.  Populated only when `disconnected`.
   */
  duration: number;
  /**
   * The time of Participant disconnected from the Room, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  end_time: Date;
  /**
   * The unique name identifier that is assigned to this Participant. Identities are unique within a Room. If a client joins with an existing Identity, the existing client is disconnected.
   */
  identity: string;
  /**
   * The links
   */
  links: string;
  /**
   * A system-generated 34-character string that uniquely identifies. this room
   */
  room_sid: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The time of Participant connected to the Room, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  start_time: Date;
  /**
   * A string representing the status of the Participant. If can be one of `connected` or `disconnected`.
   */
  status: ParticipantStatus;
  /**
   * The absolute URL for this resource.
   */
  url: string;
}

interface ParticipantPayload extends ParticipantResource, Page.TwilioResponsePayload {
}

interface ParticipantSolution {
  roomSid: string;
}

interface ParticipantListEachOptions extends ListEachOptions<ParticipantInstance> {
  /**
   * Only show Participants that started after this date, given as an [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  dateCreatedAfter?: Date;
  /**
   * Only show Participants that started before this date, given as an [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  dateCreatedBefore?: Date;
  /**
   * Only show Participants that connected to the Room using the provided Identity.
   */
  identity?: string;
  /**
   * Only show Participants with the given Status.  For `in-progress` Rooms the default Status is `connected`, for `completed` Rooms only `disconnected` Participants are returned.
   */
  status?: ParticipantStatus;
}

interface ParticipantListOptions extends ListOptions<ParticipantInstance> {
  /**
   * Only show Participants that started after this date, given as an [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  dateCreatedAfter?: Date;
  /**
   * Only show Participants that started before this date, given as an [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  dateCreatedBefore?: Date;
  /**
   * Only show Participants that connected to the Room using the provided Identity.
   */
  identity?: string;
  /**
   * Only show Participants with the given Status.  For `in-progress` Rooms the default Status is `connected`, for `completed` Rooms only `disconnected` Participants are returned.
   */
  status?: ParticipantStatus;
}

interface ParticipantListPageOptions extends PageOptions<ParticipantPage> {
  /**
   * Only show Participants that started after this date, given as an [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  dateCreatedAfter?: Date;
  /**
   * Only show Participants that started before this date, given as an [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  dateCreatedBefore?: Date;
  /**
   * Only show Participants that connected to the Room using the provided Identity.
   */
  identity?: string;
  /**
   * Only show Participants with the given Status.  For `in-progress` Rooms the default Status is `connected`, for `completed` Rooms only `disconnected` Participants are returned.
   */
  status?: ParticipantStatus;
}

interface ParticipantListInstance {
  /**
   * Gets context of a single Participant resource
   *
   * @param sid - The sid
   */
  (sid: string): ParticipantContext;
  /**
   * Streams ParticipantInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: ParticipantListEachOptions): void;
  /**
   * Streams ParticipantInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: ParticipantInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Participant resource
   *
   * @param sid - The sid
   */
  get(sid: string): ParticipantContext;
  /**
   * Retrieve a single target page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<ParticipantPage>;
  /**
   * Retrieve a single target page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: ParticipantPage) => any): void;
  /**
   * Lists ParticipantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: ParticipantListOptions): Promise<ParticipantInstance[]>;
  /**
   * Lists ParticipantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: ParticipantListOptions, callback: (error: Error | null, items: ParticipantInstance[]) => any): void;
  /**
   * Lists ParticipantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: ParticipantInstance[]) => any): void;
  /**
   * Retrieve a single page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: ParticipantListPageOptions): Promise<ParticipantPage>;
  /**
   * Retrieve a single page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: ParticipantListPageOptions, callback: (error: Error | null, items: ParticipantPage) => any): void;
  /**
   * Retrieve a single page of ParticipantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: ParticipantPage) => any): void;
}

interface ParticipantListFetchOptions {
  /**
   * Set to `disconnected` to remove participant.
   */
  status?: ParticipantStatus;
}

interface ParticipantListFetchOptions {
  /**
   * Set to `disconnected` to remove participant.
   */
  status?: ParticipantStatus;
}

declare class ParticipantPage extends Page<V1, ParticipantPayload, ParticipantResource, ParticipantInstance> {
  constructor(version: V1, response: Response<string>, solution: ParticipantSolution);

  /**
   * Build an instance of ParticipantInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ParticipantPayload): ParticipantInstance;
}

declare class ParticipantInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param roomSid - The room_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: ParticipantPayload, roomSid: string, sid: string);

  private _proxy: ParticipantContext;
  /**
   * The unique ID of the [Account](https://www.twilio.com/docs/api/rest/account) associated with this Room.
   */
  accountSid: string;
  /**
   * The date that this resource was created, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  dateUpdated: Date;
  /**
   * Duration of time in seconds this Participant was `connected`.  Populated only when `disconnected`.
   */
  duration: number;
  /**
   * The time of Participant disconnected from the Room, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  endTime: Date;
  /**
   * fetch a ParticipantInstance
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  fetch(): Promise<ParticipantInstance>;
  /**
   * fetch a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * The unique name identifier that is assigned to this Participant. Identities are unique within a Room. If a client joins with an existing Identity, the existing client is disconnected.
   */
  identity: string;
  /**
   * The links
   */
  links: string;
  publishedTracks(): PublishedTrackListInstance;
  /**
   * A system-generated 34-character string that uniquely identifies. this room
   */
  roomSid: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The time of Participant connected to the Room, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  startTime: Date;
  /**
   * A string representing the status of the Participant. If can be one of `connected` or `disconnected`.
   */
  status: ParticipantStatus;
  subscribedTracks(): SubscribedTrackListInstance;
  /**
   * update a ParticipantInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  update(opts?: ParticipantListFetchOptions): Promise<ParticipantInstance>;
  /**
   * update a ParticipantInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ParticipantListFetchOptions, callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * update a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * The absolute URL for this resource.
   */
  url: string;
}

declare class ParticipantContext {
  constructor(version: V1, roomSid: string, sid: string);

  /**
   * fetch a ParticipantInstance
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  fetch(): Promise<ParticipantInstance>;
  /**
   * fetch a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ParticipantInstance) => any): void;
  publishedTracks: PublishedTrackListInstance;
  subscribedTracks: SubscribedTrackListInstance;
  /**
   * update a ParticipantInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ParticipantInstance
   */
  update(opts?: ParticipantListFetchOptions): Promise<ParticipantInstance>;
  /**
   * update a ParticipantInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ParticipantListFetchOptions, callback: (error: Error | null, items: ParticipantInstance) => any): void;
  /**
   * update a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ParticipantInstance) => any): void;
}

export { ParticipantContext, ParticipantInstance, ParticipantList, ParticipantListEachOptions, ParticipantListFetchOptions, ParticipantListInstance, ParticipantListOptions, ParticipantListPageOptions, ParticipantPage, ParticipantPayload, ParticipantResource, ParticipantSolution, ParticipantStatus }
