/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';
import { SerializableClass } from '../../../../../interfaces';

declare function PublishedTrackList(version: V1, roomSid: string, participantSid: string): PublishedTrackListInstance

type PublishedTrackKind = 'audio'|'video'|'data';

interface PublishedTrackResource {
  /**
   * The date that this resource was created, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  date_created: Date;
  /**
   * The date that this resource was last updated, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  date_updated: Date;
  /**
   * Specifies whether the Track is enabled or not. Boolean.
   */
  enabled: boolean;
  /**
   * Specifies whether Track represents `audio`, `video` or `data`
   */
  kind: PublishedTrackKind;
  /**
   * Track name. Limited to 128 characters, must be unique in a Participant’s PublishedTracks.
   */
  name: string;
  /**
   * Unique Participant identifier that publishes this Track.
   */
  participant_sid: string;
  /**
   * Unique Room identifier where this Track is published.
   */
  room_sid: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The absolute URL for this resource.
   */
  url: string;
}

interface PublishedTrackPayload extends PublishedTrackResource, Page.TwilioResponsePayload {
}

interface PublishedTrackSolution {
  participantSid: string;
  roomSid: string;
}

interface PublishedTrackListEachOptions extends ListEachOptions<PublishedTrackInstance> {
}

interface PublishedTrackListOptions extends ListOptions<PublishedTrackInstance> {
}

interface PublishedTrackListPageOptions extends PageOptions<PublishedTrackPage> {
}

interface PublishedTrackListInstance {
  /**
   * Gets context of a single PublishedTrack resource
   *
   * @param sid - A 34 character string that uniquely identifies this resource.
   */
  (sid: string): PublishedTrackContext;
  /**
   * Streams PublishedTrackInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: PublishedTrackListEachOptions): void;
  /**
   * Streams PublishedTrackInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: PublishedTrackInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single PublishedTrack resource
   *
   * @param sid - A 34 character string that uniquely identifies this resource.
   */
  get(sid: string): PublishedTrackContext;
  /**
   * Retrieve a single target page of PublishedTrackInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<PublishedTrackPage>;
  /**
   * Retrieve a single target page of PublishedTrackInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: PublishedTrackPage) => any): void;
  /**
   * Lists PublishedTrackInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: PublishedTrackListOptions): Promise<PublishedTrackInstance[]>;
  /**
   * Lists PublishedTrackInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: PublishedTrackListOptions, callback: (error: Error | null, items: PublishedTrackInstance[]) => any): void;
  /**
   * Lists PublishedTrackInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: PublishedTrackInstance[]) => any): void;
  /**
   * Retrieve a single page of PublishedTrackInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: PublishedTrackListPageOptions): Promise<PublishedTrackPage>;
  /**
   * Retrieve a single page of PublishedTrackInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: PublishedTrackListPageOptions, callback: (error: Error | null, items: PublishedTrackPage) => any): void;
  /**
   * Retrieve a single page of PublishedTrackInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: PublishedTrackPage) => any): void;
}

declare class PublishedTrackPage extends Page<V1, PublishedTrackPayload, PublishedTrackResource, PublishedTrackInstance> {
  constructor(version: V1, response: Response<string>, solution: PublishedTrackSolution);

  /**
   * Build an instance of PublishedTrackInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: PublishedTrackPayload): PublishedTrackInstance;
}

declare class PublishedTrackInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param roomSid - Unique Room identifier where this Track is published.
   * @param participantSid - Unique Participant identifier that publishes this Track.
   * @param sid - A 34 character string that uniquely identifies this resource.
   */
  constructor(version: V1, payload: PublishedTrackPayload, roomSid: string, participantSid: string, sid: string);

  private _proxy: PublishedTrackContext;
  /**
   * The date that this resource was created, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated, given as a [UTC ISO 8601 Timestamp](http://en.wikipedia.org/wiki/ISO_8601#UTC).
   */
  dateUpdated: Date;
  /**
   * Specifies whether the Track is enabled or not. Boolean.
   */
  enabled: boolean;
  /**
   * fetch a PublishedTrackInstance
   *
   * @returns Promise that resolves to processed PublishedTrackInstance
   */
  fetch(): Promise<PublishedTrackInstance>;
  /**
   * fetch a PublishedTrackInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: PublishedTrackInstance) => any): void;
  /**
   * Specifies whether Track represents `audio`, `video` or `data`
   */
  kind: PublishedTrackKind;
  /**
   * Track name. Limited to 128 characters, must be unique in a Participant’s PublishedTracks.
   */
  name: string;
  /**
   * Unique Participant identifier that publishes this Track.
   */
  participantSid: string;
  /**
   * Unique Room identifier where this Track is published.
   */
  roomSid: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The absolute URL for this resource.
   */
  url: string;
}

declare class PublishedTrackContext {
  constructor(version: V1, roomSid: string, participantSid: string, sid: string);

  /**
   * fetch a PublishedTrackInstance
   *
   * @returns Promise that resolves to processed PublishedTrackInstance
   */
  fetch(): Promise<PublishedTrackInstance>;
  /**
   * fetch a PublishedTrackInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: PublishedTrackInstance) => any): void;
}

export { PublishedTrackContext, PublishedTrackInstance, PublishedTrackKind, PublishedTrackList, PublishedTrackListEachOptions, PublishedTrackListInstance, PublishedTrackListOptions, PublishedTrackListPageOptions, PublishedTrackPage, PublishedTrackPayload, PublishedTrackResource, PublishedTrackSolution }
