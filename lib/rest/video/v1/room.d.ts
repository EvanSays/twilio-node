/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import serialize = require('../../../base/serialize');
import { ParticipantList } from './room/roomParticipant';
import { RoomRecordingList } from './room/recording';
import { SerializableClass } from '../../../interfaces';

/**
 * @description Initialize the RoomList
 *
 * @param version - Version of the resource
 */
declare function RoomList(version: V1): RoomListInstance;

interface RoomResource {
  account_sid: string;
  date_created: Date;
  date_updated: Date;
  duration: number;
  enable_turn: boolean;
  end_time: Date;
  links: string;
  max_participants: number;
  media_region: string;
  record_participants_on_connect: boolean;
  sid: string;
  status: RoomRoomStatus;
  status_callback: string;
  status_callback_method: string;
  type: RoomRoomType;
  unique_name: string;
  url: string;
  video_codecs: RoomVideoCodec;
}

interface RoomPayload extends RoomResource, Page.TwilioResponsePayload {
}

interface RoomSolution {
}

interface RoomListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): RoomContext;
  /**
   * create a RoomInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts?: RoomListInstanceCreateOptions, callback?: function);
  /**
   * Streams RoomInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: RoomListInstanceEachOptions, callback?: Function);
  /**
   * Constructs a room
   *
   * @param sid - The sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of RoomInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists RoomInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: RoomListInstanceOptions, callback?: function);
  /**
   * Retrieve a single page of RoomInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: RoomListInstancePageOptions, callback?: function);
}

/**
 * Options to pass to update
 *
 * @property status - Set to completed to end the Room.
 */
export interface RoomInstanceUpdateOptions {
  status: room.room_status;
}

/**
 * Options to pass to update
 *
 * @property status - Set to completed to end the Room.
 */
export interface RoomContextUpdateOptions {
  status: room.room_status;
}

/**
 * Options to pass to create
 *
 * @property enableTurn - Use Twilio Network Traversal for TURN service.
 * @property type - Type of room, either peer-to-peer or group.
 * @property uniqueName - Name of the Room.
 * @property statusCallback - A URL that Twilio sends asynchronous webhook requests to on every room event.
 * @property statusCallbackMethod - HTTP method Twilio should use when requesting the above URL.
 * @property maxParticipants - Maximum number of Participants in the Room.
 * @property recordParticipantsOnConnect - Start Participant recording when connected.
 * @property videoCodecs - An array of video codecs supported when publishing a Track in the Room.
 * @property mediaRegion - Region for the media server in Group Rooms.
 */
export interface RoomListInstanceCreateOptions {
  enableTurn?: boolean;
  maxParticipants?: number;
  mediaRegion?: string;
  recordParticipantsOnConnect?: boolean;
  statusCallback?: string;
  statusCallbackMethod?: string;
  type?: room.room_type;
  uniqueName?: string;
  videoCodecs?: room.video_codec|list;
}

/**
 * Options to pass to each
 *
 * @property status - Only show Rooms with the given status.
 * @property uniqueName - Only show Rooms with the provided Name.
 * @property dateCreatedAfter - Only show Rooms that started on or after this date, given as YYYY-MM-DD.
 * @property dateCreatedBefore - Only show Rooms that started before this date, given as YYYY-MM-DD.
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 */
export interface RoomListInstanceEachOptions {
  callback?: Function;
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  done?: Function;
  limit?: number;
  pageSize?: number;
  status?: room.room_status;
  uniqueName?: string;
}

/**
 * Options to pass to list
 *
 * @property status - Only show Rooms with the given status.
 * @property uniqueName - Only show Rooms with the provided Name.
 * @property dateCreatedAfter - Only show Rooms that started on or after this date, given as YYYY-MM-DD.
 * @property dateCreatedBefore - Only show Rooms that started before this date, given as YYYY-MM-DD.
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
export interface RoomListInstanceOptions {
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  limit?: number;
  pageSize?: number;
  status?: room.room_status;
  uniqueName?: string;
}

/**
 * Options to pass to page
 *
 * @property status - Only show Rooms with the given status.
 * @property uniqueName - Only show Rooms with the provided Name.
 * @property dateCreatedAfter - Only show Rooms that started on or after this date, given as YYYY-MM-DD.
 * @property dateCreatedBefore - Only show Rooms that started before this date, given as YYYY-MM-DD.
 * @property pageToken - PageToken provided by the API
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 */
export interface RoomListInstancePageOptions {
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
  status?: room.room_status;
  uniqueName?: string;
}


declare class RoomPage extends Page {
  /**
   * @constructor Twilio.Video.V1.RoomPage
   * @augments Page
   * @description Initialize the RoomPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Video.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of RoomInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class RoomInstance {
  /**
   * @constructor Twilio.Video.V1.RoomInstance
   * @description Initialize the RoomContext
   *
   * @property sid - A system-generated 34-character string that uniquely identifies this resource.
   * @property status - A string representing the status of the Room.
   * @property dateCreated - The date that this resource was created, given as a UTC ISO 8601 Timestamp.
   * @property dateUpdated - The date that this resource was last updated, given as a UTC ISO 8601 Timestamp.
   * @property accountSid - The unique ID of the Account associated with this Room.
   * @property enableTurn - Enable Twilio's Network Traversal TURN service.
   * @property uniqueName - A developer-supplied Name of the Room.
   * @property statusCallback - A URL that Twilio sends asynchronous webhook requests to on every Room event.
   * @property statusCallbackMethod - HTTP method Twilio should use when requesting the above URL.
   * @property endTime - The end time of the Room, given as a UTC ISO 8601 Timestamp.
   * @property duration - The duration of the Room in seconds.
   * @property type - Type of Room, either peer-to-peer or group.
   * @property maxParticipants - Maximum number of concurrent Participants allowed in the Room.
   * @property recordParticipantsOnConnect - Start recording when Participants connect.
   * @property videoCodecs - The video_codecs
   * @property mediaRegion - Region for the media server in Group Rooms.
   * @property url - The absolute URL for this resource.
   * @property links - The links
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: Twilio.Video.V1, payload: object, sid: sid_like);

  _proxy?: RoomContext;
  /**
   * fetch a RoomInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the participants
   */
  participants();
  /**
   * Access the recordings
   */
  recordings();
  /**
   * Produce a plain JSON object version of the RoomInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON();
  /**
   * update a RoomInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: RoomInstanceUpdateOptions, callback?: function);
}


declare class RoomContext {
  /**
   * @constructor Twilio.Video.V1.RoomContext
   * @description Initialize the RoomContext
   *
   * @property recordings - recordings resource
   * @property participants - participants resource
   *
   * @param version - Version of the resource
   * @param sid - The sid
   */
  constructor(version: Twilio.Video.V1, sid: sid_like);

  /**
   * fetch a RoomInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  participants?: Twilio.Video.V1.RoomContext.ParticipantList;
  recordings?: Twilio.Video.V1.RoomContext.RoomRecordingList;
  /**
   * update a RoomInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: RoomContextUpdateOptions, callback?: function);
}

export { RoomContext, RoomInstance, RoomList, RoomListInstance, RoomPage, RoomPayload, RoomResource, RoomSolution }
