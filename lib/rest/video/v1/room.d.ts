/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import serialize = require('../../../base/serialize');
import { ParticipantList } from './room/roomParticipant';
import { RoomRecordingList } from './room/recording';
import { SerializableClass } from '../../../interfaces';

/**
 * @description Initialize the RoomList
 *
 * @param version - Version of the resource
 */
declare function RoomList(version: V1): RoomListInstance;

interface RoomResource {
  account_sid: string;
  date_created: Date;
  date_updated: Date;
  duration: number;
  enable_turn: boolean;
  end_time: Date;
  links: string;
  max_participants: number;
  media_region: string;
  record_participants_on_connect: boolean;
  sid: string;
  status: RoomRoomStatus;
  status_callback: string;
  status_callback_method: string;
  type: RoomRoomType;
  unique_name: string;
  url: string;
  video_codecs: RoomVideoCodec;
}

interface RoomPayload extends RoomResource, Page.TwilioResponsePayload {
}

interface RoomSolution {
}

interface RoomListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): RoomContext;
  /**
   * create a RoomInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts?: RoomListInstanceCreateOptions, callback?: (error: Error | null, items: RoomListInstance) => any): Promise<RoomInstance>;
  /**
   * Streams RoomInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: RoomListInstanceEachOptions, callback?: (item: RoomInstance, done: (err?: Error) => void) => void): void;
  /**
   * Constructs a room
   *
   * @param sid - The sid
   */
  get(sid: string): RoomContext;
  /**
   * Retrieve a single target page of RoomInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: RoomPage) => any): Promise<RoomPage>;
  /**
   * Lists RoomInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: RoomListInstanceOptions, callback?: (error: Error | null, items: RoomInstance[]) => any): Promise<RoomInstance[]>;
  /**
   * Retrieve a single page of RoomInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: RoomListInstancePageOptions, callback?: (error: Error | null, items: RoomPage) => any): Promise<RoomPage>;
}

/**
 * Options to pass to update
 *
 * @property status - Set to completed to end the Room.
 */
interface RoomInstanceUpdateOptions {
  status: room.room_status;
}

/**
 * Options to pass to update
 *
 * @property status - Set to completed to end the Room.
 */
interface RoomInstanceUpdateOptions {
  status: room.room_status;
}


declare class RoomPage extends Page<V1, RoomPayload, RoomResource, RoomInstance> {
  /**
   * Initialize the RoomPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: RoomSolution);

  /**
   * Build an instance of RoomInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: RoomPayload): RoomInstance;
}


declare class RoomInstance extends SerializableClass {
  /**
   * Initialize the RoomContext
   *
   * @property sid - A system-generated 34-character string that uniquely identifies this resource.
   * @property status - A string representing the status of the Room.
   * @property dateCreated - The date that this resource was created, given as a UTC ISO 8601 Timestamp.
   * @property dateUpdated - The date that this resource was last updated, given as a UTC ISO 8601 Timestamp.
   * @property accountSid - The unique ID of the Account associated with this Room.
   * @property enableTurn - Enable Twilio's Network Traversal TURN service.
   * @property uniqueName - A developer-supplied Name of the Room.
   * @property statusCallback - A URL that Twilio sends asynchronous webhook requests to on every Room event.
   * @property statusCallbackMethod - HTTP method Twilio should use when requesting the above URL.
   * @property endTime - The end time of the Room, given as a UTC ISO 8601 Timestamp.
   * @property duration - The duration of the Room in seconds.
   * @property type - Type of Room, either peer-to-peer or group.
   * @property maxParticipants - Maximum number of concurrent Participants allowed in the Room.
   * @property recordParticipantsOnConnect - Start recording when Participants connect.
   * @property videoCodecs - The video_codecs
   * @property mediaRegion - Region for the media server in Group Rooms.
   * @property url - The absolute URL for this resource.
   * @property links - The links
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: V1, payload: RoomPayload, sid: string);

  private _proxy: RoomContext;
  accountSid: string;
  dateCreated: Date;
  dateUpdated: Date;
  duration: number;
  enableTurn: boolean;
  endTime: Date;
  /**
   * fetch a RoomInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: RoomInstance) => any): void;
  links: string;
  maxParticipants: number;
  mediaRegion: string;
  /**
   * Access the participants
   */
  participants();
  recordParticipantsOnConnect: boolean;
  /**
   * Access the recordings
   */
  recordings();
  sid: string;
  status: room.room_status;
  statusCallback: string;
  statusCallbackMethod: string;
  type: room.room_type;
  uniqueName: string;
  /**
   * update a RoomInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: RoomInstanceUpdateOptions, callback?: (error: Error | null, items: RoomInstance) => any): void;
  url: string;
  videoCodecs: room.video_codec;
}


declare class RoomContext {
  /**
   * Initialize the RoomContext
   *
   * @property recordings - recordings resource
   * @property participants - participants resource
   *
   * @param version - Version of the resource
   * @param sid - The sid
   */
  constructor(version: V1, sid: string);

  /**
   * fetch a RoomInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: RoomInstance) => any): void;
  participants?: Twilio.Video.V1.RoomContext.ParticipantList;
  recordings?: Twilio.Video.V1.RoomContext.RoomRecordingList;
  /**
   * update a RoomInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: RoomInstanceUpdateOptions, callback?: (error: Error | null, items: RoomInstance) => any): void;
}

export { RoomContext, RoomInstance, RoomList, RoomListInstance, RoomListInstanceCreateOptions, RoomListInstanceEachOptions, RoomListInstanceOptions, RoomListInstancePageOptions, RoomPage, RoomPayload, RoomResource, RoomSolution }
