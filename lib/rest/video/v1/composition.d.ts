/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import serialize = require('../../../base/serialize');
import { SerializableClass } from '../../../interfaces';

/**
 * @description Initialize the CompositionList
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param version - Version of the resource
 */
declare function CompositionList(version: V1): CompositionListInstance;

interface CompositionResource {
  account_sid: string;
  audio_sources: string;
  audio_sources_excluded: string;
  bitrate: number;
  date_completed: string;
  date_created: Date;
  date_deleted: string;
  duration: number;
  format: CompositionFormat;
  links: string;
  resolution: string;
  room_sid: string;
  sid: string;
  size: number;
  status: CompositionStatus;
  trim: boolean;
  url: string;
  video_layout: string;
}

interface CompositionPayload extends CompositionResource, Page.TwilioResponsePayload {
}

interface CompositionSolution {
}

interface CompositionListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): CompositionContext;
  /**
   * create a CompositionInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts?: CompositionListInstanceCreateOptions, callback?: function);
  /**
   * Streams CompositionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: CompositionListInstanceEachOptions, callback?: (item: CompositionInstance, done: (err?: Error) => void) => void);
  /**
   * Constructs a composition
   *
   * @param sid - The Composition Sid that uniquely identifies the Composition to fetch.
   */
  get(sid: string);
  /**
   * Retrieve a single target page of CompositionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists CompositionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: CompositionListInstanceOptions, callback?: function);
  /**
   * Retrieve a single page of CompositionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: CompositionListInstancePageOptions, callback?: function);
}

/**
 * Options to pass to each
 *
 * @property status - Only show Compositions with the given status.
 * @property dateCreatedAfter - Only show Compositions that started on or after this ISO8601 date-time.
 * @property dateCreatedBefore - Only show Compositions that started before this this ISO8601 date-time.
 * @property roomSid - Only show Compositions with the given Room SID.
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 */
export interface CompositionListInstanceEachOptions {
  callback?: (item: CompositionInstance, done: (err?: Error) => void) => void;
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  done?: Function;
  limit?: number;
  pageSize?: number;
  roomSid?: string;
  status?: composition.status;
}

/**
 * Options to pass to list
 *
 * @property status - Only show Compositions with the given status.
 * @property dateCreatedAfter - Only show Compositions that started on or after this ISO8601 date-time.
 * @property dateCreatedBefore - Only show Compositions that started before this this ISO8601 date-time.
 * @property roomSid - Only show Compositions with the given Room SID.
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
export interface CompositionListInstanceOptions {
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  limit?: number;
  pageSize?: number;
  roomSid?: string;
  status?: composition.status;
}

/**
 * Options to pass to page
 *
 * @property status - Only show Compositions with the given status.
 * @property dateCreatedAfter - Only show Compositions that started on or after this ISO8601 date-time.
 * @property dateCreatedBefore - Only show Compositions that started before this this ISO8601 date-time.
 * @property roomSid - Only show Compositions with the given Room SID.
 * @property pageToken - PageToken provided by the API
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 */
export interface CompositionListInstancePageOptions {
  dateCreatedAfter?: Date;
  dateCreatedBefore?: Date;
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
  roomSid?: string;
  status?: composition.status;
}

/**
 * Options to pass to create
 *
 * @property roomSid - Twilio Room SID.
 * @property videoLayout - The JSON video layout description.
 * @property audioSources - A list of audio sources related to this Composition.
 * @property audioSourcesExcluded - A list of audio sources excluded related to this Composition.
 * @property resolution - Pixel resolution of the composed video.
 * @property format - Container format of the Composition media file. Any of the following: `mp4`, `webm`.
 * @property statusCallback - A URL that Twilio sends asynchronous webhook requests to on every composition event.
 * @property statusCallbackMethod - HTTP method Twilio should use when requesting the above URL.
 * @property trim - Boolean flag for clipping intervals that have no media.
 */
export interface CompositionListInstanceCreateOptions {
  audioSources?: string|list;
  audioSourcesExcluded?: string|list;
  format?: composition.format;
  resolution?: string;
  roomSid?: string;
  statusCallback?: string;
  statusCallbackMethod?: string;
  trim?: boolean;
  videoLayout?: string;
}


declare class CompositionPage extends Page {
  /**
   * @constructor Twilio.Video.V1.CompositionPage
   * @augments Page
   * @description Initialize the CompositionPage
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Video.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of CompositionInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class CompositionInstance {
  /**
   * @constructor Twilio.Video.V1.CompositionInstance
   * @description Initialize the CompositionContext
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @property accountSid - Twilio Account SID.
   * @property status - The status of the Composition.
   * @property dateCreated - Date when the Composition Resource was created.
   * @property dateCompleted - Date when the media processing task finished.
   * @property dateDeleted - Date when the Composition Resource generated media was deleted.
   * @property sid - A 34-character string that uniquely identifies this Composition.
   * @property roomSid - A 34-character string that uniquely identifies the source of this Composition.
   * @property audioSources - A list of audio sources related to this Composition.
   * @property audioSourcesExcluded - A list of audio sources excluded related to this Composition.
   * @property videoLayout - The JSON video layout description.
   * @property resolution - Pixel resolution of the composed video.
   * @property trim - Boolean flag for clipping intervals that have no media.
   * @property format - The file format for this Composition.
   * @property bitrate - The bitrate
   * @property size - Size of the Composed media file expressed in bytes.
   * @property duration - Duration of the Composed media in seconds.
   * @property url - The absolute URL for this resource.
   * @property links - JSON object with the URL where the media file can be fetched.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The Composition Sid that uniquely identifies the Composition to fetch.
   */
  constructor(version: Twilio.Video.V1, payload: object, sid: sid);

  _proxy?: CompositionContext;
  /**
   * fetch a CompositionInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a CompositionInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the CompositionInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON();
}


declare class CompositionContext {
  /**
   * @constructor Twilio.Video.V1.CompositionContext
   * @description Initialize the CompositionContext
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param sid - The Composition Sid that uniquely identifies the Composition to fetch.
   */
  constructor(version: Twilio.Video.V1, sid: sid);

  /**
   * fetch a CompositionInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a CompositionInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { CompositionContext, CompositionInstance, CompositionList, CompositionListInstance, CompositionPage, CompositionPayload, CompositionResource, CompositionSolution }
