/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import serialize = require('../../../../base/serialize');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the DataSessionList
 *
 * @param version - Version of the resource
 * @param simSid - The unique id of the SIM resource that this Data Session is for.
 */
declare function DataSessionList(version: V1, simSid: string): DataSessionListInstance;

interface DataSessionResource {
  account_sid: string;
  cell_id: string;
  cell_location_estimate: string;
  end: Date;
  last_updated: Date;
  operator_country: string;
  operator_mcc: string;
  operator_mnc: string;
  operator_name: string;
  packets_downloaded: number;
  packets_uploaded: number;
  radio_link: string;
  sid: string;
  sim_sid: string;
  start: Date;
}

interface DataSessionPayload extends DataSessionResource, Page.TwilioResponsePayload {
}

interface DataSessionSolution {
  simSid?: string;
}

interface DataSessionListInstance {
  /**
   * @param sid - sid of instance
   */
  DataSessionListInstance(sid: string);
  /**
   * Streams DataSessionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Wireless.V1.SimContext.DataSessionList
   * @instance
   *
   * @param opts - ...
   * @param callback - Function to process each record
   */
  each(opts?: object, callback?: Function);
  /**
   * Retrieve a single target page of DataSessionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Wireless.V1.SimContext.DataSessionList
   * @instance
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists DataSessionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Wireless.V1.SimContext.DataSessionList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  list(opts?: object, callback?: function);
  /**
   * Retrieve a single page of DataSessionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Wireless.V1.SimContext.DataSessionList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  page(opts?: object, callback?: function);
}


declare class DataSessionPage extends Page {
  /**
   * @constructor Twilio.Wireless.V1.SimContext.DataSessionPage
   * @augments Page
   * @description Initialize the DataSessionPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Wireless.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of DataSessionInstance
   *
   * @function getInstance
   * @memberof Twilio.Wireless.V1.SimContext.DataSessionPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class DataSessionInstance {
  /**
   * @constructor Twilio.Wireless.V1.SimContext.DataSessionInstance
   * @description Initialize the DataSessionContext
   *
   * @property sid - The unique id of the Data Session resource that this Data Record is for.
   * @property simSid - The unique id of the SIM resource that this Data Session is for.
   * @property accountSid - The unique id of the Account that the SIM belongs to.
   * @property radioLink - The generation of wireless technology that the device was attached to the cellular tower using.
   * @property operatorMcc - The 'mobile country code' is the unique id of the home country where the Data Session took place.
   * @property operatorMnc - The 'mobile network code' is the unique id specific to the mobile operator network where the Data Session took place.
   * @property operatorCountry - The three letter country code representing where the device's Data Session took place.
   * @property operatorName - The friendly name of the mobile operator network that the SIM-connected device is attached to.
   * @property cellId - The unique id of the cellular tower that the device was attached to at the moment when the Data Session was last updated.
   * @property cellLocationEstimate - An object representing the estimated location where the device's Data Session took place.
   * @property packetsUploaded - The number of packets uploaded by the device between the start time and when the Data Session was last updated.
   * @property packetsDownloaded - The number of packets downloaded by the device between the start time and when the Data Session was last updated.
   * @property lastUpdated - The date that this resource was last updated, given as GMT in ISO 8601 format.
   * @property start - The date that this Data Session started, given as GMT in ISO 8601 format.
   * @property end - The date that this record ended, given as GMT in ISO 8601 format.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param simSid - The unique id of the SIM resource that this Data Session is for.
   */
  constructor(version: Twilio.Wireless.V1, payload: object, simSid: sid_like);

  /**
   * Produce a plain JSON object version of the DataSessionInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Wireless.V1.SimContext.DataSessionInstance
   * @instance
   */
  toJSON();
}

export { DataSessionInstance, DataSessionList, DataSessionListInstance, DataSessionPage, DataSessionPayload, DataSessionResource, DataSessionSolution }
