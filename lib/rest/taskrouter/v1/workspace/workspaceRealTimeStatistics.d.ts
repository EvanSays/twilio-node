/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { SerializableClass } from '../../../../interfaces';

declare function WorkspaceRealTimeStatisticsList(version: V1, workspaceSid: string): WorkspaceRealTimeStatisticsListInstance

interface WorkspaceRealTimeStatisticsResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * A breakdown of Workers by Activity (for example: Idle : 0, Busy: 5, Reserved = 0, Offline = 2)
   */
  activity_statistics: string;
  /**
   * The age of the longest waiting Task
   */
  longest_task_waiting_age: number;
  /**
   * The tasks_by_priority
   */
  tasks_by_priority: string;
  /**
   * The Tasks broken down by status (for example: pending: 1, reserved = 3, assigned = 2, completed = 5)
   */
  tasks_by_status: string;
  /**
   * The total number of Tasks
   */
  total_tasks: number;
  /**
   * The total number of Workers in the workspace
   */
  total_workers: number;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface WorkspaceRealTimeStatisticsPayload extends WorkspaceRealTimeStatisticsResource, Page.TwilioResponsePayload {
}

interface WorkspaceRealTimeStatisticsSolution {
  workspaceSid: string;
}

interface WorkspaceRealTimeStatisticsListInstance {
  /**
   * Gets context of a single WorkspaceRealTimeStatistics resource
   */
  (): WorkspaceRealTimeStatisticsContext;
  /**
   * Gets context of a single WorkspaceRealTimeStatistics resource
   */
  get(): WorkspaceRealTimeStatisticsContext;
}

interface WorkspaceRealTimeStatisticsListFetchOptions {
  /**
   * Filter real-time and cumulative statistics by TaskChannel. Takes in a Unique Name ("voice", "sms", "default", etc.) or a TaskChannelSid.
   */
  taskChannel?: string;
}

interface WorkspaceRealTimeStatisticsListFetchOptions {
  /**
   * Filter real-time and cumulative statistics by TaskChannel. Takes in a Unique Name ("voice", "sms", "default", etc.) or a TaskChannelSid.
   */
  taskChannel?: string;
}

declare class WorkspaceRealTimeStatisticsPage extends Page<V1, WorkspaceRealTimeStatisticsPayload, WorkspaceRealTimeStatisticsResource, WorkspaceRealTimeStatisticsInstance> {
  constructor(version: V1, response: Response<string>, solution: WorkspaceRealTimeStatisticsSolution);

  /**
   * Build an instance of WorkspaceRealTimeStatisticsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: WorkspaceRealTimeStatisticsPayload): WorkspaceRealTimeStatisticsInstance;
}

declare class WorkspaceRealTimeStatisticsInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   */
  constructor(version: V1, payload: WorkspaceRealTimeStatisticsPayload, workspaceSid: string);

  private _proxy: WorkspaceRealTimeStatisticsContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * A breakdown of Workers by Activity (for example: Idle : 0, Busy: 5, Reserved = 0, Offline = 2)
   */
  activityStatistics: string;
  /**
   * fetch a WorkspaceRealTimeStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkspaceRealTimeStatisticsInstance
   */
  fetch(opts?: WorkspaceRealTimeStatisticsListFetchOptions): Promise<WorkspaceRealTimeStatisticsInstance>;
  /**
   * fetch a WorkspaceRealTimeStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkspaceRealTimeStatisticsListFetchOptions, callback: (error: Error | null, items: WorkspaceRealTimeStatisticsInstance) => any): void;
  /**
   * fetch a WorkspaceRealTimeStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkspaceRealTimeStatisticsInstance) => any): void;
  /**
   * The age of the longest waiting Task
   */
  longestTaskWaitingAge: number;
  /**
   * The tasks_by_priority
   */
  tasksByPriority: string;
  /**
   * The Tasks broken down by status (for example: pending: 1, reserved = 3, assigned = 2, completed = 5)
   */
  tasksByStatus: string;
  /**
   * The total number of Tasks
   */
  totalTasks: number;
  /**
   * The total number of Workers in the workspace
   */
  totalWorkers: number;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class WorkspaceRealTimeStatisticsContext {
  constructor(version: V1, workspaceSid: string);

  /**
   * fetch a WorkspaceRealTimeStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkspaceRealTimeStatisticsInstance
   */
  fetch(opts?: WorkspaceRealTimeStatisticsListFetchOptions): Promise<WorkspaceRealTimeStatisticsInstance>;
  /**
   * fetch a WorkspaceRealTimeStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkspaceRealTimeStatisticsListFetchOptions, callback: (error: Error | null, items: WorkspaceRealTimeStatisticsInstance) => any): void;
  /**
   * fetch a WorkspaceRealTimeStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkspaceRealTimeStatisticsInstance) => any): void;
}

export { WorkspaceRealTimeStatisticsContext, WorkspaceRealTimeStatisticsInstance, WorkspaceRealTimeStatisticsList, WorkspaceRealTimeStatisticsListFetchOptions, WorkspaceRealTimeStatisticsListInstance, WorkspaceRealTimeStatisticsPage, WorkspaceRealTimeStatisticsPayload, WorkspaceRealTimeStatisticsResource, WorkspaceRealTimeStatisticsSolution }
