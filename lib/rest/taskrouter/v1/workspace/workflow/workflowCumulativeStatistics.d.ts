/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');
import { SerializableClass } from '../../../../../interfaces';

declare function WorkflowCumulativeStatisticsList(version: V1, workspaceSid: string, workflowSid: string): WorkflowCumulativeStatisticsListInstance

interface WorkflowCumulativeStatisticsResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The average time (in seconds) from Task creation to acceptance
   */
  avg_task_acceptance_time: number;
  /**
   * The end_time
   */
  end_time: Date;
  /**
   * The total number of Reservations accepted by Workers
   */
  reservations_accepted: number;
  /**
   * The total number of Reservations that were canceled
   */
  reservations_canceled: number;
  /**
   * The total number of Reservations that were created for Workers
   */
  reservations_created: number;
  /**
   * The total number of Reservations that were rejected
   */
  reservations_rejected: number;
  /**
   * The total number of Reservations that were rescinded
   */
  reservations_rescinded: number;
  /**
   * The total number of Reservations that were timed out
   */
  reservations_timed_out: number;
  /**
   * The splits of the tasks canceled and accepted based on the provided SplitByWaitTime parameter.
   */
  split_by_wait_time: string;
  /**
   * The start_time
   */
  start_time: Date;
  /**
   * The total number of Tasks that were canceled
   */
  tasks_canceled: number;
  /**
   * The total number of Tasks that were completed
   */
  tasks_completed: number;
  /**
   * The total number of Tasks that were deleted
   */
  tasks_deleted: number;
  /**
   * The total number of Tasks that entered this Workflow
   */
  tasks_entered: number;
  /**
   * The total number of Tasks that were moved from one queue to another
   */
  tasks_moved: number;
  /**
   * The total number of Tasks that were timed out of their Workflows (and deleted)
   */
  tasks_timed_out_in_workflow: number;
  /**
   * The url
   */
  url: string;
  /**
   * The wait duration stats (avg, min, max, total) for tasks that were accepted.
   */
  wait_duration_until_accepted: string;
  /**
   * The wait duration stats (avg, min, max, total) for tasks that were canceled.
   */
  wait_duration_until_canceled: string;
  /**
   * The workflow_sid
   */
  workflow_sid: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface WorkflowCumulativeStatisticsPayload extends WorkflowCumulativeStatisticsResource, Page.TwilioResponsePayload {
}

interface WorkflowCumulativeStatisticsSolution {
  workflowSid: string;
  workspaceSid: string;
}

interface WorkflowCumulativeStatisticsListInstance {
  /**
   * Gets context of a single WorkflowCumulativeStatistics resource
   */
  (): WorkflowCumulativeStatisticsContext;
  /**
   * Gets context of a single WorkflowCumulativeStatistics resource
   */
  get(): WorkflowCumulativeStatisticsContext;
}

interface WorkflowCumulativeStatisticsListFetchOptions {
  /**
   * Filter cumulative statistics by an end date. This is helpful for defining a range of statistics to capture. Input is a GMT ISO 8601 Timestamp
   */
  endDate?: Date;
  /**
   * Filter cumulative statistics by up to 'x' minutes in the past. This is helpful for statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
   */
  minutes?: number;
  /**
   * A comma separated values for viewing splits of tasks canceled and accepted above the given threshold in seconds. Ex: "5,30" would show splits of tasks that were canceled or accepted before or after 5 seconds and respectively, 30 seconds. This is great for showing short abandoned tasks or tasks that failed to meet your SLA.
   */
  splitByWaitTime?: string;
  /**
   * Filter cumulative statistics by a start date. This is helpful for defining a range of statistics to capture. Input is a GMT ISO 8601 Timestamp
   */
  startDate?: Date;
  /**
   * Filter real-time and cumulative statistics by TaskChannel. Takes in a Unique Name ("voice", "sms", "default", etc.) or a TaskChannelSid.
   */
  taskChannel?: string;
}

interface WorkflowCumulativeStatisticsListFetchOptions {
  /**
   * Filter cumulative statistics by an end date. This is helpful for defining a range of statistics to capture. Input is a GMT ISO 8601 Timestamp
   */
  endDate?: Date;
  /**
   * Filter cumulative statistics by up to 'x' minutes in the past. This is helpful for statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
   */
  minutes?: number;
  /**
   * A comma separated values for viewing splits of tasks canceled and accepted above the given threshold in seconds. Ex: "5,30" would show splits of tasks that were canceled or accepted before or after 5 seconds and respectively, 30 seconds. This is great for showing short abandoned tasks or tasks that failed to meet your SLA.
   */
  splitByWaitTime?: string;
  /**
   * Filter cumulative statistics by a start date. This is helpful for defining a range of statistics to capture. Input is a GMT ISO 8601 Timestamp
   */
  startDate?: Date;
  /**
   * Filter real-time and cumulative statistics by TaskChannel. Takes in a Unique Name ("voice", "sms", "default", etc.) or a TaskChannelSid.
   */
  taskChannel?: string;
}

declare class WorkflowCumulativeStatisticsPage extends Page<V1, WorkflowCumulativeStatisticsPayload, WorkflowCumulativeStatisticsResource, WorkflowCumulativeStatisticsInstance> {
  constructor(version: V1, response: Response<string>, solution: WorkflowCumulativeStatisticsSolution);

  /**
   * Build an instance of WorkflowCumulativeStatisticsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: WorkflowCumulativeStatisticsPayload): WorkflowCumulativeStatisticsInstance;
}

declare class WorkflowCumulativeStatisticsInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param workflowSid - The workflow_sid
   */
  constructor(version: V1, payload: WorkflowCumulativeStatisticsPayload, workspaceSid: string, workflowSid: string);

  private _proxy: WorkflowCumulativeStatisticsContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The average time (in seconds) from Task creation to acceptance
   */
  avgTaskAcceptanceTime: number;
  /**
   * The end_time
   */
  endTime: Date;
  /**
   * fetch a WorkflowCumulativeStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkflowCumulativeStatisticsInstance
   */
  fetch(opts?: WorkflowCumulativeStatisticsListFetchOptions): Promise<WorkflowCumulativeStatisticsInstance>;
  /**
   * fetch a WorkflowCumulativeStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkflowCumulativeStatisticsListFetchOptions, callback: (error: Error | null, items: WorkflowCumulativeStatisticsInstance) => any): void;
  /**
   * fetch a WorkflowCumulativeStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkflowCumulativeStatisticsInstance) => any): void;
  /**
   * The total number of Reservations accepted by Workers
   */
  reservationsAccepted: number;
  /**
   * The total number of Reservations that were canceled
   */
  reservationsCanceled: number;
  /**
   * The total number of Reservations that were created for Workers
   */
  reservationsCreated: number;
  /**
   * The total number of Reservations that were rejected
   */
  reservationsRejected: number;
  /**
   * The total number of Reservations that were rescinded
   */
  reservationsRescinded: number;
  /**
   * The total number of Reservations that were timed out
   */
  reservationsTimedOut: number;
  /**
   * The splits of the tasks canceled and accepted based on the provided SplitByWaitTime parameter.
   */
  splitByWaitTime: string;
  /**
   * The start_time
   */
  startTime: Date;
  /**
   * The total number of Tasks that were canceled
   */
  tasksCanceled: number;
  /**
   * The total number of Tasks that were completed
   */
  tasksCompleted: number;
  /**
   * The total number of Tasks that were deleted
   */
  tasksDeleted: number;
  /**
   * The total number of Tasks that entered this Workflow
   */
  tasksEntered: number;
  /**
   * The total number of Tasks that were moved from one queue to another
   */
  tasksMoved: number;
  /**
   * The total number of Tasks that were timed out of their Workflows (and deleted)
   */
  tasksTimedOutInWorkflow: number;
  /**
   * The url
   */
  url: string;
  /**
   * The wait duration stats (avg, min, max, total) for tasks that were accepted.
   */
  waitDurationUntilAccepted: string;
  /**
   * The wait duration stats (avg, min, max, total) for tasks that were canceled.
   */
  waitDurationUntilCanceled: string;
  /**
   * The workflow_sid
   */
  workflowSid: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class WorkflowCumulativeStatisticsContext {
  constructor(version: V1, workspaceSid: string, workflowSid: string);

  /**
   * fetch a WorkflowCumulativeStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkflowCumulativeStatisticsInstance
   */
  fetch(opts?: WorkflowCumulativeStatisticsListFetchOptions): Promise<WorkflowCumulativeStatisticsInstance>;
  /**
   * fetch a WorkflowCumulativeStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkflowCumulativeStatisticsListFetchOptions, callback: (error: Error | null, items: WorkflowCumulativeStatisticsInstance) => any): void;
  /**
   * fetch a WorkflowCumulativeStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkflowCumulativeStatisticsInstance) => any): void;
}

export { WorkflowCumulativeStatisticsContext, WorkflowCumulativeStatisticsInstance, WorkflowCumulativeStatisticsList, WorkflowCumulativeStatisticsListFetchOptions, WorkflowCumulativeStatisticsListInstance, WorkflowCumulativeStatisticsPage, WorkflowCumulativeStatisticsPayload, WorkflowCumulativeStatisticsResource, WorkflowCumulativeStatisticsSolution }
