/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';
import { WorkflowCumulativeStatisticsList } from './workflow/workflowCumulativeStatistics';
import { WorkflowRealTimeStatisticsList } from './workflow/workflowRealTimeStatistics';
import { WorkflowStatisticsList } from './workflow/workflowStatistics';

/**
 * @description Initialize the WorkflowList
 *
 * @param version - Version of the resource
 * @param workspaceSid - The ID of the Workspace that contains this Workflow
 */
declare function WorkflowList(version: V1, workspaceSid: string): WorkflowListInstance;

interface WorkflowResource {
  account_sid: string;
  assignment_callback_url: string;
  configuration: string;
  date_created: Date;
  date_updated: Date;
  document_content_type: string;
  fallback_assignment_callback_url: string;
  friendly_name: string;
  links: string;
  sid: string;
  task_reservation_timeout: number;
  url: string;
  workspace_sid: string;
}

interface WorkflowPayload extends WorkflowResource, Page.TwilioResponsePayload {
}

interface WorkflowSolution {
  workspaceSid?: string;
}

interface WorkflowListInstance {
  /**
   * @param sid - sid of instance
   */
  WorkflowListInstance(sid: string);
  /**
   * create a WorkflowInstance
   *
   * @function create
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  create(opts: object, callback?: function);
  /**
   * Streams WorkflowInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList
   * @instance
   *
   * @param opts - ...
   * @param callback - Function to process each record
   */
  each(opts?: object, callback?: Function);
  /**
   * Constructs a workflow
   *
   * @function get
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList
   * @instance
   *
   * @param sid - The sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of WorkflowInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList
   * @instance
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists WorkflowInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  list(opts?: object, callback?: function);
  /**
   * Retrieve a single page of WorkflowInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  page(opts?: object, callback?: function);
}

/**
 * Options to pass to update
 *
 * @property friendlyName - A string representing a human readable name for this Workflow.
 * @property assignmentCallbackUrl - A valid URL for the application that will process task assignment events.
 * @property fallbackAssignmentCallbackUrl - If the request to the AssignmentCallbackUrl fails, the assignment callback will be made to this URL.
 * @property configuration - JSON document configuring the rules for this Workflow.
 * @property taskReservationTimeout - An integer value controlling how long in seconds TaskRouter will wait for a confirmation response from your application after assigning a Task to a worker.
 */
export interface UpdateOptions {
  assignmentCallbackUrl?: string;
  configuration?: string;
  fallbackAssignmentCallbackUrl?: string;
  friendlyName?: string;
  taskReservationTimeout?: number;
}

/**
 * Options to pass to update
 *
 * @property friendlyName - A string representing a human readable name for this Workflow.
 * @property assignmentCallbackUrl - A valid URL for the application that will process task assignment events.
 * @property fallbackAssignmentCallbackUrl - If the request to the AssignmentCallbackUrl fails, the assignment callback will be made to this URL.
 * @property configuration - JSON document configuring the rules for this Workflow.
 * @property taskReservationTimeout - An integer value controlling how long in seconds TaskRouter will wait for a confirmation response from your application after assigning a Task to a worker.
 */
export interface UpdateOptions {
  assignmentCallbackUrl?: string;
  configuration?: string;
  fallbackAssignmentCallbackUrl?: string;
  friendlyName?: string;
  taskReservationTimeout?: number;
}


declare class WorkflowPage extends Page {
  /**
   * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage
   * @augments Page
   * @description Initialize the WorkflowPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Taskrouter.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of WorkflowInstance
   *
   * @function getInstance
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class WorkflowInstance {
  /**
   * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance
   * @description Initialize the WorkflowContext
   *
   * @property accountSid - The ID of the account that owns this Workflow
   * @property assignmentCallbackUrl - The URL that will be called whenever a task managed by this Workflow is assigned to a Worker.
   * @property configuration - JSON document configuring the rules for this Workflow.
   * @property dateCreated - The date this workflow was created.
   * @property dateUpdated - The date this workflow was last updated.
   * @property documentContentType - The document_content_type
   * @property fallbackAssignmentCallbackUrl - If the request to the AssignmentCallbackUrl fails, the assignment callback will be made to this URL.
   * @property friendlyName - Human readable description of this Workflow
   * @property sid - The unique ID of the Workflow
   * @property taskReservationTimeout - Determines how long TaskRouter will wait for a confirmation response from your application after assigning a Task to a worker.
   * @property workspaceSid - The ID of the Workspace that contains this Workflow
   * @property url - The url
   * @property links - The links
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The ID of the Workspace that contains this Workflow
   * @param sid - The sid
   */
  constructor(version: Twilio.Taskrouter.V1, payload: object, workspaceSid: sid, sid: sid);

  _proxy?: WorkflowContext;
  /**
   * Access the cumulativeStatistics
   *
   * @function cumulativeStatistics
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance
   * @instance
   */
  cumulativeStatistics();
  /**
   * fetch a WorkflowInstance
   *
   * @function fetch
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the realTimeStatistics
   *
   * @function realTimeStatistics
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance
   * @instance
   */
  realTimeStatistics();
  /**
   * remove a WorkflowInstance
   *
   * @function remove
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Access the statistics
   *
   * @function statistics
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance
   * @instance
   */
  statistics();
  /**
   * Produce a plain JSON object version of the WorkflowInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance
   * @instance
   */
  toJSON();
  /**
   * update a WorkflowInstance
   *
   * @function update
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}


declare class WorkflowContext {
  /**
   * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext
   * @description Initialize the WorkflowContext
   *
   * @property statistics - statistics resource
   * @property realTimeStatistics - realTimeStatistics resource
   * @property cumulativeStatistics - cumulativeStatistics resource
   *
   * @param version - Version of the resource
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Taskrouter.V1, workspaceSid: sid, sid: sid);

  cumulativeStatistics?: Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowCumulativeStatisticsList;
  /**
   * fetch a WorkflowInstance
   *
   * @function fetch
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  realTimeStatistics?: Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowRealTimeStatisticsList;
  /**
   * remove a WorkflowInstance
   *
   * @function remove
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  statistics?: Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsList;
  /**
   * update a WorkflowInstance
   *
   * @function update
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { WorkflowContext, WorkflowInstance, WorkflowList, WorkflowListInstance, WorkflowPage, WorkflowPayload, WorkflowResource, WorkflowSolution }
