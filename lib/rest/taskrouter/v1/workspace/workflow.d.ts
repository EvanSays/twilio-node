/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';
import { WorkflowCumulativeStatisticsListInstance } from './workflow/workflowCumulativeStatistics';
import { WorkflowRealTimeStatisticsListInstance } from './workflow/workflowRealTimeStatistics';
import { WorkflowStatisticsListInstance } from './workflow/workflowStatistics';

declare function WorkflowList(version: V1, workspaceSid: string): WorkflowListInstance

interface WorkflowResource {
  /**
   * The ID of the account that owns this Workflow
   */
  account_sid: string;
  /**
   * The URL that will be called whenever a task managed by this Workflow is assigned to a Worker. See Assignment Callback URL for more information.
   */
  assignment_callback_url: string;
  /**
   * JSON document configuring the rules for this Workflow. See [Configuring Workflows](https://www.twilio.com/docs/api/taskrouter/workflow-configuration) for more information.
   */
  configuration: string;
  /**
   * The date this workflow was created.
   */
  date_created: Date;
  /**
   * The date this workflow was last updated.
   */
  date_updated: Date;
  /**
   * The document_content_type
   */
  document_content_type: string;
  /**
   * If the request to the AssignmentCallbackUrl fails, the assignment callback will be made to this URL.
   */
  fallback_assignment_callback_url: string;
  /**
   * Human readable description of this Workflow (for example "Customer Support" or "2014 Election Campaign")
   */
  friendly_name: string;
  /**
   * The links
   */
  links: string;
  /**
   * The unique ID of the Workflow
   */
  sid: string;
  /**
   * Determines how long TaskRouter will wait for a confirmation response from your application after assigning a Task to a worker. Defaults to 120 seconds. Maximum value is 86400 (24 hours)
   */
  task_reservation_timeout: number;
  /**
   * The url
   */
  url: string;
  /**
   * The ID of the Workspace that contains this Workflow
   */
  workspace_sid: string;
}

interface WorkflowPayload extends WorkflowResource, Page.TwilioResponsePayload {
}

interface WorkflowSolution {
  workspaceSid: string;
}

interface WorkflowListEachOptions extends ListEachOptions<WorkflowInstance> {
  /**
   * Human readable description of this Workflow (for example "Customer Support" or "2014 Election Campaign")
   */
  friendlyName?: string;
}

interface WorkflowListOptions extends ListOptions<WorkflowInstance> {
  /**
   * Human readable description of this Workflow (for example "Customer Support" or "2014 Election Campaign")
   */
  friendlyName?: string;
}

interface WorkflowListPageOptions extends PageOptions<WorkflowPage> {
  /**
   * Human readable description of this Workflow (for example "Customer Support" or "2014 Election Campaign")
   */
  friendlyName?: string;
}

interface WorkflowListCreateOptions {
  /**
   * A valid URL for the application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/api/taskrouter/handling-assignment-callbacks) for more details.
   */
  assignmentCallbackUrl?: string;
  /**
   * JSON document configuring the rules for this Workflow. See [Configuring Workflows](https://www.twilio.com/docs/api/taskrouter/workflow-configuration) for more information.
   */
  configuration: string;
  /**
   * If the request to the AssignmentCallbackUrl fails, the assignment callback will be made to this URL.
   */
  fallbackAssignmentCallbackUrl?: string;
  /**
   * A string representing a human readable name for this Workflow. Examples include 'Inbound Call Workflow' or '2014 Outbound Campaign'.
   */
  friendlyName: string;
  /**
   * An integer value controlling how long in seconds TaskRouter will wait for a confirmation response from your application after assigning a Task to a worker. See Task Assignment Callback for more information. Defaults to 120 seconds. Maximum value is 86400 (24 hours)
   */
  taskReservationTimeout?: number;
}

interface WorkflowListInstance {
  /**
   * Gets context of a single Workflow resource
   *
   * @param sid - The sid
   */
  (sid: string): WorkflowContext;
  /**
   * create a WorkflowInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkflowInstance
   */
  create(opts: WorkflowListCreateOptions): Promise<WorkflowInstance>;
  /**
   * create a WorkflowInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: WorkflowListCreateOptions, callback: (error: Error | null, items: WorkflowInstance) => any): void;
  /**
   * Streams WorkflowInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: WorkflowListEachOptions): void;
  /**
   * Streams WorkflowInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: WorkflowInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Workflow resource
   *
   * @param sid - The sid
   */
  get(sid: string): WorkflowContext;
  /**
   * Retrieve a single target page of WorkflowInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<WorkflowPage>;
  /**
   * Retrieve a single target page of WorkflowInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: WorkflowPage) => any): void;
  /**
   * Lists WorkflowInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: WorkflowListOptions): Promise<WorkflowInstance[]>;
  /**
   * Lists WorkflowInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: WorkflowListOptions, callback: (error: Error | null, items: WorkflowInstance[]) => any): void;
  /**
   * Lists WorkflowInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: WorkflowInstance[]) => any): void;
  /**
   * Retrieve a single page of WorkflowInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: WorkflowListPageOptions): Promise<WorkflowPage>;
  /**
   * Retrieve a single page of WorkflowInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: WorkflowListPageOptions, callback: (error: Error | null, items: WorkflowPage) => any): void;
  /**
   * Retrieve a single page of WorkflowInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: WorkflowPage) => any): void;
}

interface WorkflowListFetchOptions {
  /**
   * A valid URL for the application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/api/taskrouter/handling-assignment-callbacks) for more details.
   */
  assignmentCallbackUrl?: string;
  /**
   * JSON document configuring the rules for this Workflow. See [Configuring Workflows](https://www.twilio.com/docs/api/taskrouter/workflow-configuration) for more information.
   */
  configuration?: string;
  /**
   * If the request to the AssignmentCallbackUrl fails, the assignment callback will be made to this URL.
   */
  fallbackAssignmentCallbackUrl?: string;
  /**
   * A string representing a human readable name for this Workflow. Examples include 'Customer Support' or 'Sales Team'.
   */
  friendlyName?: string;
  /**
   * An integer value controlling how long in seconds TaskRouter will wait for a confirmation response from your application after assigning a Task to a worker. Defaults to 120 seconds. Maximum value is 86400 (24 hours)
   */
  taskReservationTimeout?: number;
}

interface WorkflowListFetchOptions {
  /**
   * A valid URL for the application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/api/taskrouter/handling-assignment-callbacks) for more details.
   */
  assignmentCallbackUrl?: string;
  /**
   * JSON document configuring the rules for this Workflow. See [Configuring Workflows](https://www.twilio.com/docs/api/taskrouter/workflow-configuration) for more information.
   */
  configuration?: string;
  /**
   * If the request to the AssignmentCallbackUrl fails, the assignment callback will be made to this URL.
   */
  fallbackAssignmentCallbackUrl?: string;
  /**
   * A string representing a human readable name for this Workflow. Examples include 'Customer Support' or 'Sales Team'.
   */
  friendlyName?: string;
  /**
   * An integer value controlling how long in seconds TaskRouter will wait for a confirmation response from your application after assigning a Task to a worker. Defaults to 120 seconds. Maximum value is 86400 (24 hours)
   */
  taskReservationTimeout?: number;
}

declare class WorkflowPage extends Page<V1, WorkflowPayload, WorkflowResource, WorkflowInstance> {
  constructor(version: V1, response: Response<string>, solution: WorkflowSolution);

  /**
   * Build an instance of WorkflowInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: WorkflowPayload): WorkflowInstance;
}

declare class WorkflowInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: WorkflowPayload, workspaceSid: string, sid: string);

  private _proxy: WorkflowContext;
  /**
   * The ID of the account that owns this Workflow
   */
  accountSid: string;
  /**
   * The URL that will be called whenever a task managed by this Workflow is assigned to a Worker. See Assignment Callback URL for more information.
   */
  assignmentCallbackUrl: string;
  /**
   * JSON document configuring the rules for this Workflow. See [Configuring Workflows](https://www.twilio.com/docs/api/taskrouter/workflow-configuration) for more information.
   */
  configuration: string;
  cumulativeStatistics(): WorkflowCumulativeStatisticsListInstance;
  /**
   * The date this workflow was created.
   */
  dateCreated: Date;
  /**
   * The date this workflow was last updated.
   */
  dateUpdated: Date;
  /**
   * The document_content_type
   */
  documentContentType: string;
  /**
   * If the request to the AssignmentCallbackUrl fails, the assignment callback will be made to this URL.
   */
  fallbackAssignmentCallbackUrl: string;
  /**
   * fetch a WorkflowInstance
   *
   * @returns Promise that resolves to processed WorkflowInstance
   */
  fetch(): Promise<WorkflowInstance>;
  /**
   * fetch a WorkflowInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkflowInstance) => any): void;
  /**
   * Human readable description of this Workflow (for example "Customer Support" or "2014 Election Campaign")
   */
  friendlyName: string;
  /**
   * The links
   */
  links: string;
  realTimeStatistics(): WorkflowRealTimeStatisticsListInstance;
  /**
   * remove a WorkflowInstance
   *
   * @returns Promise that resolves to processed WorkflowInstance
   */
  remove(): Promise<WorkflowInstance>;
  /**
   * remove a WorkflowInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: WorkflowInstance) => any): void;
  /**
   * The unique ID of the Workflow
   */
  sid: string;
  statistics(): WorkflowStatisticsListInstance;
  /**
   * Determines how long TaskRouter will wait for a confirmation response from your application after assigning a Task to a worker. Defaults to 120 seconds. Maximum value is 86400 (24 hours)
   */
  taskReservationTimeout: number;
  /**
   * update a WorkflowInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkflowInstance
   */
  update(opts?: WorkflowListFetchOptions): Promise<WorkflowInstance>;
  /**
   * update a WorkflowInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: WorkflowListFetchOptions, callback: (error: Error | null, items: WorkflowInstance) => any): void;
  /**
   * update a WorkflowInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: WorkflowInstance) => any): void;
  /**
   * The url
   */
  url: string;
  /**
   * The ID of the Workspace that contains this Workflow
   */
  workspaceSid: string;
}

declare class WorkflowContext {
  constructor(version: V1, workspaceSid: string, sid: string);

  cumulativeStatistics: WorkflowCumulativeStatisticsListInstance;
  /**
   * fetch a WorkflowInstance
   *
   * @returns Promise that resolves to processed WorkflowInstance
   */
  fetch(): Promise<WorkflowInstance>;
  /**
   * fetch a WorkflowInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkflowInstance) => any): void;
  realTimeStatistics: WorkflowRealTimeStatisticsListInstance;
  /**
   * remove a WorkflowInstance
   *
   * @returns Promise that resolves to processed WorkflowInstance
   */
  remove(): Promise<WorkflowInstance>;
  /**
   * remove a WorkflowInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: WorkflowInstance) => any): void;
  statistics: WorkflowStatisticsListInstance;
  /**
   * update a WorkflowInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkflowInstance
   */
  update(opts?: WorkflowListFetchOptions): Promise<WorkflowInstance>;
  /**
   * update a WorkflowInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: WorkflowListFetchOptions, callback: (error: Error | null, items: WorkflowInstance) => any): void;
  /**
   * update a WorkflowInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: WorkflowInstance) => any): void;
}

export { WorkflowContext, WorkflowInstance, WorkflowList, WorkflowListCreateOptions, WorkflowListEachOptions, WorkflowListFetchOptions, WorkflowListInstance, WorkflowListOptions, WorkflowListPageOptions, WorkflowPage, WorkflowPayload, WorkflowResource, WorkflowSolution }
