/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { ReservationListInstance } from './task/reservation';
import { SerializableClass } from '../../../../interfaces';

declare function TaskList(version: V1, workspaceSid: string): TaskListInstance

type TaskStatus = 'pending'|'reserved'|'assigned'|'canceled'|'completed'|'wrapping';

interface TaskResource {
  /**
   * The ID of the account that owns this Task
   */
  account_sid: string;
  /**
   * The [addon](https://www.twilio.com/docs/taskrouter/marketplace) data for all installed addons is returned with this attribute
   */
  addons: string;
  /**
   * The number of seconds since this task was created.
   */
  age: number;
  /**
   * Returns the list of all Tasks in the workspace with the specified AssignmentStatus. Allowed AssignmentStatus values are pending, reserved, assigned, canceled, and completed.
   */
  assignment_status: TaskStatus;
  /**
   * The user-defined JSON string describing the custom attributes of this work.
   */
  attributes: string;
  /**
   * Date this task was created, given as ISO 8601 format.
   */
  date_created: Date;
  /**
   * Date this task was updated, given as ISO 8601 format.
   */
  date_updated: Date;
  /**
   * The links
   */
  links: string;
  /**
   * Retrieve the list of all Tasks in the workspace with the specified priority.
   */
  priority: number;
  /**
   * The reason the task was canceled  or completed (if applicable)
   */
  reason: string;
  /**
   * The unique ID of the Task
   */
  sid: string;
  /**
   * The ID of the Task Channel
   */
  task_channel_sid: string;
  /**
   * The unique name of the Task Channel
   */
  task_channel_unique_name: string;
  /**
   * The task_queue_friendly_name
   */
  task_queue_friendly_name: string;
  /**
   * Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.
   */
  task_queue_sid: string;
  /**
   * The amount of time in seconds the task is allowed to live
   */
  timeout: number;
  /**
   * The url
   */
  url: string;
  /**
   * The workflow_friendly_name
   */
  workflow_friendly_name: string;
  /**
   * Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.
   */
  workflow_sid: string;
  /**
   * The ID of the Workspace that holds this Task
   */
  workspace_sid: string;
}

interface TaskPayload extends TaskResource, Page.TwilioResponsePayload {
}

interface TaskSolution {
  workspaceSid: string;
}

interface TaskListEachOptions extends ListEachOptions<TaskInstance> {
  /**
   * Returns the list of all Tasks in the workspace with the specified AssignmentStatus. Allowed AssignmentStatus values are pending, reserved, assigned, canceled, and completed.
   */
  assignmentStatus?: string[];
  /**
   * Provide a task attributes expression, and this will return tasks which match the attributes.
   */
  evaluateTaskAttributes?: string;
  /**
   * The has_addons
   */
  hasAddons?: boolean;
  /**
   * Use this parameter to control the order of the Tasks returned. The value should be passed in `Attribute:Order` format, where Attribute can be either `Priority` or `DateCreated` and Order can be either `asc` or `desc`. For example, `Priority:desc` returns Tasks ordered by Priority in descending order. To sort the Tasks by Priority and DateCreated pass `Priority:desc,DateCreated:asc`. By Default Tasks are returned sorted by DateCreated in ascending order.
   */
  ordering?: string;
  /**
   * Retrieve the list of all Tasks in the workspace with the specified priority.
   */
  priority?: number;
  /**
   * Returns the list of Tasks that are currently waiting in the TaskQueue identified by the FriendlyName specified.
   */
  taskQueueName?: string;
  /**
   * Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.
   */
  taskQueueSid?: string;
  /**
   * Returns the list of Tasks that are being controlled by the Workflow with the specified FriendlyName value.
   */
  workflowName?: string;
  /**
   * Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.
   */
  workflowSid?: string;
}

interface TaskListOptions extends ListOptions<TaskInstance> {
  /**
   * Returns the list of all Tasks in the workspace with the specified AssignmentStatus. Allowed AssignmentStatus values are pending, reserved, assigned, canceled, and completed.
   */
  assignmentStatus?: string[];
  /**
   * Provide a task attributes expression, and this will return tasks which match the attributes.
   */
  evaluateTaskAttributes?: string;
  /**
   * The has_addons
   */
  hasAddons?: boolean;
  /**
   * Use this parameter to control the order of the Tasks returned. The value should be passed in `Attribute:Order` format, where Attribute can be either `Priority` or `DateCreated` and Order can be either `asc` or `desc`. For example, `Priority:desc` returns Tasks ordered by Priority in descending order. To sort the Tasks by Priority and DateCreated pass `Priority:desc,DateCreated:asc`. By Default Tasks are returned sorted by DateCreated in ascending order.
   */
  ordering?: string;
  /**
   * Retrieve the list of all Tasks in the workspace with the specified priority.
   */
  priority?: number;
  /**
   * Returns the list of Tasks that are currently waiting in the TaskQueue identified by the FriendlyName specified.
   */
  taskQueueName?: string;
  /**
   * Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.
   */
  taskQueueSid?: string;
  /**
   * Returns the list of Tasks that are being controlled by the Workflow with the specified FriendlyName value.
   */
  workflowName?: string;
  /**
   * Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.
   */
  workflowSid?: string;
}

interface TaskListPageOptions extends PageOptions<TaskPage> {
  /**
   * Returns the list of all Tasks in the workspace with the specified AssignmentStatus. Allowed AssignmentStatus values are pending, reserved, assigned, canceled, and completed.
   */
  assignmentStatus?: string[];
  /**
   * Provide a task attributes expression, and this will return tasks which match the attributes.
   */
  evaluateTaskAttributes?: string;
  /**
   * The has_addons
   */
  hasAddons?: boolean;
  /**
   * Use this parameter to control the order of the Tasks returned. The value should be passed in `Attribute:Order` format, where Attribute can be either `Priority` or `DateCreated` and Order can be either `asc` or `desc`. For example, `Priority:desc` returns Tasks ordered by Priority in descending order. To sort the Tasks by Priority and DateCreated pass `Priority:desc,DateCreated:asc`. By Default Tasks are returned sorted by DateCreated in ascending order.
   */
  ordering?: string;
  /**
   * Retrieve the list of all Tasks in the workspace with the specified priority.
   */
  priority?: number;
  /**
   * Returns the list of Tasks that are currently waiting in the TaskQueue identified by the FriendlyName specified.
   */
  taskQueueName?: string;
  /**
   * Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.
   */
  taskQueueSid?: string;
  /**
   * Returns the list of Tasks that are being controlled by the Workflow with the specified FriendlyName value.
   */
  workflowName?: string;
  /**
   * Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.
   */
  workflowSid?: string;
}

interface TaskListCreateOptions {
  /**
   * Url-encoded JSON string describing the attributes of this task. This data will be passed back to the Workflow's AssignmentCallbackURL when the Task is assigned to a Worker. An example task: `{ "task_type": "call", "twilio_call_sid": "CAxxx", "customer_ticket_number": "12345" }`
   */
  attributes?: string;
  /**
   * Override priority for the Task. When supplied, the Task will take on the given priority unless it matches a Workflow Target with a Priority set. When not supplied, the Task will take on the priority of the matching Workflow Target.
   */
  priority?: number;
  /**
   * When MultiTasking is enabled specify the type of the task by passing either TaskChannel Unique Name or Task Channel Sid. Default value is "default"
   */
  taskChannel?: string;
  /**
   * The amount of time in seconds the task is allowed to live up to a maximum of 2 weeks. Defaults to 24 hours. On timeout, `task.canceled` event will fire with description "Task TTL Exceeded".
   */
  timeout?: number;
  /**
   * The WorkflowSid for the Workflow that you would like to handle routing for this Task. If there is only one Workflow defined for the Workspace that you are posting a task to, then this is an optional parameter, and that single workflow will be used.
   */
  workflowSid?: string;
}

interface TaskListInstance {
  /**
   * Gets context of a single Task resource
   *
   * @param sid - The sid
   */
  (sid: string): TaskContext;
  /**
   * create a TaskInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  create(opts?: TaskListCreateOptions): Promise<TaskInstance>;
  /**
   * create a TaskInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: TaskListCreateOptions, callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * create a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * Streams TaskInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: TaskListEachOptions): void;
  /**
   * Streams TaskInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: TaskInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Task resource
   *
   * @param sid - The sid
   */
  get(sid: string): TaskContext;
  /**
   * Retrieve a single target page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<TaskPage>;
  /**
   * Retrieve a single target page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: TaskPage) => any): void;
  /**
   * Lists TaskInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: TaskListOptions): Promise<TaskInstance[]>;
  /**
   * Lists TaskInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: TaskListOptions, callback: (error: Error | null, items: TaskInstance[]) => any): void;
  /**
   * Lists TaskInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: TaskInstance[]) => any): void;
  /**
   * Retrieve a single page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: TaskListPageOptions): Promise<TaskPage>;
  /**
   * Retrieve a single page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: TaskListPageOptions, callback: (error: Error | null, items: TaskPage) => any): void;
  /**
   * Retrieve a single page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: TaskPage) => any): void;
}

interface TaskListFetchOptions {
  /**
   * A 'pending' or 'reserved' Task may be canceled by posting AssignmentStatus='canceled'. Post AssignmentStatus='wrapping' to move Task to 'wrapup' state and AssignmentStatus='completed' to move a Task to 'completed' state.
   */
  assignmentStatus?: TaskStatus;
  /**
   * The user-defined JSON data describing the custom attributes of this task.
   */
  attributes?: string;
  /**
   * Override priority for the Task. When supplied, the Task will take on the given priority unless it matches a Workflow Target with a Priority set.
   */
  priority?: number;
  /**
   * This is only required if the Task is canceled or completed. This logs the reason the task was either canceled or completed and queues the task for deletion after 5 minutes.
   */
  reason?: string;
  /**
   * The task_channel
   */
  taskChannel?: string;
}

interface TaskListFetchOptions {
  /**
   * A 'pending' or 'reserved' Task may be canceled by posting AssignmentStatus='canceled'. Post AssignmentStatus='wrapping' to move Task to 'wrapup' state and AssignmentStatus='completed' to move a Task to 'completed' state.
   */
  assignmentStatus?: TaskStatus;
  /**
   * The user-defined JSON data describing the custom attributes of this task.
   */
  attributes?: string;
  /**
   * Override priority for the Task. When supplied, the Task will take on the given priority unless it matches a Workflow Target with a Priority set.
   */
  priority?: number;
  /**
   * This is only required if the Task is canceled or completed. This logs the reason the task was either canceled or completed and queues the task for deletion after 5 minutes.
   */
  reason?: string;
  /**
   * The task_channel
   */
  taskChannel?: string;
}

declare class TaskPage extends Page<V1, TaskPayload, TaskResource, TaskInstance> {
  constructor(version: V1, response: Response<string>, solution: TaskSolution);

  /**
   * Build an instance of TaskInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TaskPayload): TaskInstance;
}

declare class TaskInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: TaskPayload, workspaceSid: string, sid: string);

  private _proxy: TaskContext;
  /**
   * The ID of the account that owns this Task
   */
  accountSid: string;
  /**
   * The [addon](https://www.twilio.com/docs/taskrouter/marketplace) data for all installed addons is returned with this attribute
   */
  addons: string;
  /**
   * The number of seconds since this task was created.
   */
  age: number;
  /**
   * Returns the list of all Tasks in the workspace with the specified AssignmentStatus. Allowed AssignmentStatus values are pending, reserved, assigned, canceled, and completed.
   */
  assignmentStatus: TaskStatus;
  /**
   * The user-defined JSON string describing the custom attributes of this work.
   */
  attributes: string;
  /**
   * Date this task was created, given as ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * Date this task was updated, given as ISO 8601 format.
   */
  dateUpdated: Date;
  /**
   * fetch a TaskInstance
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  fetch(): Promise<TaskInstance>;
  /**
   * fetch a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * The links
   */
  links: string;
  /**
   * Retrieve the list of all Tasks in the workspace with the specified priority.
   */
  priority: number;
  /**
   * The reason the task was canceled  or completed (if applicable)
   */
  reason: string;
  /**
   * remove a TaskInstance
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  remove(): Promise<TaskInstance>;
  /**
   * remove a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: TaskInstance) => any): void;
  reservations(): ReservationListInstance;
  /**
   * The unique ID of the Task
   */
  sid: string;
  /**
   * The ID of the Task Channel
   */
  taskChannelSid: string;
  /**
   * The unique name of the Task Channel
   */
  taskChannelUniqueName: string;
  /**
   * The task_queue_friendly_name
   */
  taskQueueFriendlyName: string;
  /**
   * Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.
   */
  taskQueueSid: string;
  /**
   * The amount of time in seconds the task is allowed to live
   */
  timeout: number;
  /**
   * update a TaskInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  update(opts?: TaskListFetchOptions): Promise<TaskInstance>;
  /**
   * update a TaskInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: TaskListFetchOptions, callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * update a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * The url
   */
  url: string;
  /**
   * The workflow_friendly_name
   */
  workflowFriendlyName: string;
  /**
   * Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.
   */
  workflowSid: string;
  /**
   * The ID of the Workspace that holds this Task
   */
  workspaceSid: string;
}

declare class TaskContext {
  constructor(version: V1, workspaceSid: string, sid: string);

  /**
   * fetch a TaskInstance
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  fetch(): Promise<TaskInstance>;
  /**
   * fetch a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * remove a TaskInstance
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  remove(): Promise<TaskInstance>;
  /**
   * remove a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: TaskInstance) => any): void;
  reservations: ReservationListInstance;
  /**
   * update a TaskInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  update(opts?: TaskListFetchOptions): Promise<TaskInstance>;
  /**
   * update a TaskInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: TaskListFetchOptions, callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * update a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: TaskInstance) => any): void;
}

export { TaskContext, TaskInstance, TaskList, TaskListCreateOptions, TaskListEachOptions, TaskListFetchOptions, TaskListInstance, TaskListOptions, TaskListPageOptions, TaskPage, TaskPayload, TaskResource, TaskSolution, TaskStatus }
