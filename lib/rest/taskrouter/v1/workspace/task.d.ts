/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import serialize = require('../../../../base/serialize');
import { ReservationList } from './task/reservation';
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the TaskList
 *
 * @param version - Version of the resource
 * @param workspaceSid - The ID of the Workspace that holds this Task
 */
declare function TaskList(version: V1, workspaceSid: string): TaskListInstance;

interface TaskResource {
  account_sid: string;
  addons: string;
  age: number;
  assignment_status: TaskStatus;
  attributes: string;
  date_created: Date;
  date_updated: Date;
  links: string;
  priority: number;
  reason: string;
  sid: string;
  task_channel_sid: string;
  task_channel_unique_name: string;
  task_queue_friendly_name: string;
  task_queue_sid: string;
  timeout: number;
  url: string;
  workflow_friendly_name: string;
  workflow_sid: string;
  workspace_sid: string;
}

interface TaskPayload extends TaskResource, Page.TwilioResponsePayload {
}

interface TaskSolution {
  workspaceSid?: string;
}

interface TaskListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): TaskContext;
  /**
   * create a TaskInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts?: TaskListInstanceCreateOptions, callback?: (error: Error | null, items: TaskListInstance) => any): Promise<TaskInstance>;
  /**
   * Streams TaskInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: TaskListInstanceEachOptions, callback?: (item: TaskInstance, done: (err?: Error) => void) => void): void;
  /**
   * Constructs a task
   *
   * @param sid - The sid
   */
  get(sid: string): TaskContext;
  /**
   * Retrieve a single target page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: TaskPage) => any): Promise<TaskPage>;
  /**
   * Lists TaskInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: TaskListInstanceOptions, callback?: (error: Error | null, items: TaskInstance[]) => any): Promise<TaskInstance[]>;
  /**
   * Retrieve a single page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: TaskListInstancePageOptions, callback?: (error: Error | null, items: TaskPage) => any): Promise<TaskPage>;
}

/**
 * Options to pass to update
 *
 * @property attributes - The user-defined JSON data describing the custom attributes of this task.
 * @property assignmentStatus - A 'pending' or 'reserved' Task may be canceled by posting AssignmentStatus='canceled'.
 * @property reason - This is only required if the Task is canceled or completed.
 * @property priority - Override priority for the Task.
 * @property taskChannel - The task_channel
 */
interface TaskInstanceUpdateOptions {
  assignmentStatus?: task.status;
  attributes?: string;
  priority?: number;
  reason?: string;
  taskChannel?: string;
}

/**
 * Options to pass to update
 *
 * @property attributes - The user-defined JSON data describing the custom attributes of this task.
 * @property assignmentStatus - A 'pending' or 'reserved' Task may be canceled by posting AssignmentStatus='canceled'.
 * @property reason - This is only required if the Task is canceled or completed.
 * @property priority - Override priority for the Task.
 * @property taskChannel - The task_channel
 */
interface TaskInstanceUpdateOptions {
  assignmentStatus?: task.status;
  attributes?: string;
  priority?: number;
  reason?: string;
  taskChannel?: string;
}


declare class TaskPage extends Page<V1, TaskPayload, TaskResource, TaskInstance> {
  /**
   * Initialize the TaskPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: TaskSolution);

  /**
   * Build an instance of TaskInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TaskPayload): TaskInstance;
}


declare class TaskInstance extends SerializableClass {
  /**
   * Initialize the TaskContext
   *
   * @property accountSid - The ID of the account that owns this Task
   * @property age - The number of seconds since this task was created.
   * @property assignmentStatus - Returns the list of all Tasks in the workspace with the specified AssignmentStatus.
   * @property attributes - The user-defined JSON string describing the custom attributes of this work.
   * @property addons - The addon data for all installed addons is returned with this attribute
   * @property dateCreated - Date this task was created, given as ISO 8601 format.
   * @property dateUpdated - Date this task was updated, given as ISO 8601 format.
   * @property priority - Retrieve the list of all Tasks in the workspace with the specified priority.
   * @property reason - The reason the task was canceled  or completed
   * @property sid - The unique ID of the Task
   * @property taskQueueSid - Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.
   * @property taskQueueFriendlyName - The task_queue_friendly_name
   * @property taskChannelSid - The ID of the Task Channel
   * @property taskChannelUniqueName - The unique name of the Task Channel
   * @property timeout - The amount of time in seconds the task is allowed to live
   * @property workflowSid - Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.
   * @property workflowFriendlyName - The workflow_friendly_name
   * @property workspaceSid - The ID of the Workspace that holds this Task
   * @property url - The url
   * @property links - The links
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The ID of the Workspace that holds this Task
   * @param sid - The sid
   */
  constructor(version: V1, payload: TaskPayload, workspaceSid: string, sid: string);

  private _proxy: TaskContext;
  accountSid: string;
  addons: string;
  age: number;
  assignmentStatus: task.status;
  attributes: string;
  dateCreated: Date;
  dateUpdated: Date;
  /**
   * fetch a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: TaskInstance) => any): void;
  links: string;
  priority: number;
  reason: string;
  /**
   * remove a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * Access the reservations
   */
  reservations();
  sid: string;
  taskChannelSid: string;
  taskChannelUniqueName: string;
  taskQueueFriendlyName: string;
  taskQueueSid: string;
  timeout: number;
  /**
   * Produce a plain JSON object version of the TaskInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON(): any;
  /**
   * update a TaskInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: TaskInstanceUpdateOptions, callback?: (error: Error | null, items: TaskInstance) => any): void;
  url: string;
  workflowFriendlyName: string;
  workflowSid: string;
  workspaceSid: string;
}


declare class TaskContext {
  /**
   * Initialize the TaskContext
   *
   * @property reservations - reservations resource
   *
   * @param version - Version of the resource
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, workspaceSid: string, sid: string);

  /**
   * fetch a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * remove a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: TaskInstance) => any): void;
  reservations?: Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList;
  /**
   * update a TaskInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: TaskInstanceUpdateOptions, callback?: (error: Error | null, items: TaskInstance) => any): void;
}

export { TaskContext, TaskInstance, TaskList, TaskListInstance, TaskListInstanceCreateOptions, TaskListInstanceEachOptions, TaskListInstanceOptions, TaskListInstancePageOptions, TaskPage, TaskPayload, TaskResource, TaskSolution }
