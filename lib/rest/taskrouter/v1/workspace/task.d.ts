/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import V1 = require('../../V1');
import deserialize = require('../../../../base/deserialize');
import serialize = require('../../../../base/serialize');
import values = require('../../../../base/values');
import { ReservationList } from './task/reservation';


/**
 * Options to pass to update
 *
 * @property attributes - The user-defined JSON data describing the custom attributes of this task.
 * @property assignmentStatus - A 'pending' or 'reserved' Task may be canceled by posting AssignmentStatus='canceled'.
 * @property reason - This is only required if the Task is canceled or completed.
 * @property priority - Override priority for the Task.
 * @property taskChannel - The task_channel
 */
export interface UpdateOptions {
  assignmentStatus?: task.status;
  attributes?: string;
  priority?: number;
  reason?: string;
  taskChannel?: string;
}

/**
 * Options to pass to update
 *
 * @property attributes - The user-defined JSON data describing the custom attributes of this task.
 * @property assignmentStatus - A 'pending' or 'reserved' Task may be canceled by posting AssignmentStatus='canceled'.
 * @property reason - This is only required if the Task is canceled or completed.
 * @property priority - Override priority for the Task.
 * @property taskChannel - The task_channel
 */
export interface UpdateOptions {
  assignmentStatus?: task.status;
  attributes?: string;
  priority?: number;
  reason?: string;
  taskChannel?: string;
}


declare class TaskPage extends Page {
  /**
   * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskPage
   * @augments Page
   * @description Initialize the TaskPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Taskrouter.V1, response: object, solution: object);

  /**
   * Build an instance of TaskInstance
   *
   * @function getInstance
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}

declare class TaskInstance {
  /**
   * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance
   * @description Initialize the TaskContext
   *
   * @property accountSid - The ID of the account that owns this Task
   * @property age - The number of seconds since this task was created.
   * @property assignmentStatus - Returns the list of all Tasks in the workspace with the specified AssignmentStatus.
   * @property attributes - The user-defined JSON string describing the custom attributes of this work.
   * @property addons - The addon data for all installed addons is returned with this attribute
   * @property dateCreated - Date this task was created, given as ISO 8601 format.
   * @property dateUpdated - Date this task was updated, given as ISO 8601 format.
   * @property priority - Retrieve the list of all Tasks in the workspace with the specified priority.
   * @property reason - The reason the task was canceled  or completed
   * @property sid - The unique ID of the Task
   * @property taskQueueSid - Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.
   * @property taskQueueFriendlyName - The task_queue_friendly_name
   * @property taskChannelSid - The ID of the Task Channel
   * @property taskChannelUniqueName - The unique name of the Task Channel
   * @property timeout - The amount of time in seconds the task is allowed to live
   * @property workflowSid - Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.
   * @property workflowFriendlyName - The workflow_friendly_name
   * @property workspaceSid - The ID of the Workspace that holds this Task
   * @property url - The url
   * @property links - The links
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The ID of the Workspace that holds this Task
   * @param sid - The sid
   */
  constructor(version: Twilio.Taskrouter.V1, payload: object, workspaceSid: sid, sid: sid);

  _proxy?: TaskContext;
  /**
   * fetch a TaskInstance
   *
   * @function fetch
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a TaskInstance
   *
   * @function remove
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Access the reservations
   *
   * @function reservations
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance
   * @instance
   */
  reservations();
  /**
   * Produce a plain JSON object version of the TaskInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance
   * @instance
   */
  toJSON();
  /**
   * update a TaskInstance
   *
   * @function update
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

declare class TaskContext {
  /**
   * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext
   * @description Initialize the TaskContext
   *
   * @property reservations - reservations resource
   *
   * @param version - Version of the resource
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Taskrouter.V1, workspaceSid: sid, sid: sid);

  /**
   * fetch a TaskInstance
   *
   * @function fetch
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a TaskInstance
   *
   * @function remove
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  reservations?: Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList;
  /**
   * update a TaskInstance
   *
   * @function update
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { TaskContext, TaskInstance, TaskList, TaskPage }
