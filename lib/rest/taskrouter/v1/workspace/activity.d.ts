/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';

declare function ActivityList(version: V1, workspaceSid: string): ActivityListInstance

interface ActivityResource {
  /**
   * The unique ID of the Account that owns this Activity.
   */
  account_sid: string;
  /**
   * Filter by activities that are available or unavailable. (Note: This can be 'true', '1'' or 'yes' to indicate a true value. All other values will represent false)
   */
  available: boolean;
  /**
   * The date this Activity was created.
   */
  date_created: Date;
  /**
   * The date this Activity was updated.
   */
  date_updated: Date;
  /**
   * Filter by an Activity's friendly name
   */
  friendly_name: string;
  /**
   * The unique ID for this Activity.
   */
  sid: string;
  /**
   * The url
   */
  url: string;
  /**
   * The unique ID of the Workspace that this Activity belongs to.
   */
  workspace_sid: string;
}

interface ActivityPayload extends ActivityResource, Page.TwilioResponsePayload {
}

interface ActivitySolution {
  workspaceSid: string;
}

interface ActivityListEachOptions extends ListEachOptions<ActivityInstance> {
  /**
   * Filter by activities that are available or unavailable. (Note: This can be 'true', '1'' or 'yes' to indicate a true value. All other values will represent false)
   */
  available?: string;
  /**
   * Filter by an Activity's friendly name
   */
  friendlyName?: string;
}

interface ActivityListOptions extends ListOptions<ActivityInstance> {
  /**
   * Filter by activities that are available or unavailable. (Note: This can be 'true', '1'' or 'yes' to indicate a true value. All other values will represent false)
   */
  available?: string;
  /**
   * Filter by an Activity's friendly name
   */
  friendlyName?: string;
}

interface ActivityListPageOptions extends PageOptions<ActivityPage> {
  /**
   * Filter by activities that are available or unavailable. (Note: This can be 'true', '1'' or 'yes' to indicate a true value. All other values will represent false)
   */
  available?: string;
  /**
   * Filter by an Activity's friendly name
   */
  friendlyName?: string;
}

interface ActivityListCreateOptions {
  /**
   * Boolean value indicating whether the worker should be eligible to receive a Task when they occupy this Activity. For example, a call center might have an activity named 'On Call' with an availability set to 'false'. Note: This can be 'true', '1' or 'yes' to indicate a true value. All other values will represent false. Defaults to false.
   */
  available?: boolean;
  /**
   * A human-readable name for the Activity, such as 'On Call', 'Break', 'Email', etc. Must be unique in this Workspace. These names will be used to calculate and expose statistics about workers, and give you visibility into the state of each of your workers.
   */
  friendlyName: string;
}

interface ActivityListInstance {
  /**
   * Gets context of a single Activity resource
   *
   * @param sid - The sid
   */
  (sid: string): ActivityContext;
  /**
   * create a ActivityInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  create(opts: ActivityListCreateOptions): Promise<ActivityInstance>;
  /**
   * create a ActivityInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: ActivityListCreateOptions, callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * Streams ActivityInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: ActivityListEachOptions): void;
  /**
   * Streams ActivityInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: ActivityInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Activity resource
   *
   * @param sid - The sid
   */
  get(sid: string): ActivityContext;
  /**
   * Retrieve a single target page of ActivityInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<ActivityPage>;
  /**
   * Retrieve a single target page of ActivityInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: ActivityPage) => any): void;
  /**
   * Lists ActivityInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: ActivityListOptions): Promise<ActivityInstance[]>;
  /**
   * Lists ActivityInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: ActivityListOptions, callback: (error: Error | null, items: ActivityInstance[]) => any): void;
  /**
   * Lists ActivityInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: ActivityInstance[]) => any): void;
  /**
   * Retrieve a single page of ActivityInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: ActivityListPageOptions): Promise<ActivityPage>;
  /**
   * Retrieve a single page of ActivityInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: ActivityListPageOptions, callback: (error: Error | null, items: ActivityPage) => any): void;
  /**
   * Retrieve a single page of ActivityInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: ActivityPage) => any): void;
}

interface ActivityListFetchOptions {
  /**
   * A human-readable name for the Activity, such as 'on-call', 'break', 'email', etc. These names will be used to calculate and expose statistics about workers, and give you visibility into the state of each of your workers.
   */
  friendlyName?: string;
}

interface ActivityListFetchOptions {
  /**
   * A human-readable name for the Activity, such as 'on-call', 'break', 'email', etc. These names will be used to calculate and expose statistics about workers, and give you visibility into the state of each of your workers.
   */
  friendlyName?: string;
}

declare class ActivityPage extends Page<V1, ActivityPayload, ActivityResource, ActivityInstance> {
  constructor(version: V1, response: Response<string>, solution: ActivitySolution);

  /**
   * Build an instance of ActivityInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ActivityPayload): ActivityInstance;
}

declare class ActivityInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: ActivityPayload, workspaceSid: string, sid: string);

  private _proxy: ActivityContext;
  /**
   * The unique ID of the Account that owns this Activity.
   */
  accountSid: string;
  /**
   * Filter by activities that are available or unavailable. (Note: This can be 'true', '1'' or 'yes' to indicate a true value. All other values will represent false)
   */
  available: boolean;
  /**
   * The date this Activity was created.
   */
  dateCreated: Date;
  /**
   * The date this Activity was updated.
   */
  dateUpdated: Date;
  /**
   * fetch a ActivityInstance
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  fetch(): Promise<ActivityInstance>;
  /**
   * fetch a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * Filter by an Activity's friendly name
   */
  friendlyName: string;
  /**
   * remove a ActivityInstance
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  remove(): Promise<ActivityInstance>;
  /**
   * remove a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * The unique ID for this Activity.
   */
  sid: string;
  /**
   * update a ActivityInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  update(opts?: ActivityListFetchOptions): Promise<ActivityInstance>;
  /**
   * update a ActivityInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ActivityListFetchOptions, callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * update a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * The url
   */
  url: string;
  /**
   * The unique ID of the Workspace that this Activity belongs to.
   */
  workspaceSid: string;
}

declare class ActivityContext {
  constructor(version: V1, workspaceSid: string, sid: string);

  /**
   * fetch a ActivityInstance
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  fetch(): Promise<ActivityInstance>;
  /**
   * fetch a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * remove a ActivityInstance
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  remove(): Promise<ActivityInstance>;
  /**
   * remove a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * update a ActivityInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  update(opts?: ActivityListFetchOptions): Promise<ActivityInstance>;
  /**
   * update a ActivityInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ActivityListFetchOptions, callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * update a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ActivityInstance) => any): void;
}

export { ActivityContext, ActivityInstance, ActivityList, ActivityListCreateOptions, ActivityListEachOptions, ActivityListFetchOptions, ActivityListInstance, ActivityListOptions, ActivityListPageOptions, ActivityPage, ActivityPayload, ActivityResource, ActivitySolution }
