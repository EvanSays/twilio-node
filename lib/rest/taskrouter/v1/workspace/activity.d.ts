/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import V1 = require('../../V1');
import deserialize = require('../../../../base/deserialize');
import serialize = require('../../../../base/serialize');
import values = require('../../../../base/values');

/**
 * @constructor Twilio.Taskrouter.V1.WorkspaceContext.ActivityList
 * @description Initialize the ActivityList
 *
 * @param version - Version of the resource
 * @param workspaceSid - The unique ID of the Workspace that this Activity belongs to.
 */
declare function ActivityList(version: V1, workspaceSid: string): ActivityListInstance;

/**
 * Options to pass to update
 *
 * @property friendlyName - A human-readable name for the Activity, such as 'on-call', 'break', 'email', etc.
 */
export interface UpdateOptions {
  friendlyName?: string;
}

/**
 * Options to pass to update
 *
 * @property friendlyName - A human-readable name for the Activity, such as 'on-call', 'break', 'email', etc.
 */
export interface UpdateOptions {
  friendlyName?: string;
}


declare class ActivityPage extends Page {
  /**
   * @constructor Twilio.Taskrouter.V1.WorkspaceContext.ActivityPage
   * @augments Page
   * @description Initialize the ActivityPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Taskrouter.V1, response: object, solution: object);

  /**
   * Build an instance of ActivityInstance
   *
   * @function getInstance
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.ActivityPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class ActivityInstance {
  /**
   * @constructor Twilio.Taskrouter.V1.WorkspaceContext.ActivityInstance
   * @description Initialize the ActivityContext
   *
   * @property accountSid - The unique ID of the Account that owns this Activity.
   * @property available - Filter by activities that are available or unavailable.
   * @property dateCreated - The date this Activity was created.
   * @property dateUpdated - The date this Activity was updated.
   * @property friendlyName - Filter by an Activity's friendly name
   * @property sid - The unique ID for this Activity.
   * @property workspaceSid - The unique ID of the Workspace that this Activity belongs to.
   * @property url - The url
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The unique ID of the Workspace that this Activity belongs to.
   * @param sid - The sid
   */
  constructor(version: Twilio.Taskrouter.V1, payload: object, workspaceSid: sid, sid: sid);

  _proxy?: ActivityContext;
  /**
   * fetch a ActivityInstance
   *
   * @function fetch
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.ActivityInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a ActivityInstance
   *
   * @function remove
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.ActivityInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the ActivityInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.ActivityInstance
   * @instance
   */
  toJSON();
  /**
   * update a ActivityInstance
   *
   * @function update
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.ActivityInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}


declare class ActivityContext {
  /**
   * @constructor Twilio.Taskrouter.V1.WorkspaceContext.ActivityContext
   * @description Initialize the ActivityContext
   *
   * @param version - Version of the resource
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Taskrouter.V1, workspaceSid: sid, sid: sid);

  /**
   * fetch a ActivityInstance
   *
   * @function fetch
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.ActivityContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a ActivityInstance
   *
   * @function remove
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.ActivityContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a ActivityInstance
   *
   * @function update
   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.ActivityContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { ActivityContext, ActivityInstance, ActivityList, ActivityPage }
