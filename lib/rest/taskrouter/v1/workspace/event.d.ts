/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';

declare function EventList(version: V1, workspaceSid: string): EventListInstance

interface EventResource {
  /**
   * The account owning this event
   */
  account_sid: string;
  /**
   * The actor_sid
   */
  actor_sid: string;
  /**
   * The actor_type
   */
  actor_type: string;
  /**
   * The actor_url
   */
  actor_url: string;
  /**
   * A description of the event
   */
  description: string;
  /**
   * Data about this specific event. [See below for more information](https://www.twilio.com/docs/api/taskrouter/events#event-types).
   */
  event_data: string;
  /**
   * The time this event was sent (UTC time)
   */
  event_date: Date;
  /**
   * An identifier for this event
   */
  event_type: string;
  /**
   * The sid of the object this event is most relevant to (TaskSid, ReservationSid, WorkerSid)
   */
  resource_sid: string;
  /**
   * The type of object this event is most relevant to (Task, Reservation, Worker)
   */
  resource_type: string;
  /**
   * The resource_url
   */
  resource_url: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The source
   */
  source: string;
  /**
   * The source_ip_address
   */
  source_ip_address: string;
  /**
   * The url
   */
  url: string;
}

interface EventPayload extends EventResource, Page.TwilioResponsePayload {
}

interface EventSolution {
  workspaceSid: string;
}

interface EventListEachOptions extends ListEachOptions<EventInstance> {
  /**
   * Filter events by an end date. This is helpful for defining a range of events to capture. Input is a GMT ISO 8601 Timestamp.
   */
  endDate?: Date;
  /**
   * Filter events by those of a certain event type
   */
  eventType?: string;
  /**
   * Filter events by up to 'x' minutes in the past. This is helpful for events for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
   */
  minutes?: number;
  /**
   * Filter events by those pertaining to a particular reservation
   */
  reservationSid?: string;
  /**
   * Filter events by a start date. This is helpful for defining a range of events to capture. Input is a GMT ISO 8601 Timestamp.
   */
  startDate?: Date;
  /**
   * Filter events by those pertaining to a particular queue
   */
  taskQueueSid?: string;
  /**
   * Filter events by those pertaining to a particular task
   */
  taskSid?: string;
  /**
   * Filter events by those pertaining to a particular worker
   */
  workerSid?: string;
  /**
   * The workflow_sid
   */
  workflowSid?: string;
}

interface EventListOptions extends ListOptions<EventInstance> {
  /**
   * Filter events by an end date. This is helpful for defining a range of events to capture. Input is a GMT ISO 8601 Timestamp.
   */
  endDate?: Date;
  /**
   * Filter events by those of a certain event type
   */
  eventType?: string;
  /**
   * Filter events by up to 'x' minutes in the past. This is helpful for events for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
   */
  minutes?: number;
  /**
   * Filter events by those pertaining to a particular reservation
   */
  reservationSid?: string;
  /**
   * Filter events by a start date. This is helpful for defining a range of events to capture. Input is a GMT ISO 8601 Timestamp.
   */
  startDate?: Date;
  /**
   * Filter events by those pertaining to a particular queue
   */
  taskQueueSid?: string;
  /**
   * Filter events by those pertaining to a particular task
   */
  taskSid?: string;
  /**
   * Filter events by those pertaining to a particular worker
   */
  workerSid?: string;
  /**
   * The workflow_sid
   */
  workflowSid?: string;
}

interface EventListPageOptions extends PageOptions<EventPage> {
  /**
   * Filter events by an end date. This is helpful for defining a range of events to capture. Input is a GMT ISO 8601 Timestamp.
   */
  endDate?: Date;
  /**
   * Filter events by those of a certain event type
   */
  eventType?: string;
  /**
   * Filter events by up to 'x' minutes in the past. This is helpful for events for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
   */
  minutes?: number;
  /**
   * Filter events by those pertaining to a particular reservation
   */
  reservationSid?: string;
  /**
   * Filter events by a start date. This is helpful for defining a range of events to capture. Input is a GMT ISO 8601 Timestamp.
   */
  startDate?: Date;
  /**
   * Filter events by those pertaining to a particular queue
   */
  taskQueueSid?: string;
  /**
   * Filter events by those pertaining to a particular task
   */
  taskSid?: string;
  /**
   * Filter events by those pertaining to a particular worker
   */
  workerSid?: string;
  /**
   * The workflow_sid
   */
  workflowSid?: string;
}

interface EventListInstance {
  /**
   * Gets context of a single Event resource
   *
   * @param sid - The sid
   */
  (sid: string): EventContext;
  /**
   * Streams EventInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: EventListEachOptions): void;
  /**
   * Streams EventInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: EventInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Event resource
   *
   * @param sid - The sid
   */
  get(sid: string): EventContext;
  /**
   * Retrieve a single target page of EventInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<EventPage>;
  /**
   * Retrieve a single target page of EventInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: EventPage) => any): void;
  /**
   * Lists EventInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: EventListOptions): Promise<EventInstance[]>;
  /**
   * Lists EventInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: EventListOptions, callback: (error: Error | null, items: EventInstance[]) => any): void;
  /**
   * Lists EventInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: EventInstance[]) => any): void;
  /**
   * Retrieve a single page of EventInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: EventListPageOptions): Promise<EventPage>;
  /**
   * Retrieve a single page of EventInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: EventListPageOptions, callback: (error: Error | null, items: EventPage) => any): void;
  /**
   * Retrieve a single page of EventInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: EventPage) => any): void;
}

declare class EventPage extends Page<V1, EventPayload, EventResource, EventInstance> {
  constructor(version: V1, response: Response<string>, solution: EventSolution);

  /**
   * Build an instance of EventInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: EventPayload): EventInstance;
}

declare class EventInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: EventPayload, workspaceSid: string, sid: string);

  private _proxy: EventContext;
  /**
   * The account owning this event
   */
  accountSid: string;
  /**
   * The actor_sid
   */
  actorSid: string;
  /**
   * The actor_type
   */
  actorType: string;
  /**
   * The actor_url
   */
  actorUrl: string;
  /**
   * A description of the event
   */
  description: string;
  /**
   * Data about this specific event. [See below for more information](https://www.twilio.com/docs/api/taskrouter/events#event-types).
   */
  eventData: string;
  /**
   * The time this event was sent (UTC time)
   */
  eventDate: Date;
  /**
   * An identifier for this event
   */
  eventType: string;
  /**
   * fetch a EventInstance
   *
   * @returns Promise that resolves to processed EventInstance
   */
  fetch(): Promise<EventInstance>;
  /**
   * fetch a EventInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: EventInstance) => any): void;
  /**
   * The sid of the object this event is most relevant to (TaskSid, ReservationSid, WorkerSid)
   */
  resourceSid: string;
  /**
   * The type of object this event is most relevant to (Task, Reservation, Worker)
   */
  resourceType: string;
  /**
   * The resource_url
   */
  resourceUrl: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The source
   */
  source: string;
  /**
   * The source_ip_address
   */
  sourceIpAddress: string;
  /**
   * The url
   */
  url: string;
}

declare class EventContext {
  constructor(version: V1, workspaceSid: string, sid: string);

  /**
   * fetch a EventInstance
   *
   * @returns Promise that resolves to processed EventInstance
   */
  fetch(): Promise<EventInstance>;
  /**
   * fetch a EventInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: EventInstance) => any): void;
}

export { EventContext, EventInstance, EventList, EventListEachOptions, EventListInstance, EventListOptions, EventListPageOptions, EventPage, EventPayload, EventResource, EventSolution }
