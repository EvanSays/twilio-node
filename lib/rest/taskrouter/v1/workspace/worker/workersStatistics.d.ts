/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');
import { SerializableClass } from '../../../../../interfaces';

declare function WorkersStatisticsList(version: V1, workspaceSid: string): WorkersStatisticsListInstance

interface WorkersStatisticsResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The cumulative
   */
  cumulative: string;
  /**
   * The realtime
   */
  realtime: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface WorkersStatisticsPayload extends WorkersStatisticsResource, Page.TwilioResponsePayload {
}

interface WorkersStatisticsSolution {
  workspaceSid: string;
}

interface WorkersStatisticsListInstance {
  /**
   * Gets context of a single WorkersStatistics resource
   */
  (): WorkersStatisticsContext;
  /**
   * Gets context of a single WorkersStatistics resource
   */
  get(): WorkersStatisticsContext;
}

interface WorkersStatisticsListFetchOptions {
  /**
   * Filter cumulative statistics by a end date. This is helpful for defining a range of statistics to capture. Input is a string of the format: yyyy-MM-dd'T'HH:mm:ss'Z'.
   */
  endDate?: Date;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * Filter cumulative statistics by up to 'x' minutes in the past. This is helpful for statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
   */
  minutes?: number;
  /**
   * Filter cumulative statistics by a start date. This is helpful for defining a range of statistics to capture. Input is a string of the format: yyyy-MM-dd'T'HH:mm:ss'Z'.
   */
  startDate?: Date;
  /**
   * Filter cumulative statistics by TaskChannel. Takes in a Unique Name ("voice", "sms", "default", etc.) or a TaskChannelSid.
   */
  taskChannel?: string;
  /**
   * Filter the real-time and cumulative statistics based on Workers tied to a particular queue
   */
  taskQueueName?: string;
  /**
   * Filter the real-time and cumulative statistics based on Workers tied to a particular queue
   */
  taskQueueSid?: string;
}

interface WorkersStatisticsListFetchOptions {
  /**
   * Filter cumulative statistics by a end date. This is helpful for defining a range of statistics to capture. Input is a string of the format: yyyy-MM-dd'T'HH:mm:ss'Z'.
   */
  endDate?: Date;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * Filter cumulative statistics by up to 'x' minutes in the past. This is helpful for statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
   */
  minutes?: number;
  /**
   * Filter cumulative statistics by a start date. This is helpful for defining a range of statistics to capture. Input is a string of the format: yyyy-MM-dd'T'HH:mm:ss'Z'.
   */
  startDate?: Date;
  /**
   * Filter cumulative statistics by TaskChannel. Takes in a Unique Name ("voice", "sms", "default", etc.) or a TaskChannelSid.
   */
  taskChannel?: string;
  /**
   * Filter the real-time and cumulative statistics based on Workers tied to a particular queue
   */
  taskQueueName?: string;
  /**
   * Filter the real-time and cumulative statistics based on Workers tied to a particular queue
   */
  taskQueueSid?: string;
}

declare class WorkersStatisticsPage extends Page<V1, WorkersStatisticsPayload, WorkersStatisticsResource, WorkersStatisticsInstance> {
  constructor(version: V1, response: Response<string>, solution: WorkersStatisticsSolution);

  /**
   * Build an instance of WorkersStatisticsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: WorkersStatisticsPayload): WorkersStatisticsInstance;
}

declare class WorkersStatisticsInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   */
  constructor(version: V1, payload: WorkersStatisticsPayload, workspaceSid: string);

  private _proxy: WorkersStatisticsContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The cumulative
   */
  cumulative: string;
  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkersStatisticsInstance
   */
  fetch(opts?: WorkersStatisticsListFetchOptions): Promise<WorkersStatisticsInstance>;
  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkersStatisticsListFetchOptions, callback: (error: Error | null, items: WorkersStatisticsInstance) => any): void;
  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkersStatisticsInstance) => any): void;
  /**
   * The realtime
   */
  realtime: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class WorkersStatisticsContext {
  constructor(version: V1, workspaceSid: string);

  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkersStatisticsInstance
   */
  fetch(opts?: WorkersStatisticsListFetchOptions): Promise<WorkersStatisticsInstance>;
  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkersStatisticsListFetchOptions, callback: (error: Error | null, items: WorkersStatisticsInstance) => any): void;
  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkersStatisticsInstance) => any): void;
}

export { WorkersStatisticsContext, WorkersStatisticsInstance, WorkersStatisticsList, WorkersStatisticsListFetchOptions, WorkersStatisticsListInstance, WorkersStatisticsPage, WorkersStatisticsPayload, WorkersStatisticsResource, WorkersStatisticsSolution }
