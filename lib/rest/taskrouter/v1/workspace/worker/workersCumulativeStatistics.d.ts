/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');
import { SerializableClass } from '../../../../../interfaces';

declare function WorkersCumulativeStatisticsList(version: V1, workspaceSid: string): WorkersCumulativeStatisticsListInstance

interface WorkersCumulativeStatisticsResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The minimum, average, maximum and total time (in seconds) Workers spent in each Activity
   */
  activity_durations: string;
  /**
   * The end_time
   */
  end_time: Date;
  /**
   * The total number of Reservations that were accepted
   */
  reservations_accepted: number;
  /**
   * The total number of Reservations that were canceled
   */
  reservations_canceled: number;
  /**
   * The total number of Reservations that were created
   */
  reservations_created: number;
  /**
   * The total number of Reservations that were rejected
   */
  reservations_rejected: number;
  /**
   * The total number of Reservations that were rescinded
   */
  reservations_rescinded: number;
  /**
   * The total number of Reservations that were timed out
   */
  reservations_timed_out: number;
  /**
   * The start_time
   */
  start_time: Date;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface WorkersCumulativeStatisticsPayload extends WorkersCumulativeStatisticsResource, Page.TwilioResponsePayload {
}

interface WorkersCumulativeStatisticsSolution {
  workspaceSid: string;
}

interface WorkersCumulativeStatisticsListInstance {
  /**
   * Gets context of a single WorkersCumulativeStatistics resource
   */
  (): WorkersCumulativeStatisticsContext;
  /**
   * Gets context of a single WorkersCumulativeStatistics resource
   */
  get(): WorkersCumulativeStatisticsContext;
}

interface WorkersCumulativeStatisticsListFetchOptions {
  /**
   * Filter cumulative statistics by a end date. This is helpful for defining a range of statistics to capture. Input is a string of the format: yyyy-MM-dd'T'HH:mm:ss'Z'.
   */
  endDate?: Date;
  /**
   * Filter cumulative statistics by up to 'x' minutes in the past. This is helpful for statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
   */
  minutes?: number;
  /**
   * Filter cumulative statistics by a start date. This is helpful for defining a range of statistics to capture. Input is a string of the format: yyyy-MM-dd'T'HH:mm:ss'Z'.
   */
  startDate?: Date;
  /**
   * Filter cumulative statistics by TaskChannel. Takes in a Unique Name ("voice", "sms", "default", etc.) or a TaskChannelSid.
   */
  taskChannel?: string;
}

interface WorkersCumulativeStatisticsListFetchOptions {
  /**
   * Filter cumulative statistics by a end date. This is helpful for defining a range of statistics to capture. Input is a string of the format: yyyy-MM-dd'T'HH:mm:ss'Z'.
   */
  endDate?: Date;
  /**
   * Filter cumulative statistics by up to 'x' minutes in the past. This is helpful for statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
   */
  minutes?: number;
  /**
   * Filter cumulative statistics by a start date. This is helpful for defining a range of statistics to capture. Input is a string of the format: yyyy-MM-dd'T'HH:mm:ss'Z'.
   */
  startDate?: Date;
  /**
   * Filter cumulative statistics by TaskChannel. Takes in a Unique Name ("voice", "sms", "default", etc.) or a TaskChannelSid.
   */
  taskChannel?: string;
}

declare class WorkersCumulativeStatisticsPage extends Page<V1, WorkersCumulativeStatisticsPayload, WorkersCumulativeStatisticsResource, WorkersCumulativeStatisticsInstance> {
  constructor(version: V1, response: Response<string>, solution: WorkersCumulativeStatisticsSolution);

  /**
   * Build an instance of WorkersCumulativeStatisticsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: WorkersCumulativeStatisticsPayload): WorkersCumulativeStatisticsInstance;
}

declare class WorkersCumulativeStatisticsInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   */
  constructor(version: V1, payload: WorkersCumulativeStatisticsPayload, workspaceSid: string);

  private _proxy: WorkersCumulativeStatisticsContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The minimum, average, maximum and total time (in seconds) Workers spent in each Activity
   */
  activityDurations: string;
  /**
   * The end_time
   */
  endTime: Date;
  /**
   * fetch a WorkersCumulativeStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkersCumulativeStatisticsInstance
   */
  fetch(opts?: WorkersCumulativeStatisticsListFetchOptions): Promise<WorkersCumulativeStatisticsInstance>;
  /**
   * fetch a WorkersCumulativeStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkersCumulativeStatisticsListFetchOptions, callback: (error: Error | null, items: WorkersCumulativeStatisticsInstance) => any): void;
  /**
   * fetch a WorkersCumulativeStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkersCumulativeStatisticsInstance) => any): void;
  /**
   * The total number of Reservations that were accepted
   */
  reservationsAccepted: number;
  /**
   * The total number of Reservations that were canceled
   */
  reservationsCanceled: number;
  /**
   * The total number of Reservations that were created
   */
  reservationsCreated: number;
  /**
   * The total number of Reservations that were rejected
   */
  reservationsRejected: number;
  /**
   * The total number of Reservations that were rescinded
   */
  reservationsRescinded: number;
  /**
   * The total number of Reservations that were timed out
   */
  reservationsTimedOut: number;
  /**
   * The start_time
   */
  startTime: Date;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class WorkersCumulativeStatisticsContext {
  constructor(version: V1, workspaceSid: string);

  /**
   * fetch a WorkersCumulativeStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkersCumulativeStatisticsInstance
   */
  fetch(opts?: WorkersCumulativeStatisticsListFetchOptions): Promise<WorkersCumulativeStatisticsInstance>;
  /**
   * fetch a WorkersCumulativeStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkersCumulativeStatisticsListFetchOptions, callback: (error: Error | null, items: WorkersCumulativeStatisticsInstance) => any): void;
  /**
   * fetch a WorkersCumulativeStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkersCumulativeStatisticsInstance) => any): void;
}

export { WorkersCumulativeStatisticsContext, WorkersCumulativeStatisticsInstance, WorkersCumulativeStatisticsList, WorkersCumulativeStatisticsListFetchOptions, WorkersCumulativeStatisticsListInstance, WorkersCumulativeStatisticsPage, WorkersCumulativeStatisticsPayload, WorkersCumulativeStatisticsResource, WorkersCumulativeStatisticsSolution }
