/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';
import { SerializableClass } from '../../../../../interfaces';

declare function ReservationList(version: V1, workspaceSid: string, taskSid: string): ReservationListInstance

type ReservationStatus = 'pending'|'accepted'|'rejected'|'timeout'|'canceled'|'rescinded';

type ReservationCallStatus = 'initiated'|'ringing'|'answered'|'completed';

type ReservationConferenceEvent = 'start'|'end'|'join'|'leave'|'mute'|'hold'|'speaker';

interface ReservationResource {
  /**
   * The ID of the Account that owns this Task
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The links
   */
  links: string;
  /**
   * The current status of the reservation. See the table below for possible values.
   */
  reservation_status: ReservationStatus;
  /**
   * The unique ID of this Reservation.
   */
  sid: string;
  /**
   * The ID of the reserved Task
   */
  task_sid: string;
  /**
   * The url
   */
  url: string;
  /**
   * Human readable description of the Worker that is reserved
   */
  worker_name: string;
  /**
   * The ID of the reserved Worker
   */
  worker_sid: string;
  /**
   * The ID of the Workspace that this task is contained within.
   */
  workspace_sid: string;
}

interface ReservationPayload extends ReservationResource, Page.TwilioResponsePayload {
}

interface ReservationSolution {
  taskSid: string;
  workspaceSid: string;
}

interface ReservationListEachOptions extends ListEachOptions<ReservationInstance> {
  /**
   * Returns the list of reservations for a task with a specified ReservationStatus
   */
  reservationStatus?: ReservationStatus;
}

interface ReservationListOptions extends ListOptions<ReservationInstance> {
  /**
   * Returns the list of reservations for a task with a specified ReservationStatus
   */
  reservationStatus?: ReservationStatus;
}

interface ReservationListPageOptions extends PageOptions<ReservationPage> {
  /**
   * Returns the list of reservations for a task with a specified ReservationStatus
   */
  reservationStatus?: ReservationStatus;
}

interface ReservationListInstance {
  /**
   * Gets context of a single Reservation resource
   *
   * @param sid - The sid
   */
  (sid: string): ReservationContext;
  /**
   * Streams ReservationInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: ReservationListEachOptions): void;
  /**
   * Streams ReservationInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: ReservationInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Reservation resource
   *
   * @param sid - The sid
   */
  get(sid: string): ReservationContext;
  /**
   * Retrieve a single target page of ReservationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<ReservationPage>;
  /**
   * Retrieve a single target page of ReservationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: ReservationPage) => any): void;
  /**
   * Lists ReservationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: ReservationListOptions): Promise<ReservationInstance[]>;
  /**
   * Lists ReservationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: ReservationListOptions, callback: (error: Error | null, items: ReservationInstance[]) => any): void;
  /**
   * Lists ReservationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: ReservationInstance[]) => any): void;
  /**
   * Retrieve a single page of ReservationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: ReservationListPageOptions): Promise<ReservationPage>;
  /**
   * Retrieve a single page of ReservationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: ReservationListPageOptions, callback: (error: Error | null, items: ReservationPage) => any): void;
  /**
   * Retrieve a single page of ReservationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: ReservationPage) => any): void;
}

interface ReservationListFetchOptions {
  /**
   * The beep
   */
  beep?: string;
  /**
   * No
   */
  callAccept?: boolean;
  /**
   * Yes
   */
  callFrom?: string;
  /**
   * No
   */
  callRecord?: string;
  /**
   * No
   */
  callStatusCallbackUrl?: string;
  /**
   * No
   */
  callTimeout?: number;
  /**
   * No
   */
  callTo?: string;
  /**
   * Yes
   */
  callUrl?: string;
  /**
   * The conference_record
   */
  conferenceRecord?: string;
  /**
   * The conference_recording_status_callback
   */
  conferenceRecordingStatusCallback?: string;
  /**
   * The conference_recording_status_callback_method
   */
  conferenceRecordingStatusCallbackMethod?: string;
  /**
   * The conference_status_callback
   */
  conferenceStatusCallback?: string;
  /**
   * The conference_status_callback_event
   */
  conferenceStatusCallbackEvent?: ReservationConferenceEvent[];
  /**
   * The conference_status_callback_method
   */
  conferenceStatusCallbackMethod?: string;
  /**
   * The conference_trim
   */
  conferenceTrim?: string;
  /**
   * Yes
   */
  dequeueFrom?: string;
  /**
   * No
   */
  dequeuePostWorkActivitySid?: string;
  /**
   * No
   */
  dequeueRecord?: string;
  /**
   * No
   */
  dequeueStatusCallbackEvent?: string[];
  /**
   * No
   */
  dequeueStatusCallbackUrl?: string;
  /**
   * No
   */
  dequeueTimeout?: number;
  /**
   * No
   */
  dequeueTo?: string;
  /**
   * The early_media
   */
  earlyMedia?: boolean;
  /**
   * The end_conference_on_exit
   */
  endConferenceOnExit?: boolean;
  /**
   * No
   */
  from?: string;
  /**
   * Yes
   */
  instruction?: string;
  /**
   * The max_participants
   */
  maxParticipants?: number;
  /**
   * The muted
   */
  muted?: boolean;
  /**
   * No
   */
  postWorkActivitySid?: string;
  /**
   * The record
   */
  record?: boolean;
  /**
   * The recording_channels
   */
  recordingChannels?: string;
  /**
   * The recording_status_callback
   */
  recordingStatusCallback?: string;
  /**
   * The recording_status_callback_method
   */
  recordingStatusCallbackMethod?: string;
  /**
   * No
   */
  redirectAccept?: boolean;
  /**
   * Yes
   */
  redirectCallSid?: string;
  /**
   * Yes
   */
  redirectUrl?: string;
  /**
   * The region
   */
  region?: string;
  /**
   * Yes
   */
  reservationStatus?: ReservationStatus;
  /**
   * The sip_auth_password
   */
  sipAuthPassword?: string;
  /**
   * The sip_auth_username
   */
  sipAuthUsername?: string;
  /**
   * The start_conference_on_enter
   */
  startConferenceOnEnter?: boolean;
  /**
   * The status_callback
   */
  statusCallback?: string;
  /**
   * The status_callback_event
   */
  statusCallbackEvent?: ReservationCallStatus[];
  /**
   * The status_callback_method
   */
  statusCallbackMethod?: string;
  /**
   * No
   */
  timeout?: number;
  /**
   * No
   */
  to?: string;
  /**
   * The wait_method
   */
  waitMethod?: string;
  /**
   * The wait_url
   */
  waitUrl?: string;
  /**
   * No
   */
  workerActivitySid?: string;
}

interface ReservationListFetchOptions {
  /**
   * The beep
   */
  beep?: string;
  /**
   * No
   */
  callAccept?: boolean;
  /**
   * Yes
   */
  callFrom?: string;
  /**
   * No
   */
  callRecord?: string;
  /**
   * No
   */
  callStatusCallbackUrl?: string;
  /**
   * No
   */
  callTimeout?: number;
  /**
   * No
   */
  callTo?: string;
  /**
   * Yes
   */
  callUrl?: string;
  /**
   * The conference_record
   */
  conferenceRecord?: string;
  /**
   * The conference_recording_status_callback
   */
  conferenceRecordingStatusCallback?: string;
  /**
   * The conference_recording_status_callback_method
   */
  conferenceRecordingStatusCallbackMethod?: string;
  /**
   * The conference_status_callback
   */
  conferenceStatusCallback?: string;
  /**
   * The conference_status_callback_event
   */
  conferenceStatusCallbackEvent?: ReservationConferenceEvent[];
  /**
   * The conference_status_callback_method
   */
  conferenceStatusCallbackMethod?: string;
  /**
   * The conference_trim
   */
  conferenceTrim?: string;
  /**
   * Yes
   */
  dequeueFrom?: string;
  /**
   * No
   */
  dequeuePostWorkActivitySid?: string;
  /**
   * No
   */
  dequeueRecord?: string;
  /**
   * No
   */
  dequeueStatusCallbackEvent?: string[];
  /**
   * No
   */
  dequeueStatusCallbackUrl?: string;
  /**
   * No
   */
  dequeueTimeout?: number;
  /**
   * No
   */
  dequeueTo?: string;
  /**
   * The early_media
   */
  earlyMedia?: boolean;
  /**
   * The end_conference_on_exit
   */
  endConferenceOnExit?: boolean;
  /**
   * No
   */
  from?: string;
  /**
   * Yes
   */
  instruction?: string;
  /**
   * The max_participants
   */
  maxParticipants?: number;
  /**
   * The muted
   */
  muted?: boolean;
  /**
   * No
   */
  postWorkActivitySid?: string;
  /**
   * The record
   */
  record?: boolean;
  /**
   * The recording_channels
   */
  recordingChannels?: string;
  /**
   * The recording_status_callback
   */
  recordingStatusCallback?: string;
  /**
   * The recording_status_callback_method
   */
  recordingStatusCallbackMethod?: string;
  /**
   * No
   */
  redirectAccept?: boolean;
  /**
   * Yes
   */
  redirectCallSid?: string;
  /**
   * Yes
   */
  redirectUrl?: string;
  /**
   * The region
   */
  region?: string;
  /**
   * Yes
   */
  reservationStatus?: ReservationStatus;
  /**
   * The sip_auth_password
   */
  sipAuthPassword?: string;
  /**
   * The sip_auth_username
   */
  sipAuthUsername?: string;
  /**
   * The start_conference_on_enter
   */
  startConferenceOnEnter?: boolean;
  /**
   * The status_callback
   */
  statusCallback?: string;
  /**
   * The status_callback_event
   */
  statusCallbackEvent?: ReservationCallStatus[];
  /**
   * The status_callback_method
   */
  statusCallbackMethod?: string;
  /**
   * No
   */
  timeout?: number;
  /**
   * No
   */
  to?: string;
  /**
   * The wait_method
   */
  waitMethod?: string;
  /**
   * The wait_url
   */
  waitUrl?: string;
  /**
   * No
   */
  workerActivitySid?: string;
}

declare class ReservationPage extends Page<V1, ReservationPayload, ReservationResource, ReservationInstance> {
  constructor(version: V1, response: Response<string>, solution: ReservationSolution);

  /**
   * Build an instance of ReservationInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ReservationPayload): ReservationInstance;
}

declare class ReservationInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param taskSid - The task_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: ReservationPayload, workspaceSid: string, taskSid: string, sid: string);

  private _proxy: ReservationContext;
  /**
   * The ID of the Account that owns this Task
   */
  accountSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a ReservationInstance
   *
   * @returns Promise that resolves to processed ReservationInstance
   */
  fetch(): Promise<ReservationInstance>;
  /**
   * fetch a ReservationInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ReservationInstance) => any): void;
  /**
   * The links
   */
  links: string;
  /**
   * The current status of the reservation. See the table below for possible values.
   */
  reservationStatus: ReservationStatus;
  /**
   * The unique ID of this Reservation.
   */
  sid: string;
  /**
   * The ID of the reserved Task
   */
  taskSid: string;
  /**
   * update a ReservationInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ReservationInstance
   */
  update(opts?: ReservationListFetchOptions): Promise<ReservationInstance>;
  /**
   * update a ReservationInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ReservationListFetchOptions, callback: (error: Error | null, items: ReservationInstance) => any): void;
  /**
   * update a ReservationInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ReservationInstance) => any): void;
  /**
   * The url
   */
  url: string;
  /**
   * Human readable description of the Worker that is reserved
   */
  workerName: string;
  /**
   * The ID of the reserved Worker
   */
  workerSid: string;
  /**
   * The ID of the Workspace that this task is contained within.
   */
  workspaceSid: string;
}

declare class ReservationContext {
  constructor(version: V1, workspaceSid: string, taskSid: string, sid: string);

  /**
   * fetch a ReservationInstance
   *
   * @returns Promise that resolves to processed ReservationInstance
   */
  fetch(): Promise<ReservationInstance>;
  /**
   * fetch a ReservationInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ReservationInstance) => any): void;
  /**
   * update a ReservationInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ReservationInstance
   */
  update(opts?: ReservationListFetchOptions): Promise<ReservationInstance>;
  /**
   * update a ReservationInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ReservationListFetchOptions, callback: (error: Error | null, items: ReservationInstance) => any): void;
  /**
   * update a ReservationInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ReservationInstance) => any): void;
}

export { ReservationCallStatus, ReservationConferenceEvent, ReservationContext, ReservationInstance, ReservationList, ReservationListEachOptions, ReservationListFetchOptions, ReservationListInstance, ReservationListOptions, ReservationListPageOptions, ReservationPage, ReservationPayload, ReservationResource, ReservationSolution, ReservationStatus }
