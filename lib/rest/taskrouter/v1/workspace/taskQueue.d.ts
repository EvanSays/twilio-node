/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';
import { TaskQueueCumulativeStatisticsListInstance } from './taskQueue/taskQueueCumulativeStatistics';
import { TaskQueueRealTimeStatisticsListInstance } from './taskQueue/taskQueueRealTimeStatistics';
import { TaskQueueStatisticsListInstance } from './taskQueue/taskQueueStatistics';

declare function TaskQueueList(version: V1, workspaceSid: string): TaskQueueListInstance

type TaskQueueTaskOrder = 'FIFO'|'LIFO';

interface TaskQueueResource {
  /**
   * The ID of the Account that owns this TaskQueue
   */
  account_sid: string;
  /**
   * The assignment_activity_name
   */
  assignment_activity_name: string;
  /**
   * ActivitySID to assign workers once a task is assigned for them
   */
  assignment_activity_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * Filter by a human readable description of a TaskQueue (for example "Customer Support" or "2014 Election Campaign")
   */
  friendly_name: string;
  /**
   * The links
   */
  links: string;
  /**
   * The maximum amount of workers to create reservations for the assignment of a task while in this queue. Defaults to 1, with a Maximum of 50.
   */
  max_reserved_workers: number;
  /**
   * The reservation_activity_name
   */
  reservation_activity_name: string;
  /**
   * ActivitySID to assign workers once a task is reserved for them
   */
  reservation_activity_sid: string;
  /**
   * The unique ID of the TaskQueue
   */
  sid: string;
  /**
   * A string describing the Worker selection criteria for any Tasks that enter this TaskQueue. For example `'"language" == "spanish"'` If no TargetWorkers parameter is provided, Tasks will wait in this TaskQueue until they are either deleted or moved to another TaskQueue. Additional examples on how to describing Worker selection criteria below. Defaults to 1==1.
   */
  target_workers: string;
  /**
   * TaskOrder will determine which order the Tasks will be assigned to Workers. Set this parameter to LIFO to assign most recently created Task first or FIFO to assign the oldest Task. Default is FIFO. [Click here](https://www.twilio.com/docs/api/taskrouter/last-first-out-lifo) to learn more.
   */
  task_order: TaskQueueTaskOrder;
  /**
   * The url
   */
  url: string;
  /**
   * The ID of the Workspace that owns this TaskQueue
   */
  workspace_sid: string;
}

interface TaskQueuePayload extends TaskQueueResource, Page.TwilioResponsePayload {
}

interface TaskQueueSolution {
  workspaceSid: string;
}

interface TaskQueueListEachOptions extends ListEachOptions<TaskQueueInstance> {
  /**
   * Provide a Worker attributes expression, and this will return the list of TaskQueues that would distribute tasks to a worker with these attributes.
   */
  evaluateWorkerAttributes?: string;
  /**
   * Filter by a human readable description of a TaskQueue (for example "Customer Support" or "2014 Election Campaign")
   */
  friendlyName?: string;
  /**
   * The worker_sid
   */
  workerSid?: string;
}

interface TaskQueueListOptions extends ListOptions<TaskQueueInstance> {
  /**
   * Provide a Worker attributes expression, and this will return the list of TaskQueues that would distribute tasks to a worker with these attributes.
   */
  evaluateWorkerAttributes?: string;
  /**
   * Filter by a human readable description of a TaskQueue (for example "Customer Support" or "2014 Election Campaign")
   */
  friendlyName?: string;
  /**
   * The worker_sid
   */
  workerSid?: string;
}

interface TaskQueueListPageOptions extends PageOptions<TaskQueuePage> {
  /**
   * Provide a Worker attributes expression, and this will return the list of TaskQueues that would distribute tasks to a worker with these attributes.
   */
  evaluateWorkerAttributes?: string;
  /**
   * Filter by a human readable description of a TaskQueue (for example "Customer Support" or "2014 Election Campaign")
   */
  friendlyName?: string;
  /**
   * The worker_sid
   */
  workerSid?: string;
}

interface TaskQueueListCreateOptions {
  /**
   * ActivitySID to assign workers once a task is assigned for them
   */
  assignmentActivitySid: string;
  /**
   * Human readable description of this TaskQueue (for example "Support â€“ Tier 1", "Sales" or "Escalation")
   */
  friendlyName: string;
  /**
   * The maximum amount of workers to create reservations for the assignment of a task while in this queue. Defaults to 1, with a Maximum of 50.
   */
  maxReservedWorkers?: number;
  /**
   * ActivitySID to assign workers once a task is reserved for them
   */
  reservationActivitySid: string;
  /**
   * A string describing the Worker selection criteria for any Tasks that enter this TaskQueue. For example `'"language" == "spanish"'` If no TargetWorkers parameter is provided, Tasks will wait in this TaskQueue until they are either deleted or moved to another TaskQueue. Additional examples on how to describing Worker selection criteria below. Defaults to 1==1.
   */
  targetWorkers?: string;
  /**
   * TaskOrder will determine which order the Tasks will be assigned to Workers. Set this parameter to LIFO to assign most recently created Task first or FIFO to assign the oldest Task. Default is FIFO. [Click here](https://www.twilio.com/docs/api/taskrouter/last-first-out-lifo) to learn more.
   */
  taskOrder?: TaskQueueTaskOrder;
}

interface TaskQueueListInstance {
  /**
   * Gets context of a single TaskQueue resource
   *
   * @param sid - The sid
   */
  (sid: string): TaskQueueContext;
  /**
   * create a TaskQueueInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  create(opts: TaskQueueListCreateOptions): Promise<TaskQueueInstance>;
  /**
   * create a TaskQueueInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: TaskQueueListCreateOptions, callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * Streams TaskQueueInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: TaskQueueListEachOptions): void;
  /**
   * Streams TaskQueueInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: TaskQueueInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single TaskQueue resource
   *
   * @param sid - The sid
   */
  get(sid: string): TaskQueueContext;
  /**
   * Retrieve a single target page of TaskQueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<TaskQueuePage>;
  /**
   * Retrieve a single target page of TaskQueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: TaskQueuePage) => any): void;
  /**
   * Lists TaskQueueInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: TaskQueueListOptions): Promise<TaskQueueInstance[]>;
  /**
   * Lists TaskQueueInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: TaskQueueListOptions, callback: (error: Error | null, items: TaskQueueInstance[]) => any): void;
  /**
   * Lists TaskQueueInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: TaskQueueInstance[]) => any): void;
  /**
   * Retrieve a single page of TaskQueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: TaskQueueListPageOptions): Promise<TaskQueuePage>;
  /**
   * Retrieve a single page of TaskQueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: TaskQueueListPageOptions, callback: (error: Error | null, items: TaskQueuePage) => any): void;
  /**
   * Retrieve a single page of TaskQueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: TaskQueuePage) => any): void;
}

interface TaskQueueListFetchOptions {
  /**
   * ActivitySID that will be assigned to Workers when they are assigned a task from this TaskQueue.
   */
  assignmentActivitySid?: string;
  /**
   * Human readable description of this TaskQueue (for example "Support â€“ Tier 1", "Sales" or "Escalation")
   */
  friendlyName?: string;
  /**
   * The maximum amount of workers to create reservations for the assignment of a task while in this queue. Maximum of 50.
   */
  maxReservedWorkers?: number;
  /**
   * ActivitySID that will be assigned to Workers when they are reserved for a task from this TaskQueue.
   */
  reservationActivitySid?: string;
  /**
   * A string describing the Worker selection criteria for any Tasks that enter this TaskQueue. For example '"language" == "spanish"' If no TargetWorkers parameter is provided, Tasks will wait in this queue until they are either deleted or moved to another queue. Additional examples on how to describing Worker selection criteria below.
   */
  targetWorkers?: string;
  /**
   * TaskOrder will determine which order the Tasks will be assigned to Workers. Set this parameter to LIFO to assign most recently created Task first or FIFO to assign the oldest Task. Default is FIFO. [Click here](https://www.twilio.com/docs/api/taskrouter/last-first-out-lifo) to learn more.
   */
  taskOrder?: TaskQueueTaskOrder;
}

interface TaskQueueListFetchOptions {
  /**
   * ActivitySID that will be assigned to Workers when they are assigned a task from this TaskQueue.
   */
  assignmentActivitySid?: string;
  /**
   * Human readable description of this TaskQueue (for example "Support â€“ Tier 1", "Sales" or "Escalation")
   */
  friendlyName?: string;
  /**
   * The maximum amount of workers to create reservations for the assignment of a task while in this queue. Maximum of 50.
   */
  maxReservedWorkers?: number;
  /**
   * ActivitySID that will be assigned to Workers when they are reserved for a task from this TaskQueue.
   */
  reservationActivitySid?: string;
  /**
   * A string describing the Worker selection criteria for any Tasks that enter this TaskQueue. For example '"language" == "spanish"' If no TargetWorkers parameter is provided, Tasks will wait in this queue until they are either deleted or moved to another queue. Additional examples on how to describing Worker selection criteria below.
   */
  targetWorkers?: string;
  /**
   * TaskOrder will determine which order the Tasks will be assigned to Workers. Set this parameter to LIFO to assign most recently created Task first or FIFO to assign the oldest Task. Default is FIFO. [Click here](https://www.twilio.com/docs/api/taskrouter/last-first-out-lifo) to learn more.
   */
  taskOrder?: TaskQueueTaskOrder;
}

declare class TaskQueuePage extends Page<V1, TaskQueuePayload, TaskQueueResource, TaskQueueInstance> {
  constructor(version: V1, response: Response<string>, solution: TaskQueueSolution);

  /**
   * Build an instance of TaskQueueInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TaskQueuePayload): TaskQueueInstance;
}

declare class TaskQueueInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: TaskQueuePayload, workspaceSid: string, sid: string);

  private _proxy: TaskQueueContext;
  /**
   * The ID of the Account that owns this TaskQueue
   */
  accountSid: string;
  /**
   * The assignment_activity_name
   */
  assignmentActivityName: string;
  /**
   * ActivitySID to assign workers once a task is assigned for them
   */
  assignmentActivitySid: string;
  cumulativeStatistics(): TaskQueueCumulativeStatisticsListInstance;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a TaskQueueInstance
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  fetch(): Promise<TaskQueueInstance>;
  /**
   * fetch a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * Filter by a human readable description of a TaskQueue (for example "Customer Support" or "2014 Election Campaign")
   */
  friendlyName: string;
  /**
   * The links
   */
  links: string;
  /**
   * The maximum amount of workers to create reservations for the assignment of a task while in this queue. Defaults to 1, with a Maximum of 50.
   */
  maxReservedWorkers: number;
  realTimeStatistics(): TaskQueueRealTimeStatisticsListInstance;
  /**
   * remove a TaskQueueInstance
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  remove(): Promise<TaskQueueInstance>;
  /**
   * remove a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * The reservation_activity_name
   */
  reservationActivityName: string;
  /**
   * ActivitySID to assign workers once a task is reserved for them
   */
  reservationActivitySid: string;
  /**
   * The unique ID of the TaskQueue
   */
  sid: string;
  statistics(): TaskQueueStatisticsListInstance;
  /**
   * A string describing the Worker selection criteria for any Tasks that enter this TaskQueue. For example `'"language" == "spanish"'` If no TargetWorkers parameter is provided, Tasks will wait in this TaskQueue until they are either deleted or moved to another TaskQueue. Additional examples on how to describing Worker selection criteria below. Defaults to 1==1.
   */
  targetWorkers: string;
  /**
   * TaskOrder will determine which order the Tasks will be assigned to Workers. Set this parameter to LIFO to assign most recently created Task first or FIFO to assign the oldest Task. Default is FIFO. [Click here](https://www.twilio.com/docs/api/taskrouter/last-first-out-lifo) to learn more.
   */
  taskOrder: TaskQueueTaskOrder;
  /**
   * update a TaskQueueInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  update(opts?: TaskQueueListFetchOptions): Promise<TaskQueueInstance>;
  /**
   * update a TaskQueueInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: TaskQueueListFetchOptions, callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * update a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * The url
   */
  url: string;
  /**
   * The ID of the Workspace that owns this TaskQueue
   */
  workspaceSid: string;
}

declare class TaskQueueContext {
  constructor(version: V1, workspaceSid: string, sid: string);

  cumulativeStatistics: TaskQueueCumulativeStatisticsListInstance;
  /**
   * fetch a TaskQueueInstance
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  fetch(): Promise<TaskQueueInstance>;
  /**
   * fetch a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  realTimeStatistics: TaskQueueRealTimeStatisticsListInstance;
  /**
   * remove a TaskQueueInstance
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  remove(): Promise<TaskQueueInstance>;
  /**
   * remove a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  statistics: TaskQueueStatisticsListInstance;
  /**
   * update a TaskQueueInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  update(opts?: TaskQueueListFetchOptions): Promise<TaskQueueInstance>;
  /**
   * update a TaskQueueInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: TaskQueueListFetchOptions, callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * update a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
}

export { TaskQueueContext, TaskQueueInstance, TaskQueueList, TaskQueueListCreateOptions, TaskQueueListEachOptions, TaskQueueListFetchOptions, TaskQueueListInstance, TaskQueueListOptions, TaskQueueListPageOptions, TaskQueuePage, TaskQueuePayload, TaskQueueResource, TaskQueueSolution, TaskQueueTaskOrder }
