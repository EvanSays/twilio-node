/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';
import { SerializableClass } from '../../../../../interfaces';
import { StepContextListInstance } from './step/stepContext';

declare function StepList(version: V1, flowSid: string, engagementSid: string): StepListInstance

interface StepResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The context
   */
  context: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The engagement_sid
   */
  engagement_sid: string;
  /**
   * The flow_sid
   */
  flow_sid: string;
  /**
   * The links
   */
  links: string;
  /**
   * The name
   */
  name: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The transitioned_from
   */
  transitioned_from: string;
  /**
   * The transitioned_to
   */
  transitioned_to: string;
  /**
   * The url
   */
  url: string;
}

interface StepPayload extends StepResource, Page.TwilioResponsePayload {
}

interface StepSolution {
  engagementSid: string;
  flowSid: string;
}

interface StepListEachOptions extends ListEachOptions<StepInstance> {
}

interface StepListOptions extends ListOptions<StepInstance> {
}

interface StepListPageOptions extends PageOptions<StepPage> {
}

interface StepListInstance {
  /**
   * Gets context of a single Step resource
   *
   * @param sid - The sid
   */
  (sid: string): StepContext;
  /**
   * Streams StepInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: StepListEachOptions): void;
  /**
   * Streams StepInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: StepInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Step resource
   *
   * @param sid - The sid
   */
  get(sid: string): StepContext;
  /**
   * Retrieve a single target page of StepInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<StepPage>;
  /**
   * Retrieve a single target page of StepInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: StepPage) => any): void;
  /**
   * Lists StepInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: StepListOptions): Promise<StepInstance[]>;
  /**
   * Lists StepInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: StepListOptions, callback: (error: Error | null, items: StepInstance[]) => any): void;
  /**
   * Lists StepInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: StepInstance[]) => any): void;
  /**
   * Retrieve a single page of StepInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: StepListPageOptions): Promise<StepPage>;
  /**
   * Retrieve a single page of StepInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: StepListPageOptions, callback: (error: Error | null, items: StepPage) => any): void;
  /**
   * Retrieve a single page of StepInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: StepPage) => any): void;
}

declare class StepPage extends Page<V1, StepPayload, StepResource, StepInstance> {
  constructor(version: V1, response: Response<string>, solution: StepSolution);

  /**
   * Build an instance of StepInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: StepPayload): StepInstance;
}

declare class StepInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param flowSid - The flow_sid
   * @param engagementSid - The engagement_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: StepPayload, flowSid: string, engagementSid: string, sid: string);

  private _proxy: StepContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The context
   */
  context: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * The engagement_sid
   */
  engagementSid: string;
  /**
   * fetch a StepInstance
   *
   * @returns Promise that resolves to processed StepInstance
   */
  fetch(): Promise<StepInstance>;
  /**
   * fetch a StepInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: StepInstance) => any): void;
  /**
   * The flow_sid
   */
  flowSid: string;
  /**
   * The links
   */
  links: string;
  /**
   * The name
   */
  name: string;
  /**
   * The sid
   */
  sid: string;
  stepContext(): StepContextListInstance;
  /**
   * The transitioned_from
   */
  transitionedFrom: string;
  /**
   * The transitioned_to
   */
  transitionedTo: string;
  /**
   * The url
   */
  url: string;
}

declare class StepContext {
  constructor(version: V1, flowSid: string, engagementSid: string, sid: string);

  /**
   * fetch a StepInstance
   *
   * @returns Promise that resolves to processed StepInstance
   */
  fetch(): Promise<StepInstance>;
  /**
   * fetch a StepInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: StepInstance) => any): void;
  stepContext: StepContextListInstance;
}

export { StepContext, StepInstance, StepList, StepListEachOptions, StepListInstance, StepListOptions, StepListPageOptions, StepPage, StepPayload, StepResource, StepSolution }
