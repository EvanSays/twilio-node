/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../../base/Page');
import Response = require('../../../../../../http/response');
import V1 = require('../../../../V1');
import { SerializableClass } from '../../../../../../interfaces';

/**
 * @description Initialize the StepContextList
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param version - Version of the resource
 * @param flowSid - The flow_sid
 * @param engagementSid - The engagement_sid
 * @param stepSid - The step_sid
 */
declare function StepContextList(version: V1, flowSid: string, engagementSid: string, stepSid: string): StepContextListInstance;

interface StepContextResource {
  account_sid: string;
  context: string;
  engagement_sid: string;
  flow_sid: string;
  step_sid: string;
  url: string;
}

interface StepContextPayload extends StepContextResource, Page.TwilioResponsePayload {
}

interface StepContextSolution {
  engagementSid?: string;
  flowSid?: string;
  stepSid?: string;
}

interface StepContextListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): StepContextContext;
  /**
   * Constructs a step_context
   */
  get(): StepContextContext;
}


declare class StepContextPage extends Page {
  /**
   * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextPage
   * @augments Page
   * @description Initialize the StepContextPage
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Studio.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of StepContextInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class StepContextInstance {
  /**
   * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextInstance
   * @description Initialize the StepContextContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property accountSid - The account_sid
   * @property context - The context
   * @property engagementSid - The engagement_sid
   * @property flowSid - The flow_sid
   * @property stepSid - The step_sid
   * @property url - The url
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param flowSid - The flow_sid
   * @param engagementSid - The engagement_sid
   * @param stepSid - The step_sid
   */
  constructor(version: Twilio.Studio.V1, payload: object, flowSid: sid, engagementSid: sid, stepSid: sid);

  _proxy?: StepContextContext;
  /**
   * fetch a StepContextInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: StepContextInstance) => any);
  /**
   * Produce a plain JSON object version of the StepContextInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON();
}


declare class StepContextContext {
  /**
   * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextContext
   * @description Initialize the StepContextContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param flowSid - The flow_sid
   * @param engagementSid - The engagement_sid
   * @param stepSid - The step_sid
   */
  constructor(version: Twilio.Studio.V1, flowSid: sid, engagementSid: sid, stepSid: sid);

  /**
   * fetch a StepContextInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: StepContextContext) => any);
}

export { StepContextContext, StepContextInstance, StepContextList, StepContextListInstance, StepContextPage, StepContextPayload, StepContextResource, StepContextSolution }
