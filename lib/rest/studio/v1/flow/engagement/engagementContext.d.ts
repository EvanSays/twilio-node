/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');
import { SerializableClass } from '../../../../../interfaces';

declare function EngagementContextList(version: V1, flowSid: string, engagementSid: string): EngagementContextListInstance

interface EngagementContextResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The context
   */
  context: string;
  /**
   * The engagement_sid
   */
  engagement_sid: string;
  /**
   * The flow_sid
   */
  flow_sid: string;
  /**
   * The url
   */
  url: string;
}

interface EngagementContextPayload extends EngagementContextResource, Page.TwilioResponsePayload {
}

interface EngagementContextSolution {
  engagementSid: string;
  flowSid: string;
}

interface EngagementContextListInstance {
  /**
   * Gets context of a single EngagementContext resource
   */
  (): EngagementContextContext;
  /**
   * Gets context of a single EngagementContext resource
   */
  get(): EngagementContextContext;
}

declare class EngagementContextPage extends Page<V1, EngagementContextPayload, EngagementContextResource, EngagementContextInstance> {
  constructor(version: V1, response: Response<string>, solution: EngagementContextSolution);

  /**
   * Build an instance of EngagementContextInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: EngagementContextPayload): EngagementContextInstance;
}

declare class EngagementContextInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param flowSid - The flow_sid
   * @param engagementSid - The engagement_sid
   */
  constructor(version: V1, payload: EngagementContextPayload, flowSid: string, engagementSid: string);

  private _proxy: EngagementContextContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The context
   */
  context: string;
  /**
   * The engagement_sid
   */
  engagementSid: string;
  /**
   * fetch a EngagementContextInstance
   *
   * @returns Promise that resolves to processed EngagementContextInstance
   */
  fetch(): Promise<EngagementContextInstance>;
  /**
   * fetch a EngagementContextInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: EngagementContextInstance) => any): void;
  /**
   * The flow_sid
   */
  flowSid: string;
  /**
   * The url
   */
  url: string;
}

declare class EngagementContextContext {
  constructor(version: V1, flowSid: string, engagementSid: string);

  /**
   * fetch a EngagementContextInstance
   *
   * @returns Promise that resolves to processed EngagementContextInstance
   */
  fetch(): Promise<EngagementContextInstance>;
  /**
   * fetch a EngagementContextInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: EngagementContextInstance) => any): void;
}

export { EngagementContextContext, EngagementContextInstance, EngagementContextList, EngagementContextListInstance, EngagementContextPage, EngagementContextPayload, EngagementContextResource, EngagementContextSolution }
