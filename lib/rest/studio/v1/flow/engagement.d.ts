/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import serialize = require('../../../../base/serialize');
import { EngagementContextList } from './engagement/engagementContext';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';
import { StepList } from './engagement/step';

/**
 * @description Initialize the EngagementList
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param version - Version of the resource
 * @param flowSid - The flow_sid
 */
declare function EngagementList(version: V1, flowSid: string): EngagementListInstance;

interface EngagementResource {
  account_sid: string;
  contact_channel_address: string;
  contact_sid: string;
  context: string;
  date_created: Date;
  date_updated: Date;
  flow_sid: string;
  links: string;
  sid: string;
  status: EngagementStatus;
  url: string;
}

interface EngagementPayload extends EngagementResource, Page.TwilioResponsePayload {
}

interface EngagementSolution {
  flowSid?: string;
}

interface EngagementListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): EngagementContext;
  /**
   * create a EngagementInstance
   *
   * @function create
   * @memberof Twilio.Studio.V1.FlowContext.EngagementList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  create(opts: object, callback?: function);
  /**
   * Streams EngagementInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Studio.V1.FlowContext.EngagementList
   * @instance
   *
   * @param opts - ...
   * @param callback - Function to process each record
   */
  each(opts?: object, callback?: Function);
  /**
   * Constructs a engagement
   *
   * @function get
   * @memberof Twilio.Studio.V1.FlowContext.EngagementList
   * @instance
   *
   * @param sid - The sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of EngagementInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Studio.V1.FlowContext.EngagementList
   * @instance
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists EngagementInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Studio.V1.FlowContext.EngagementList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  list(opts?: object, callback?: function);
  /**
   * Retrieve a single page of EngagementInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Studio.V1.FlowContext.EngagementList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  page(opts?: object, callback?: function);
}


declare class EngagementPage extends Page {
  /**
   * @constructor Twilio.Studio.V1.FlowContext.EngagementPage
   * @augments Page
   * @description Initialize the EngagementPage
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Studio.V1, response: Response<string>, solution: object);

  /**
   * Build an instance of EngagementInstance
   *
   * @function getInstance
   * @memberof Twilio.Studio.V1.FlowContext.EngagementPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class EngagementInstance {
  /**
   * @constructor Twilio.Studio.V1.FlowContext.EngagementInstance
   * @description Initialize the EngagementContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property sid - The sid
   * @property accountSid - The account_sid
   * @property flowSid - The flow_sid
   * @property contactSid - The contact_sid
   * @property contactChannelAddress - The contact_channel_address
   * @property context - The context
   * @property status - The status
   * @property dateCreated - The date_created
   * @property dateUpdated - The date_updated
   * @property url - The url
   * @property links - The links
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param flowSid - The flow_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Studio.V1, payload: object, flowSid: sid, sid: sid);

  _proxy?: EngagementContext;
  /**
   * Access the engagementContext
   *
   * @function engagementContext
   * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance
   * @instance
   */
  engagementContext();
  /**
   * fetch a EngagementInstance
   *
   * @function fetch
   * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a EngagementInstance
   *
   * @function remove
   * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Access the steps
   *
   * @function steps
   * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance
   * @instance
   */
  steps();
  /**
   * Produce a plain JSON object version of the EngagementInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance
   * @instance
   */
  toJSON();
}


declare class EngagementContext {
  /**
   * @constructor Twilio.Studio.V1.FlowContext.EngagementContext
   * @description Initialize the EngagementContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property steps - steps resource
   * @property engagementContext - engagementContext resource
   *
   * @param version - Version of the resource
   * @param flowSid - The flow_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Studio.V1, flowSid: sid, sid: sid);

  engagementContext?: Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextList;
  /**
   * fetch a EngagementInstance
   *
   * @function fetch
   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a EngagementInstance
   *
   * @function remove
   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  steps?: Twilio.Studio.V1.FlowContext.EngagementContext.StepList;
}

export { EngagementContext, EngagementInstance, EngagementList, EngagementListInstance, EngagementPage, EngagementPayload, EngagementResource, EngagementSolution }
