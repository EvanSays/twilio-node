/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2 = require('../../V2');
import { InviteListInstance } from './channel/invite';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { MemberListInstance } from './channel/member';
import { MessageListInstance } from './channel/message';
import { SerializableClass } from '../../../../interfaces';
import { WebhookListInstance } from './channel/webhook';

declare function ChannelList(version: V2, serviceSid: string): ChannelListInstance

type ChannelChannelType = 'public'|'private';

interface ChannelResource {
  /**
   * The unique id of the [Account](https://www.twilio.com/console) responsible for this channel.
   */
  account_sid: string;
  /**
   * An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set "{}" will be returned.
   */
  attributes: string;
  /**
   * Identity of the channel's creator. If the Channel was created through the API, the value will be `system`
   */
  created_by: string;
  /**
   * The date that this resource was created.
   */
  date_created: Date;
  /**
   * The date that this resource was last updated.
   */
  date_updated: Date;
  /**
   * The human-readable name of this channel.  Optional.
   */
  friendly_name: string;
  /**
   * Absolute URLs to access the [Members](https://www.twilio.com/docs/chat/api/members), [Messages](https://www.twilio.com/docs/chat/api/messages) , [Invites](https://www.twilio.com/docs/chat/api/invites) and, if it exists the last [Message](https://www.twilio.com/docs/chat/api/messages) for this Channel.
   */
  links: string;
  /**
   * The number of Members in the Channel
   */
  members_count: number;
  /**
   * The number of Messages in the Channel
   */
  messages_count: number;
  /**
   * The unique id of the [Service](https://www.twilio.com/docs/chat/api/services) this channel belongs to.
   */
  service_sid: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The visibility of this channel - either `public` or `private`
   */
  type: ChannelChannelType;
  /**
   * The unique, addressable name of this channel. Optional.
   */
  unique_name: string;
  /**
   * An absolute URL for this channel.
   */
  url: string;
}

interface ChannelPayload extends ChannelResource, Page.TwilioResponsePayload {
}

interface ChannelSolution {
  serviceSid: string;
}

interface ChannelListCreateOptions {
  /**
   * An optional metadata field you can use to store any data you wish. No processing or validation is done on this field.
   */
  attributes?: string;
  /**
   * Optional field to specify the Identity of the User that created the Channel.  Will be set to "system" if not specified.
   */
  createdBy?: string;
  /**
   * The optional ISO8601 time specifying the datetime the Channel should be set as being created.  Will be set to the current time by the Chat service if not specified.  Note that this should only be used in cases where a a Channel is being recreated from a backup/separate source
   */
  dateCreated?: Date;
  /**
   * The optional ISO8601 time specifying the datetime the Channel should be set as having been last updated.  Will be set to the `null` by the Chat service if not specified.  Note that this should only be used in cases where a Channel is being recreated from a backup/separate source  and where a Message was previously updated.
   */
  dateUpdated?: Date;
  /**
   * A human-readable name for the Channel. Optional.
   */
  friendlyName?: string;
  /**
   * The visibility of the channel - `public` or `private`. Defaults to `public`.
   */
  type?: ChannelChannelType;
  /**
   * A unique, addressable name for the Channel.  Optional.
   */
  uniqueName?: string;
}

interface ChannelListEachOptions extends ListEachOptions<ChannelInstance> {
  /**
   * The type
   */
  type?: ChannelChannelType[];
}

interface ChannelListOptions extends ListOptions<ChannelInstance> {
  /**
   * The type
   */
  type?: ChannelChannelType[];
}

interface ChannelListPageOptions extends PageOptions<ChannelPage> {
  /**
   * The type
   */
  type?: ChannelChannelType[];
}

interface ChannelListInstance {
  /**
   * Gets context of a single Channel resource
   *
   * @param sid - The sid
   */
  (sid: string): ChannelContext;
  /**
   * create a ChannelInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ChannelInstance
   */
  create(opts?: ChannelListCreateOptions): Promise<ChannelInstance>;
  /**
   * create a ChannelInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: ChannelListCreateOptions, callback: (error: Error | null, items: ChannelInstance) => any): void;
  /**
   * create a ChannelInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: ChannelInstance) => any): void;
  /**
   * Streams ChannelInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: ChannelListEachOptions): void;
  /**
   * Streams ChannelInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: ChannelInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Channel resource
   *
   * @param sid - The sid
   */
  get(sid: string): ChannelContext;
  /**
   * Retrieve a single target page of ChannelInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<ChannelPage>;
  /**
   * Retrieve a single target page of ChannelInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: ChannelPage) => any): void;
  /**
   * Lists ChannelInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: ChannelListOptions): Promise<ChannelInstance[]>;
  /**
   * Lists ChannelInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: ChannelListOptions, callback: (error: Error | null, items: ChannelInstance[]) => any): void;
  /**
   * Lists ChannelInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: ChannelInstance[]) => any): void;
  /**
   * Retrieve a single page of ChannelInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: ChannelListPageOptions): Promise<ChannelPage>;
  /**
   * Retrieve a single page of ChannelInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: ChannelListPageOptions, callback: (error: Error | null, items: ChannelPage) => any): void;
  /**
   * Retrieve a single page of ChannelInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: ChannelPage) => any): void;
}

interface ChannelListFetchOptions {
  /**
   * An optional metadata field you can use to store any data you wish. No processing or validation is done on this field.
   */
  attributes?: string;
  /**
   * Optional field to specify the Identity of the User that created the Channel.
   */
  createdBy?: string;
  /**
   * The optional ISO8601 time specifying the datetime the Channel should be set as being created.
   */
  dateCreated?: Date;
  /**
   * The optional ISO8601 time specifying the datetime the Channel should be set as having been last updated.
   */
  dateUpdated?: Date;
  /**
   * A human-readable name for the Channel. Optional.
   */
  friendlyName?: string;
  /**
   * A unique, addressable name for the Channel.  Optional.
   */
  uniqueName?: string;
}

interface ChannelListFetchOptions {
  /**
   * An optional metadata field you can use to store any data you wish. No processing or validation is done on this field.
   */
  attributes?: string;
  /**
   * Optional field to specify the Identity of the User that created the Channel.
   */
  createdBy?: string;
  /**
   * The optional ISO8601 time specifying the datetime the Channel should be set as being created.
   */
  dateCreated?: Date;
  /**
   * The optional ISO8601 time specifying the datetime the Channel should be set as having been last updated.
   */
  dateUpdated?: Date;
  /**
   * A human-readable name for the Channel. Optional.
   */
  friendlyName?: string;
  /**
   * A unique, addressable name for the Channel.  Optional.
   */
  uniqueName?: string;
}

declare class ChannelPage extends Page<V2, ChannelPayload, ChannelResource, ChannelInstance> {
  constructor(version: V2, response: Response<string>, solution: ChannelSolution);

  /**
   * Build an instance of ChannelInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ChannelPayload): ChannelInstance;
}

declare class ChannelInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param sid - The sid
   */
  constructor(version: V2, payload: ChannelPayload, serviceSid: string, sid: string);

  private _proxy: ChannelContext;
  /**
   * The unique id of the [Account](https://www.twilio.com/console) responsible for this channel.
   */
  accountSid: string;
  /**
   * An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set "{}" will be returned.
   */
  attributes: string;
  /**
   * Identity of the channel's creator. If the Channel was created through the API, the value will be `system`
   */
  createdBy: string;
  /**
   * The date that this resource was created.
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated.
   */
  dateUpdated: Date;
  /**
   * fetch a ChannelInstance
   *
   * @returns Promise that resolves to processed ChannelInstance
   */
  fetch(): Promise<ChannelInstance>;
  /**
   * fetch a ChannelInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ChannelInstance) => any): void;
  /**
   * The human-readable name of this channel.  Optional.
   */
  friendlyName: string;
  invites(): InviteListInstance;
  /**
   * Absolute URLs to access the [Members](https://www.twilio.com/docs/chat/api/members), [Messages](https://www.twilio.com/docs/chat/api/messages) , [Invites](https://www.twilio.com/docs/chat/api/invites) and, if it exists the last [Message](https://www.twilio.com/docs/chat/api/messages) for this Channel.
   */
  links: string;
  members(): MemberListInstance;
  /**
   * The number of Members in the Channel
   */
  membersCount: number;
  messages(): MessageListInstance;
  /**
   * The number of Messages in the Channel
   */
  messagesCount: number;
  /**
   * remove a ChannelInstance
   *
   * @returns Promise that resolves to processed ChannelInstance
   */
  remove(): Promise<ChannelInstance>;
  /**
   * remove a ChannelInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: ChannelInstance) => any): void;
  /**
   * The unique id of the [Service](https://www.twilio.com/docs/chat/api/services) this channel belongs to.
   */
  serviceSid: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The visibility of this channel - either `public` or `private`
   */
  type: ChannelChannelType;
  /**
   * The unique, addressable name of this channel. Optional.
   */
  uniqueName: string;
  /**
   * update a ChannelInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ChannelInstance
   */
  update(opts?: ChannelListFetchOptions): Promise<ChannelInstance>;
  /**
   * update a ChannelInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ChannelListFetchOptions, callback: (error: Error | null, items: ChannelInstance) => any): void;
  /**
   * update a ChannelInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ChannelInstance) => any): void;
  /**
   * An absolute URL for this channel.
   */
  url: string;
  webhooks(): WebhookListInstance;
}

declare class ChannelContext {
  constructor(version: V2, serviceSid: string, sid: string);

  /**
   * fetch a ChannelInstance
   *
   * @returns Promise that resolves to processed ChannelInstance
   */
  fetch(): Promise<ChannelInstance>;
  /**
   * fetch a ChannelInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ChannelInstance) => any): void;
  invites: InviteListInstance;
  members: MemberListInstance;
  messages: MessageListInstance;
  /**
   * remove a ChannelInstance
   *
   * @returns Promise that resolves to processed ChannelInstance
   */
  remove(): Promise<ChannelInstance>;
  /**
   * remove a ChannelInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: ChannelInstance) => any): void;
  /**
   * update a ChannelInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ChannelInstance
   */
  update(opts?: ChannelListFetchOptions): Promise<ChannelInstance>;
  /**
   * update a ChannelInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ChannelListFetchOptions, callback: (error: Error | null, items: ChannelInstance) => any): void;
  /**
   * update a ChannelInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ChannelInstance) => any): void;
  webhooks: WebhookListInstance;
}

export { ChannelChannelType, ChannelContext, ChannelInstance, ChannelList, ChannelListCreateOptions, ChannelListEachOptions, ChannelListFetchOptions, ChannelListInstance, ChannelListOptions, ChannelListPageOptions, ChannelPage, ChannelPayload, ChannelResource, ChannelSolution }
