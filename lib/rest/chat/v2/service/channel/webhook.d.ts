/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V2 = require('../../../V2');
import serialize = require('../../../../../base/serialize');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';
import { SerializableClass } from '../../../../../interfaces';

/**
 * @description Initialize the WebhookList
 *
 * @param version - Version of the resource
 * @param serviceSid - The service_sid
 * @param channelSid - The channel_sid
 */
declare function WebhookList(version: V2, serviceSid: string, channelSid: string): WebhookListInstance;

interface WebhookResource {
  account_sid: string;
  channel_sid: string;
  configuration: string;
  date_created: Date;
  date_updated: Date;
  service_sid: string;
  sid: string;
  type: string;
  url: string;
}

interface WebhookPayload extends WebhookResource, Page.TwilioResponsePayload {
}

interface WebhookSolution {
  channelSid?: string;
  serviceSid?: string;
}

interface WebhookListInstance {
  /**
   * @param sid - sid of instance
   */
  WebhookListInstance(sid: string);
  /**
   * create a WebhookInstance
   *
   * @function create
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  create(opts: object, callback?: function);
  /**
   * Streams WebhookInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList
   * @instance
   *
   * @param opts - ...
   * @param callback - Function to process each record
   */
  each(opts?: object, callback?: Function);
  /**
   * Constructs a webhook
   *
   * @function get
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList
   * @instance
   *
   * @param sid - The sid
   */
  get(sid: string);
  /**
   * Retrieve a single target page of WebhookInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList
   * @instance
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function);
  /**
   * @description Lists WebhookInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  list(opts?: object, callback?: function);
  /**
   * Retrieve a single page of WebhookInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle list of records
   */
  page(opts?: object, callback?: function);
}

/**
 * Options to pass to update
 *
 * @property configuration.url - The configuration.url
 * @property configuration.method - The configuration.method
 * @property configuration.filters - The configuration.filters
 * @property configuration.triggers - The configuration.triggers
 * @property configuration.flowSid - The configuration.flow_sid
 * @property configuration.retryCount - The configuration.retry_count
 */
export interface UpdateOptions {
  configuration.filters?: string|list;
  configuration.flowSid?: string;
  configuration.method?: webhook.method;
  configuration.retryCount?: number;
  configuration.triggers?: string|list;
  configuration.url?: string;
}

/**
 * Options to pass to update
 *
 * @property configuration.url - The configuration.url
 * @property configuration.method - The configuration.method
 * @property configuration.filters - The configuration.filters
 * @property configuration.triggers - The configuration.triggers
 * @property configuration.flowSid - The configuration.flow_sid
 * @property configuration.retryCount - The configuration.retry_count
 */
export interface UpdateOptions {
  configuration.filters?: string|list;
  configuration.flowSid?: string;
  configuration.method?: webhook.method;
  configuration.retryCount?: number;
  configuration.triggers?: string|list;
  configuration.url?: string;
}


declare class WebhookPage extends Page {
  /**
   * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookPage
   * @augments Page
   * @description Initialize the WebhookPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Chat.V2, response: Response<string>, solution: object);

  /**
   * Build an instance of WebhookInstance
   *
   * @function getInstance
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class WebhookInstance {
  /**
   * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance
   * @description Initialize the WebhookContext
   *
   * @property sid - The sid
   * @property accountSid - The account_sid
   * @property serviceSid - The service_sid
   * @property channelSid - The channel_sid
   * @property type - The type
   * @property url - The url
   * @property configuration - The configuration
   * @property dateCreated - The date_created
   * @property dateUpdated - The date_updated
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param channelSid - The channel_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Chat.V2, payload: object, serviceSid: sid, channelSid: sid, sid: sid);

  _proxy?: WebhookContext;
  /**
   * fetch a WebhookInstance
   *
   * @function fetch
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a WebhookInstance
   *
   * @function remove
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the WebhookInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance
   * @instance
   */
  toJSON();
  /**
   * update a WebhookInstance
   *
   * @function update
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}


declare class WebhookContext {
  /**
   * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext
   * @description Initialize the WebhookContext
   *
   * @param version - Version of the resource
   * @param serviceSid - The service_sid
   * @param channelSid - The channel_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Chat.V2, serviceSid: sid, channelSid: sid_like, sid: sid);

  /**
   * fetch a WebhookInstance
   *
   * @function fetch
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a WebhookInstance
   *
   * @function remove
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a WebhookInstance
   *
   * @function update
   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { WebhookContext, WebhookInstance, WebhookList, WebhookListInstance, WebhookPage, WebhookPayload, WebhookResource, WebhookSolution }
