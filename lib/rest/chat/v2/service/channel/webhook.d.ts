/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V2 = require('../../../V2');
import serialize = require('../../../../../base/serialize');
import { SerializableClass } from '../../../../../interfaces';

/**
 * @description Initialize the WebhookList
 *
 * @param version - Version of the resource
 * @param serviceSid - The service_sid
 * @param channelSid - The channel_sid
 */
declare function WebhookList(version: V2, serviceSid: string, channelSid: string): WebhookListInstance;

interface WebhookResource {
  account_sid: string;
  channel_sid: string;
  configuration: string;
  date_created: Date;
  date_updated: Date;
  service_sid: string;
  sid: string;
  type: string;
  url: string;
}

interface WebhookPayload extends WebhookResource, Page.TwilioResponsePayload {
}

interface WebhookSolution {
  channelSid?: string;
  serviceSid?: string;
}

interface WebhookListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): WebhookContext;
  /**
   * create a WebhookInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: WebhookListInstanceCreateOptions, callback?: (error: Error | null, items: WebhookListInstance) => any): Promise<WebhookInstance>;
  /**
   * Streams WebhookInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: WebhookListInstanceEachOptions, callback?: (item: WebhookInstance, done: (err?: Error) => void) => void): void;
  /**
   * Constructs a webhook
   *
   * @param sid - The sid
   */
  get(sid: string): WebhookContext;
  /**
   * Retrieve a single target page of WebhookInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: function): Promise<WebhookPage>;
  /**
   * @description Lists WebhookInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: WebhookListInstanceOptions, callback?: function): Promise<WebhookInstance[]>;
  /**
   * Retrieve a single page of WebhookInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: WebhookListInstancePageOptions, callback?: function): Promise<WebhookPage>;
}

/**
 * Options to pass to update
 *
 * @property configuration.url - The configuration.url
 * @property configuration.method - The configuration.method
 * @property configuration.filters - The configuration.filters
 * @property configuration.triggers - The configuration.triggers
 * @property configuration.flowSid - The configuration.flow_sid
 * @property configuration.retryCount - The configuration.retry_count
 */
export interface WebhookInstanceUpdateOptions {
  configuration.filters?: string|list;
  configuration.flowSid?: string;
  configuration.method?: webhook.method;
  configuration.retryCount?: number;
  configuration.triggers?: string|list;
  configuration.url?: string;
}

/**
 * Options to pass to update
 *
 * @property configuration.url - The configuration.url
 * @property configuration.method - The configuration.method
 * @property configuration.filters - The configuration.filters
 * @property configuration.triggers - The configuration.triggers
 * @property configuration.flowSid - The configuration.flow_sid
 * @property configuration.retryCount - The configuration.retry_count
 */
export interface WebhookContextUpdateOptions {
  configuration.filters?: string|list;
  configuration.flowSid?: string;
  configuration.method?: webhook.method;
  configuration.retryCount?: number;
  configuration.triggers?: string|list;
  configuration.url?: string;
}

/**
 * Options to pass to each
 *
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 */
export interface WebhookListInstanceEachOptions {
  callback?: (item: WebhookInstance, done: (err?: Error) => void) => void;
  done?: Function;
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to list
 *
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
export interface WebhookListInstanceOptions {
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to page
 *
 * @property pageToken - PageToken provided by the API
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 */
export interface WebhookListInstancePageOptions {
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
}

/**
 * Options to pass to create
 *
 * @property type - The type
 * @property configuration.url - The configuration.url
 * @property configuration.method - The configuration.method
 * @property configuration.filters - The configuration.filters
 * @property configuration.triggers - The configuration.triggers
 * @property configuration.flowSid - The configuration.flow_sid
 * @property configuration.retryCount - The configuration.retry_count
 */
export interface WebhookListInstanceCreateOptions {
  configuration.filters?: string|list;
  configuration.flowSid?: string;
  configuration.method?: webhook.method;
  configuration.retryCount?: number;
  configuration.triggers?: string|list;
  configuration.url?: string;
  type: webhook.type;
}


declare class WebhookPage extends Page {
  /**
   * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookPage
   * @augments Page
   * @description Initialize the WebhookPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Chat.V2, response: Response<string>, solution: object);

  /**
   * Build an instance of WebhookInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class WebhookInstance {
  /**
   * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance
   * @description Initialize the WebhookContext
   *
   * @property sid - The sid
   * @property accountSid - The account_sid
   * @property serviceSid - The service_sid
   * @property channelSid - The channel_sid
   * @property type - The type
   * @property url - The url
   * @property configuration - The configuration
   * @property dateCreated - The date_created
   * @property dateUpdated - The date_updated
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param channelSid - The channel_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Chat.V2, payload: object, serviceSid: sid, channelSid: sid, sid: sid);

  _proxy?: WebhookContext;
  /**
   * fetch a WebhookInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: WebhookInstance) => any);
  /**
   * remove a WebhookInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: WebhookInstance) => any);
  /**
   * Produce a plain JSON object version of the WebhookInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON();
  /**
   * update a WebhookInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: WebhookInstanceUpdateOptions, callback?: (error: Error | null, items: WebhookInstance) => any);
}


declare class WebhookContext {
  /**
   * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext
   * @description Initialize the WebhookContext
   *
   * @param version - Version of the resource
   * @param serviceSid - The service_sid
   * @param channelSid - The channel_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Chat.V2, serviceSid: sid, channelSid: sid_like, sid: sid);

  /**
   * fetch a WebhookInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: WebhookContext) => any);
  /**
   * remove a WebhookInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: WebhookContext) => any);
  /**
   * update a WebhookInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: WebhookContextUpdateOptions, callback?: (error: Error | null, items: WebhookContext) => any);
}

export { WebhookContext, WebhookInstance, WebhookList, WebhookListInstance, WebhookPage, WebhookPayload, WebhookResource, WebhookSolution }
