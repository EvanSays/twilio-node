/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';
import { UserChannelListInstance } from './user/userChannel';

declare function UserList(version: V1, serviceSid: string): UserListInstance

interface UserResource {
  /**
   * The unique id of the [Account](https://www.twilio.com/docs/api/rest/account) responsible for this user.
   */
  account_sid: string;
  /**
   * An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that this will always be null for resources returned via LIST GET operations, but will be present for single GET operations.
   */
  attributes: string;
  /**
   * The date that this resource was created in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  date_created: Date;
  /**
   * The date that this resource was last updated in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  date_updated: Date;
  /**
   * The human-readable name of this user.  Optional.
   */
  friendly_name: string;
  /**
   * A unique string that identifies the user within this service - often a username or email address. See the [identity](https://www.twilio.com/docs/api/chat/guides/identity) docs for more details.
   */
  identity: string;
  /**
   * Indicates whether the User has a potentially valid Push Notification registration (APN or GCM)  for the Service instance. `true` if at least one registration exists, `false` if not.  **Note** that this will always be null for resources returned via LIST GET operations, but will be present for single GET operations.  **Note** that this will be `null` if Reachability is not enabled for the Service instance.  **Note** This will be `null` for Users that have not  ever had a notification registration for the Service instance, even if Reachability is enabled.
   */
  is_notifiable: boolean;
  /**
   * Indicates whether the User is actively connected to the Service instance and online. `true` if online, `false` if not.  **Note** that this will always be null for resources returned via LIST GET operations, but will be present for single GET operations.  **Note** that this will be `null` if Reachability is not enabled for the Service instance.  **Note** This will be `null` for Users that have not  ever had been online for the Service instance, even if Reachability is enabled.
   */
  is_online: boolean;
  /**
   * The joined_channels_count
   */
  joined_channels_count: number;
  /**
   * The links
   */
  links: string;
  /**
   * The unique id of the [Role][role] assigned to this user.
   */
  role_sid: string;
  /**
   * The unique id of the [Service](https://www.twilio.com/docs/api/chat/rest/v1/services) this user belongs to.
   */
  service_sid: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * An absolute URL for this user.
   */
  url: string;
}

interface UserPayload extends UserResource, Page.TwilioResponsePayload {
}

interface UserSolution {
  serviceSid: string;
}

interface UserListCreateOptions {
  /**
   * An optional string used to contain any metadata or other information for the User.  The string must contain structurally valid JSON if specified.
   */
  attributes?: string;
  /**
   * An optional human readable string representing the user.  Often used for display purposes.
   */
  friendlyName?: string;
  /**
   * A unique string that identifies the user within this service - often a username or email address. See the [identity][identity] docs for more details.
   */
  identity: string;
  /**
   * The unique id of the [Role](https://www.twilio.com/docs/api/chat/rest/v1/roles) assigned to this user.
   */
  roleSid?: string;
}

interface UserListEachOptions extends ListEachOptions<UserInstance> {
}

interface UserListOptions extends ListOptions<UserInstance> {
}

interface UserListPageOptions extends PageOptions<UserPage> {
}

interface UserListInstance {
  /**
   * Gets context of a single User resource
   *
   * @param sid - The sid
   */
  (sid: string): UserContext;
  /**
   * create a UserInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed UserInstance
   */
  create(opts: UserListCreateOptions): Promise<UserInstance>;
  /**
   * create a UserInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: UserListCreateOptions, callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * Streams UserInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: UserListEachOptions): void;
  /**
   * Streams UserInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: UserInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single User resource
   *
   * @param sid - The sid
   */
  get(sid: string): UserContext;
  /**
   * Retrieve a single target page of UserInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<UserPage>;
  /**
   * Retrieve a single target page of UserInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: UserPage) => any): void;
  /**
   * Lists UserInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: UserListOptions): Promise<UserInstance[]>;
  /**
   * Lists UserInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: UserListOptions, callback: (error: Error | null, items: UserInstance[]) => any): void;
  /**
   * Lists UserInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: UserInstance[]) => any): void;
  /**
   * Retrieve a single page of UserInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: UserListPageOptions): Promise<UserPage>;
  /**
   * Retrieve a single page of UserInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: UserListPageOptions, callback: (error: Error | null, items: UserPage) => any): void;
  /**
   * Retrieve a single page of UserInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: UserPage) => any): void;
}

interface UserListFetchOptions {
  /**
   * An optional string used to contain any metadata or other information for the User.  The string must contain structurally valid JSON if specified.
   */
  attributes?: string;
  /**
   * An optional human readable string representing the user.  Often used for display purposes.
   */
  friendlyName?: string;
  /**
   * The unique id of the [Role][role] assigned to this user.
   */
  roleSid?: string;
}

interface UserListFetchOptions {
  /**
   * An optional string used to contain any metadata or other information for the User.  The string must contain structurally valid JSON if specified.
   */
  attributes?: string;
  /**
   * An optional human readable string representing the user.  Often used for display purposes.
   */
  friendlyName?: string;
  /**
   * The unique id of the [Role][role] assigned to this user.
   */
  roleSid?: string;
}

declare class UserPage extends Page<V1, UserPayload, UserResource, UserInstance> {
  constructor(version: V1, response: Response<string>, solution: UserSolution);

  /**
   * Build an instance of UserInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: UserPayload): UserInstance;
}

declare class UserInstance extends SerializableClass {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: UserPayload, serviceSid: string, sid: string);

  private _proxy: UserContext;
  /**
   * The unique id of the [Account](https://www.twilio.com/docs/api/rest/account) responsible for this user.
   */
  accountSid: string;
  /**
   * An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that this will always be null for resources returned via LIST GET operations, but will be present for single GET operations.
   */
  attributes: string;
  /**
   * The date that this resource was created in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateUpdated: Date;
  /**
   * fetch a UserInstance
   *
   * @returns Promise that resolves to processed UserInstance
   */
  fetch(): Promise<UserInstance>;
  /**
   * fetch a UserInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * The human-readable name of this user.  Optional.
   */
  friendlyName: string;
  /**
   * A unique string that identifies the user within this service - often a username or email address. See the [identity](https://www.twilio.com/docs/api/chat/guides/identity) docs for more details.
   */
  identity: string;
  /**
   * Indicates whether the User has a potentially valid Push Notification registration (APN or GCM)  for the Service instance. `true` if at least one registration exists, `false` if not.  **Note** that this will always be null for resources returned via LIST GET operations, but will be present for single GET operations.  **Note** that this will be `null` if Reachability is not enabled for the Service instance.  **Note** This will be `null` for Users that have not  ever had a notification registration for the Service instance, even if Reachability is enabled.
   */
  isNotifiable: boolean;
  /**
   * Indicates whether the User is actively connected to the Service instance and online. `true` if online, `false` if not.  **Note** that this will always be null for resources returned via LIST GET operations, but will be present for single GET operations.  **Note** that this will be `null` if Reachability is not enabled for the Service instance.  **Note** This will be `null` for Users that have not  ever had been online for the Service instance, even if Reachability is enabled.
   */
  isOnline: boolean;
  /**
   * The joined_channels_count
   */
  joinedChannelsCount: number;
  /**
   * The links
   */
  links: string;
  /**
   * remove a UserInstance
   *
   * @returns Promise that resolves to processed UserInstance
   */
  remove(): Promise<UserInstance>;
  /**
   * remove a UserInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * The unique id of the [Role][role] assigned to this user.
   */
  roleSid: string;
  /**
   * The unique id of the [Service](https://www.twilio.com/docs/api/chat/rest/v1/services) this user belongs to.
   */
  serviceSid: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * update a UserInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed UserInstance
   */
  update(opts?: UserListFetchOptions): Promise<UserInstance>;
  /**
   * update a UserInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: UserListFetchOptions, callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * update a UserInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * An absolute URL for this user.
   */
  url: string;
  userChannels(): UserChannelListInstance;
}

declare class UserContext {
  constructor(version: V1, serviceSid: string, sid: string);

  /**
   * fetch a UserInstance
   *
   * @returns Promise that resolves to processed UserInstance
   */
  fetch(): Promise<UserInstance>;
  /**
   * fetch a UserInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * remove a UserInstance
   *
   * @returns Promise that resolves to processed UserInstance
   */
  remove(): Promise<UserInstance>;
  /**
   * remove a UserInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * update a UserInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed UserInstance
   */
  update(opts?: UserListFetchOptions): Promise<UserInstance>;
  /**
   * update a UserInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: UserListFetchOptions, callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * update a UserInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: UserInstance) => any): void;
  userChannels: UserChannelListInstance;
}

export { UserContext, UserInstance, UserList, UserListCreateOptions, UserListEachOptions, UserListFetchOptions, UserListInstance, UserListOptions, UserListPageOptions, UserPage, UserPayload, UserResource, UserSolution }
